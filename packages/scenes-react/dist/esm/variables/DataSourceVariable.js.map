{"version":3,"file":"DataSourceVariable.js","sources":["../../../src/variables/DataSourceVariable.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { DataSourceVariable as DataSourceVariableObject } from '@grafana/scenes';\nimport { useSceneContext } from '../hooks/hooks';\nimport { VariableRefresh, VariableSort } from '@grafana/schema';\nimport { VariableProps } from './types';\n\nexport interface DataSourceVariableProps extends VariableProps {\n  pluginId: string;\n  regex?: string;\n  refresh?: VariableRefresh;\n  sort?: VariableSort;\n  isMulti?: boolean;\n  includeAll?: boolean;\n  children: React.ReactNode;\n}\n\nexport function DataSourceVariable({\n  pluginId,\n  regex,\n  name,\n  label,\n  hide,\n  initialValue,\n  isMulti,\n  includeAll,\n  children,\n}: DataSourceVariableProps): React.ReactNode {\n  const scene = useSceneContext();\n  const [variableAdded, setVariableAdded] = useState<boolean>();\n\n  let variable: DataSourceVariableObject | undefined = scene.findVariable(name);\n\n  if (!variable) {\n    variable = new DataSourceVariableObject({ \n      pluginId,\n      regex,\n      name,\n      label,\n      value: initialValue, \n      isMulti,\n      hide, \n      includeAll,\n     });\n  }\n\n  useEffect(() => {\n    const removeFn = scene.addVariable(variable);\n    setVariableAdded(true);\n    return removeFn;\n  }, [variable, scene, name]);\n\n  useEffect(() => {\n    if (!variableAdded) {\n      return;\n    }\n\n    if (\n      variable.state.pluginId ===  pluginId &&\n      variable.state.regex === regex &&\n      variable.state.label === label &&\n      variable.state.hide === hide &&\n      variable.state.includeAll === includeAll\n    ) {\n      return;\n    }\n\n    variable.setState({\n      pluginId,\n      regex,\n      label,\n      hide, \n      includeAll,\n    })\n\n    variable.refreshOptions();\n  }, [hide, includeAll, label, pluginId, regex, variable, variableAdded])\n\n  // Need to block child rendering until the variable is added so that child components like RVariableSelect find the variable\n  if (!variableAdded) {\n    return null;\n  }\n\n  return children;\n}\n"],"names":["DataSourceVariableObject"],"mappings":";;;;AAgBO,SAAS,kBAAmB,CAAA;AAAA,EACjC,QAAA;AAAA,EACA,KAAA;AAAA,EACA,IAAA;AAAA,EACA,KAAA;AAAA,EACA,IAAA;AAAA,EACA,YAAA;AAAA,EACA,OAAA;AAAA,EACA,UAAA;AAAA,EACA,QAAA;AACF,CAA6C,EAAA;AAC3C,EAAA,MAAM,QAAQ,eAAgB,EAAA,CAAA;AAC9B,EAAA,MAAM,CAAC,aAAA,EAAe,gBAAgB,CAAA,GAAI,QAAkB,EAAA,CAAA;AAE5D,EAAI,IAAA,QAAA,GAAiD,KAAM,CAAA,YAAA,CAAa,IAAI,CAAA,CAAA;AAE5E,EAAA,IAAI,CAAC,QAAU,EAAA;AACb,IAAA,QAAA,GAAW,IAAIA,oBAAyB,CAAA;AAAA,MACtC,QAAA;AAAA,MACA,KAAA;AAAA,MACA,IAAA;AAAA,MACA,KAAA;AAAA,MACA,KAAO,EAAA,YAAA;AAAA,MACP,OAAA;AAAA,MACA,IAAA;AAAA,MACA,UAAA;AAAA,KACA,CAAA,CAAA;AAAA,GACJ;AAEA,EAAA,SAAA,CAAU,MAAM;AACd,IAAM,MAAA,QAAA,GAAW,KAAM,CAAA,WAAA,CAAY,QAAQ,CAAA,CAAA;AAC3C,IAAA,gBAAA,CAAiB,IAAI,CAAA,CAAA;AACrB,IAAO,OAAA,QAAA,CAAA;AAAA,GACN,EAAA,CAAC,QAAU,EAAA,KAAA,EAAO,IAAI,CAAC,CAAA,CAAA;AAE1B,EAAA,SAAA,CAAU,MAAM;AACd,IAAA,IAAI,CAAC,aAAe,EAAA;AAClB,MAAA,OAAA;AAAA,KACF;AAEA,IAAA,IACE,SAAS,KAAM,CAAA,QAAA,KAAc,YAC7B,QAAS,CAAA,KAAA,CAAM,UAAU,KACzB,IAAA,QAAA,CAAS,MAAM,KAAU,KAAA,KAAA,IACzB,SAAS,KAAM,CAAA,IAAA,KAAS,QACxB,QAAS,CAAA,KAAA,CAAM,eAAe,UAC9B,EAAA;AACA,MAAA,OAAA;AAAA,KACF;AAEA,IAAA,QAAA,CAAS,QAAS,CAAA;AAAA,MAChB,QAAA;AAAA,MACA,KAAA;AAAA,MACA,KAAA;AAAA,MACA,IAAA;AAAA,MACA,UAAA;AAAA,KACD,CAAA,CAAA;AAED,IAAA,QAAA,CAAS,cAAe,EAAA,CAAA;AAAA,GAC1B,EAAG,CAAC,IAAM,EAAA,UAAA,EAAY,OAAO,QAAU,EAAA,KAAA,EAAO,QAAU,EAAA,aAAa,CAAC,CAAA,CAAA;AAGtE,EAAA,IAAI,CAAC,aAAe,EAAA;AAClB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAEA,EAAO,OAAA,QAAA,CAAA;AACT;;;;"}