{"version":3,"file":"hooks.js","sources":["../../../src/hooks/hooks.ts"],"sourcesContent":["import { useCallback, useContext, useEffect, useState } from 'react';\nimport { SceneContext } from '../contexts/SceneContextProvider';\nimport { TimeRange } from '@grafana/data';\nimport {\n  SceneVariable,\n  SceneVariableValueChangedEvent,\n  VariableValue,\n  sceneGraph,\n  SceneTimeRangeLike,\n} from '@grafana/scenes';\nimport { Subscription } from 'rxjs';\n\nexport function useSceneContext() {\n  const scene = useContext(SceneContext);\n  if (!scene) {\n    throw new Error('Cannot find a SceneContext');\n  }\n\n  return scene;\n}\n\nexport function useTimeRange(): [TimeRange, SceneTimeRangeLike] {\n  const scene = useSceneContext();\n  const sceneTimeRange = sceneGraph.getTimeRange(scene);\n  const { value } = sceneTimeRange.useState();\n\n  return [value, sceneTimeRange];\n}\n\n/**\n * Only returns the variables on the closest context level.\n * We could modify it to extract all variables from the full context tree.\n */\nexport function useVariables(): SceneVariable[] {\n  const scene = useSceneContext();\n  const variables = sceneGraph.getVariables(scene);\n  return variables.useState().variables;\n}\n\nexport interface UseUpdateWhenSceneChangesOptions {\n  /** Variable names */\n  variables?: string[];\n  timeRange?: boolean;\n}\n\nexport interface UseUpdateWhenSceneChangesReason {\n  variableName?: string;\n  variableValue?: VariableValue | undefined | null;\n  timeRange?: TimeRange;\n}\n\n/**\n * A utility hook to re-render the calling react component when specified variables or time range changes\n */\nexport function useUpdateWhenSceneChanges({ timeRange, variables = [] }: UseUpdateWhenSceneChangesOptions) {\n  const scene = useSceneContext();\n  const [updateReason, setUpdateReason] = useState<UseUpdateWhenSceneChangesReason>();\n\n  useEffect(() => {\n    const subscriptions = new Subscription();\n\n    if (variables && variables.length > 0) {\n      for (const v of variables) {\n        const variable = sceneGraph.lookupVariable(v, scene);\n        if (variable) {\n          subscriptions.add(\n            variable.subscribeToEvent(SceneVariableValueChangedEvent, () => {\n              setUpdateReason({ variableName: variable.state.name, variableValue: variable.getValue() });\n            })\n          );\n        }\n      }\n    }\n\n    if (timeRange) {\n      const tr = sceneGraph.getTimeRange(scene);\n      tr.subscribeToState((newState, oldState) => {\n        if (newState.value !== oldState.value) {\n          setUpdateReason({ timeRange: newState.value });\n        }\n      });\n    }\n\n    return () => subscriptions.unsubscribe();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scene, timeRange, ...variables]);\n\n  return updateReason;\n}\n\n/**\n * Mainly a utility hook to re-render the calling react component when specified variables or time range changes\n */\nexport function useVariableInterpolator(options: UseUpdateWhenSceneChangesOptions) {\n  const scene = useSceneContext();\n\n  useUpdateWhenSceneChanges(options);\n\n  return useCallback(\n    (str: string) => {\n      return sceneGraph.interpolate(scene, str);\n    },\n    [scene]\n  );\n}\n"],"names":[],"mappings":";;;;;AAYO,SAAS,eAAkB,GAAA;AAChC,EAAM,MAAA,KAAA,GAAQ,WAAW,YAAY,CAAA,CAAA;AACrC,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAM,MAAA,IAAI,MAAM,4BAA4B,CAAA,CAAA;AAAA,GAC9C;AAEA,EAAO,OAAA,KAAA,CAAA;AACT,CAAA;AAEO,SAAS,YAAgD,GAAA;AAC9D,EAAA,MAAM,QAAQ,eAAgB,EAAA,CAAA;AAC9B,EAAM,MAAA,cAAA,GAAiB,UAAW,CAAA,YAAA,CAAa,KAAK,CAAA,CAAA;AACpD,EAAA,MAAM,EAAE,KAAA,EAAU,GAAA,cAAA,CAAe,QAAS,EAAA,CAAA;AAE1C,EAAO,OAAA,CAAC,OAAO,cAAc,CAAA,CAAA;AAC/B,CAAA;AAMO,SAAS,YAAgC,GAAA;AAC9C,EAAA,MAAM,QAAQ,eAAgB,EAAA,CAAA;AAC9B,EAAM,MAAA,SAAA,GAAY,UAAW,CAAA,YAAA,CAAa,KAAK,CAAA,CAAA;AAC/C,EAAO,OAAA,SAAA,CAAU,UAAW,CAAA,SAAA,CAAA;AAC9B,CAAA;AAiBO,SAAS,0BAA0B,EAAE,SAAA,EAAW,SAAY,GAAA,IAAwC,EAAA;AACzG,EAAA,MAAM,QAAQ,eAAgB,EAAA,CAAA;AAC9B,EAAA,MAAM,CAAC,YAAA,EAAc,eAAe,CAAA,GAAI,QAA0C,EAAA,CAAA;AAElF,EAAA,SAAA,CAAU,MAAM;AACd,IAAM,MAAA,aAAA,GAAgB,IAAI,YAAa,EAAA,CAAA;AAEvC,IAAI,IAAA,SAAA,IAAa,SAAU,CAAA,MAAA,GAAS,CAAG,EAAA;AACrC,MAAA,KAAA,MAAW,KAAK,SAAW,EAAA;AACzB,QAAA,MAAM,QAAW,GAAA,UAAA,CAAW,cAAe,CAAA,CAAA,EAAG,KAAK,CAAA,CAAA;AACnD,QAAA,IAAI,QAAU,EAAA;AACZ,UAAc,aAAA,CAAA,GAAA;AAAA,YACZ,QAAA,CAAS,gBAAiB,CAAA,8BAAA,EAAgC,MAAM;AAC9D,cAAgB,eAAA,CAAA,EAAE,cAAc,QAAS,CAAA,KAAA,CAAM,MAAM,aAAe,EAAA,QAAA,CAAS,QAAS,EAAA,EAAG,CAAA,CAAA;AAAA,aAC1F,CAAA;AAAA,WACH,CAAA;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAEA,IAAA,IAAI,SAAW,EAAA;AACb,MAAM,MAAA,EAAA,GAAK,UAAW,CAAA,YAAA,CAAa,KAAK,CAAA,CAAA;AACxC,MAAG,EAAA,CAAA,gBAAA,CAAiB,CAAC,QAAA,EAAU,QAAa,KAAA;AAC1C,QAAI,IAAA,QAAA,CAAS,KAAU,KAAA,QAAA,CAAS,KAAO,EAAA;AACrC,UAAA,eAAA,CAAgB,EAAE,SAAA,EAAW,QAAS,CAAA,KAAA,EAAO,CAAA,CAAA;AAAA,SAC/C;AAAA,OACD,CAAA,CAAA;AAAA,KACH;AAEA,IAAO,OAAA,MAAM,cAAc,WAAY,EAAA,CAAA;AAAA,KAEtC,CAAC,KAAA,EAAO,SAAW,EAAA,GAAG,SAAS,CAAC,CAAA,CAAA;AAEnC,EAAO,OAAA,YAAA,CAAA;AACT,CAAA;AAKO,SAAS,wBAAwB,OAA2C,EAAA;AACjF,EAAA,MAAM,QAAQ,eAAgB,EAAA,CAAA;AAE9B,EAAA,yBAAA,CAA0B,OAAO,CAAA,CAAA;AAEjC,EAAO,OAAA,WAAA;AAAA,IACL,CAAC,GAAgB,KAAA;AACf,MAAO,OAAA,UAAA,CAAW,WAAY,CAAA,KAAA,EAAO,GAAG,CAAA,CAAA;AAAA,KAC1C;AAAA,IACA,CAAC,KAAK,CAAA;AAAA,GACR,CAAA;AACF;;;;"}