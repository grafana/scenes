{"version":3,"file":"SceneRefreshPicker.js","sources":["../../../src/components/SceneRefreshPicker.tsx"],"sourcesContent":["import React from 'react';\nimport { Unsubscribable } from 'rxjs';\nimport { rangeUtil } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { RefreshPicker } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { sceneGraph } from '../core/sceneGraph';\nimport { SceneComponentProps, SceneObject, SceneObjectState, SceneObjectUrlValues } from '../core/types';\nimport { SceneObjectUrlSyncConfig } from '../services/SceneObjectUrlSyncConfig';\n\nexport const DEFAULT_INTERVALS = ['5s', '10s', '30s', '1m', '5m', '15m', '30m', '1h', '2h', '1d'];\n\nexport interface SceneRefreshPickerState extends SceneObjectState {\n  /**\n   * Refresh interval, e.g. 5s, 1m, 2h\n   */\n  refresh: string;\n  autoEnabled?: boolean;\n  autoMinInterval?: string;\n  autoValue?: string;\n  /**\n   * List of allowed refresh intervals, e.g. ['5s', '1m']\n   */\n  intervals?: string[];\n  isOnCanvas?: boolean;\n  primary?: boolean;\n  withText?: boolean;\n  /**\n   * Overrides the default minRefreshInterval from the grafana config. Can be set to \"0s\" to remove the minimum refresh interval.\n   */\n  minRefreshInterval?: string;\n}\n\nexport class SceneRefreshPicker extends SceneObjectBase<SceneRefreshPickerState> {\n  public static Component = SceneRefreshPickerRenderer;\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['refresh'] });\n  private _intervalTimer: ReturnType<typeof setInterval> | undefined;\n  private _autoTimeRangeListener: Unsubscribable | undefined;\n  private _autoRefreshBlocked: boolean = false;\n\n  public constructor(state: Partial<SceneRefreshPickerState>) {\n    const filterDissalowedIntervals = (i: string) => {\n      const minInterval = state.minRefreshInterval ?? config.minRefreshInterval;\n      try {\n        return minInterval ? rangeUtil.intervalToMs(i) >= rangeUtil.intervalToMs(minInterval) : true;\n      } catch (e) {\n        // Unable to parse interval\n        return false;\n      }\n    };\n\n    super({\n      refresh: '',\n      ...state,\n      autoValue: undefined,\n      autoEnabled: state.autoEnabled ?? true,\n      autoMinInterval: state.autoMinInterval ?? config.minRefreshInterval,\n      intervals: (state.intervals ?? DEFAULT_INTERVALS).filter(filterDissalowedIntervals),\n    });\n\n    this.addActivationHandler(() => {\n      this.setupIntervalTimer();\n\n      const onVisibilityChange = () => {\n        if (this._autoRefreshBlocked && document.visibilityState === 'visible') {\n          this._autoRefreshBlocked = false;\n          this.onRefresh();\n        }\n      };\n\n      document.addEventListener('visibilitychange', onVisibilityChange);\n\n      return () => {\n        if (this._intervalTimer) {\n          clearInterval(this._intervalTimer);\n        }\n\n        document.removeEventListener('visibilitychange', onVisibilityChange);\n        this._autoTimeRangeListener?.unsubscribe();\n      };\n    });\n  }\n\n  public onRefresh = () => {\n    const queryController = sceneGraph.getQueryController(this);\n    if (queryController?.state.isRunning) {\n      queryController.cancelAll();\n      return;\n    }\n\n    const timeRange = sceneGraph.getTimeRange(this);\n\n    if (this._intervalTimer) {\n      clearInterval(this._intervalTimer);\n    }\n\n    timeRange.onRefresh();\n    this.setupIntervalTimer();\n  };\n\n  public onIntervalChanged = (interval: string) => {\n    this.setState({ refresh: interval });\n    this.setupIntervalTimer();\n  };\n\n  public getUrlState() {\n    let refresh: string | undefined = this.state.refresh;\n\n    if (typeof refresh !== 'string' || refresh.length === 0) {\n      refresh = undefined;\n    }\n\n    return { refresh };\n  }\n\n  public updateFromUrl(values: SceneObjectUrlValues) {\n    const { intervals } = this.state;\n    let refresh = values.refresh;\n\n    if (typeof refresh === 'string' && isIntervalString(refresh)) {\n      if (intervals?.includes(refresh)) {\n        this.setState({ refresh });\n      } else {\n        this.setState({\n          // Default to the first refresh interval if the interval from the URL is not allowed, just like in the old architecture.\n          refresh: intervals ? intervals[0] : undefined,\n        });\n      }\n    }\n  }\n\n  private setupAutoTimeRangeListener = () => {\n    // If the time range has changed, we need to recalculate the auto interval but prevent unnecessary processing\n    return sceneGraph.getTimeRange(this).subscribeToState((newState, prevState) => {\n      if (newState.from !== prevState.from || newState.to !== prevState.to) {\n        this.setupIntervalTimer();\n      }\n    });\n  };\n\n  private calculateAutoRefreshInterval = () => {\n    const timeRange = sceneGraph.getTimeRange(this);\n    const resolution = window?.innerWidth ?? 2000;\n    return rangeUtil.calculateInterval(timeRange.state.value, resolution, this.state.autoMinInterval);\n  };\n\n  private isTabVisible() {\n    return document.visibilityState === undefined || document.visibilityState === 'visible';\n  }\n\n  private setupIntervalTimer = () => {\n    const timeRange = sceneGraph.getTimeRange(this);\n    const { refresh, intervals } = this.state;\n\n    if (this._intervalTimer || refresh === '') {\n      clearInterval(this._intervalTimer);\n    }\n\n    if (refresh === '') {\n      return;\n    }\n\n    // If the provided interval is not allowed\n    if (refresh !== RefreshPicker.autoOption.value && intervals && !intervals.includes(refresh)) {\n      return;\n    }\n\n    let intervalMs: number;\n\n    // Unsubscribe from previous listener no matter what\n    this._autoTimeRangeListener?.unsubscribe();\n\n    if (refresh === RefreshPicker.autoOption.value) {\n      const autoRefreshInterval = this.calculateAutoRefreshInterval();\n\n      intervalMs = autoRefreshInterval.intervalMs;\n\n      this._autoTimeRangeListener = this.setupAutoTimeRangeListener();\n\n      if (autoRefreshInterval.interval !== this.state.autoValue) {\n        this.setState({ autoValue: autoRefreshInterval.interval });\n      }\n    } else {\n      intervalMs = rangeUtil.intervalToMs(refresh);\n    }\n\n    this._intervalTimer = setInterval(() => {\n      if (this.isTabVisible()) {\n        timeRange.onRefresh();\n      } else {\n        this._autoRefreshBlocked = true;\n      }\n    }, intervalMs);\n  };\n}\n\nexport function SceneRefreshPickerRenderer({ model }: SceneComponentProps<SceneRefreshPicker>) {\n  const { refresh, intervals, autoEnabled, autoValue, isOnCanvas, primary, withText } = model.useState();\n  const isRunning = useQueryControllerState(model);\n\n  let text = refresh === RefreshPicker.autoOption?.value ? autoValue : withText ? 'Refresh' : undefined;\n  let tooltip: string | undefined;\n  let width: string | undefined;\n\n  if (isRunning) {\n    tooltip = 'Cancel all queries';\n\n    if (withText) {\n      text = 'Cancel';\n    }\n  }\n\n  if (withText) {\n    width = '96px';\n  }\n\n  return (\n    <RefreshPicker\n      showAutoInterval={autoEnabled}\n      value={refresh}\n      intervals={intervals}\n      tooltip={tooltip}\n      width={width}\n      text={text}\n      onRefresh={model.onRefresh}\n      primary={primary}\n      onIntervalChanged={model.onIntervalChanged}\n      isLoading={isRunning}\n      isOnCanvas={isOnCanvas ?? true}\n    />\n  );\n}\n\nfunction useQueryControllerState(model: SceneObject): boolean {\n  const queryController = sceneGraph.getQueryController(model);\n  if (!queryController) {\n    return false;\n  }\n\n  return queryController.useState().isRunning;\n}\n\nfunction isIntervalString(str: string): boolean {\n  try {\n    const res = rangeUtil.describeInterval(str);\n    return res.count > 0;\n  } catch {\n    return false;\n  }\n}\n"],"names":["_a"],"mappings":"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"}