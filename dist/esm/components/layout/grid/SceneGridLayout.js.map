{"version":3,"file":"SceneGridLayout.js","sources":["../../../../../src/components/layout/grid/SceneGridLayout.tsx"],"sourcesContent":["import ReactGridLayout from 'react-grid-layout';\n\nimport { SceneObjectBase } from '../../../core/SceneObjectBase';\nimport { SceneLayout, SceneObjectState } from '../../../core/types';\nimport { DEFAULT_PANEL_SPAN } from './constants';\nimport { isSceneGridRow } from './SceneGridItem';\nimport { SceneGridLayoutRenderer } from './SceneGridLayoutRenderer';\n\nimport { SceneGridRow } from './SceneGridRow';\nimport { SceneGridItemLike, SceneGridItemPlacement } from './types';\nimport { fitPanelsInHeight } from './utils';\n\ninterface SceneGridLayoutState extends SceneObjectState {\n  /**\n   * Turn on or off dragging for all items. Individual items can still disabled via isDraggable property\n   **/\n  isDraggable?: boolean;\n  /** Enable or disable item resizing */\n  isResizable?: boolean;\n  isLazy?: boolean;\n  /**\n   * Fit panels to height of the grid. This will scale down the panels vertically to fit available height.\n   * The row height is not changed, only the y position and height of the panels.\n   * UNSAFE: This feature is experimental and it might change in the future.\n   */\n  UNSAFE_fitPanels?: boolean;\n  children: SceneGridItemLike[];\n}\n\nexport class SceneGridLayout extends SceneObjectBase<SceneGridLayoutState> implements SceneLayout {\n  public static Component = SceneGridLayoutRenderer;\n\n  private _skipOnLayoutChange = false;\n  private _oldLayout: ReactGridLayout.Layout[] = [];\n  private _loadOldLayout = false;\n\n  public constructor(state: SceneGridLayoutState) {\n    super({\n      ...state,\n      children: sortChildrenByPosition(state.children),\n    });\n  }\n\n  /**\n   * SceneLayout interface. Used for example by VizPanelRenderer\n   */\n  public isDraggable(): boolean {\n    return this.state.isDraggable ?? false;\n  }\n\n  public getDragClass() {\n    return `grid-drag-handle-${this.state.key}`;\n  }\n\n  public getDragClassCancel() {\n    return `grid-drag-cancel`;\n  }\n\n  public toggleRow(row: SceneGridRow) {\n    const isCollapsed = row.state.isCollapsed;\n\n    if (!isCollapsed) {\n      row.setState({ isCollapsed: true });\n      // To force re-render\n      this.setState({});\n      return;\n    }\n\n    const rowChildren = row.state.children;\n\n    if (rowChildren.length === 0) {\n      row.setState({ isCollapsed: false });\n      this.setState({});\n      return;\n    }\n\n    // Ok we are expanding row. We need to update row children y pos (incase they are incorrect) and push items below down\n    // Code copied from DashboardModel toggleRow()\n\n    const rowY = row.state.y!;\n    const firstPanelYPos = rowChildren[0].state.y ?? rowY;\n    const yDiff = firstPanelYPos - (rowY + 1);\n\n    // y max will represent the bottom y pos after all panels have been added\n    // needed to know home much panels below should be pushed down\n    let yMax = rowY;\n\n    for (const panel of rowChildren) {\n      // set the y gridPos if it wasn't already set\n      const newSize = { ...panel.state };\n      newSize.y = newSize.y ?? rowY;\n      // make sure y is adjusted (in case row moved while collapsed)\n      newSize.y -= yDiff;\n\n      if (newSize.y! !== panel.state.y!) {\n        panel.setState(newSize);\n      }\n\n      // update insert post and y max\n      yMax = Math.max(yMax, Number(newSize.y!) + Number(newSize.height!));\n    }\n\n    const pushDownAmount = yMax - rowY - 1;\n\n    // push panels below down\n    for (const child of this.state.children) {\n      if (child.state.y! > rowY) {\n        this.pushChildDown(child, pushDownAmount);\n      }\n\n      if (isSceneGridRow(child) && child !== row) {\n        for (const rowChild of child.state.children) {\n          if (rowChild.state.y! > rowY) {\n            this.pushChildDown(rowChild, pushDownAmount);\n          }\n        }\n      }\n    }\n\n    row.setState({ isCollapsed: false });\n    // Trigger re-render\n    this.setState({});\n  }\n\n  public ignoreLayoutChange(shouldIgnore: boolean) {\n    this._skipOnLayoutChange = shouldIgnore;\n  }\n\n  public onLayoutChange = (layout: ReactGridLayout.Layout[]) => {\n    if (this._skipOnLayoutChange) {\n      // Layout has been updated by other RTL handler already\n      this._skipOnLayoutChange = false;\n      return;\n    }\n\n    // We replace with the old layout only if the current state is invalid\n    if (this._loadOldLayout) {\n      layout = [...this._oldLayout];\n      this._loadOldLayout = false;\n    }\n\n    for (const item of layout) {\n      const child = this.getSceneLayoutChild(item.i);\n\n      const nextSize: SceneGridItemPlacement = {\n        x: item.x,\n        y: item.y,\n        width: item.w,\n        height: item.h,\n      };\n\n      if (!isItemSizeEqual(child.state, nextSize)) {\n        child.setState({\n          ...nextSize,\n        });\n      }\n    }\n\n    this.setState({ children: sortChildrenByPosition(this.state.children) });\n  };\n\n  /**\n   * Will also scan row children and return child of the row\n   */\n  public getSceneLayoutChild(key: string): SceneGridItemLike {\n    for (const child of this.state.children) {\n      if (child.state.key === key) {\n        return child;\n      }\n\n      if (child instanceof SceneGridRow) {\n        for (const rowChild of child.state.children) {\n          if (rowChild.state.key === key) {\n            return rowChild;\n          }\n        }\n      }\n    }\n\n    throw new Error('Scene layout child not found for GridItem');\n  }\n\n  public onResizeStop: ReactGridLayout.ItemCallback = (_, o, n) => {\n    const child = this.getSceneLayoutChild(n.i);\n    child.setState({\n      width: n.w,\n      height: n.h,\n    });\n  };\n\n  private pushChildDown(child: SceneGridItemLike, amount: number) {\n    child.setState({\n      y: child.state.y! + amount,\n    });\n  }\n\n  /**\n   *  We assume the layout array is sorted according to y pos, and walk upwards until we find a row.\n   *  If it is collapsed there is no row to add it to. The default is then to return the SceneGridLayout itself\n   */\n  private findGridItemSceneParent(layout: ReactGridLayout.Layout[], startAt: number): SceneGridRow | SceneGridLayout {\n    for (let i = startAt; i >= 0; i--) {\n      const gridItem = layout[i];\n      const sceneChild = this.getSceneLayoutChild(gridItem.i);\n\n      if (sceneChild instanceof SceneGridRow) {\n        // the closest row is collapsed return null\n        if (sceneChild.state.isCollapsed) {\n          return this;\n        }\n\n        return sceneChild;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Helper func to check if we are dropping a row in between panels of another row\n   */\n  private isRowDropValid(\n    gridLayout: ReactGridLayout.Layout[],\n    updatedItem: ReactGridLayout.Layout,\n    indexOfUpdatedItem: number\n  ): boolean {\n    // if the row is dropped at the end of the dashboard grid layout, we accept this valid state\n    if (gridLayout[gridLayout.length - 1].i === updatedItem.i) {\n      return true;\n    }\n\n    // if the next child after the updated item is a scene grid row, then we are either at the top\n    // of the dashboard, or between rows\n    // if it's not a grid row, but it's parent is the layout, it means we are not in between a\n    // rows children, so also valid state\n    const nextSceneChild = this.getSceneLayoutChild(gridLayout[indexOfUpdatedItem + 1].i);\n    if (nextSceneChild instanceof SceneGridRow) {\n      return true;\n    } else if (nextSceneChild.parent instanceof SceneGridLayout) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * This likely needs a slightly different approach. Where we clone or deactivate or and re-activate the moved child\n   */\n  public moveChildTo(child: SceneGridItemLike, target: SceneGridLayout | SceneGridRow) {\n    const currentParent = child.parent!;\n    let rootChildren = this.state.children;\n\n    const newChild = child.clone({ key: child.state.key });\n\n    // Remove from current parent row\n    if (currentParent instanceof SceneGridRow) {\n      const newRow = currentParent.clone();\n      newRow.setState({\n        children: newRow.state.children.filter((c) => c.state.key !== child.state.key),\n      });\n\n      // new children with new row\n      rootChildren = rootChildren.map((c) => (c === currentParent ? newRow : c));\n\n      // if target is also a row\n      if (target instanceof SceneGridRow) {\n        const targetRow = target.clone();\n        targetRow.setState({ children: [...targetRow.state.children, newChild] });\n        rootChildren = rootChildren.map((c) => (c === target ? targetRow : c));\n      } else {\n        // target is the main grid\n        rootChildren = [...rootChildren, newChild];\n      }\n    } else {\n      if (!(target instanceof SceneGridLayout)) {\n        // current parent is the main grid remove it from there\n        rootChildren = rootChildren.filter((c) => c.state.key !== child.state.key);\n        // Clone the target row and add the child\n        const targetRow = target.clone();\n        targetRow.setState({ children: [...targetRow.state.children, newChild] });\n        // Replace row with new row\n        rootChildren = rootChildren.map((c) => (c === target ? targetRow : c));\n      }\n    }\n\n    return rootChildren;\n  }\n\n  public onDragStart: ReactGridLayout.ItemCallback = (gridLayout) => {\n    this._oldLayout = [...gridLayout];\n  };\n\n  public onDragStop: ReactGridLayout.ItemCallback = (gridLayout, o, updatedItem) => {\n    const sceneChild = this.getSceneLayoutChild(updatedItem.i)!;\n\n    // Need to resort the grid layout based on new position (needed to find the new parent)\n    gridLayout = sortGridLayout(gridLayout);\n\n    // Update children positions if they have changed\n    for (let i = 0; i < gridLayout.length; i++) {\n      const gridItem = gridLayout[i];\n      const child = this.getSceneLayoutChild(gridItem.i)!;\n      const childSize = child.state;\n\n      if (childSize?.x !== gridItem.x || childSize?.y !== gridItem.y) {\n        child.setState({\n          x: gridItem.x,\n          y: gridItem.y,\n        });\n      }\n    }\n\n    // Update the parent if the child if it has moved to a row or back to the grid\n    const indexOfUpdatedItem = gridLayout.findIndex((item) => item.i === updatedItem.i);\n    let newParent = this.findGridItemSceneParent(gridLayout, indexOfUpdatedItem - 1);\n    let newChildren = this.state.children;\n\n    // if the child is a row and we are moving it under an uncollapsed row, keep the scene grid layout as parent\n    // and set the old layout flag if the state is invalid. We allow setting the children in an invalid state,\n    // as the layout will be updated in onLayoutChange and avoid flickering\n    if (sceneChild instanceof SceneGridRow && newParent instanceof SceneGridRow) {\n      if (!this.isRowDropValid(gridLayout, updatedItem, indexOfUpdatedItem)) {\n        this._loadOldLayout = true;\n      }\n\n      newParent = this;\n    }\n\n    if (newParent !== sceneChild.parent) {\n      newChildren = this.moveChildTo(sceneChild, newParent);\n    }\n\n    this.setState({ children: sortChildrenByPosition(newChildren) });\n    this._skipOnLayoutChange = true;\n  };\n\n  private toGridCell(child: SceneGridItemLike): ReactGridLayout.Layout {\n    const size = child.state;\n\n    let x = size.x ?? 0;\n    let y = size.y ?? 0;\n    const w = Number.isInteger(Number(size.width)) ? Number(size.width) : DEFAULT_PANEL_SPAN;\n    const h = Number.isInteger(Number(size.height)) ? Number(size.height) : DEFAULT_PANEL_SPAN;\n\n    let isDraggable = child.state.isDraggable;\n    let isResizable = child.state.isResizable;\n\n    if (child instanceof SceneGridRow) {\n      isDraggable = child.state.isCollapsed ? true : false;\n      isResizable = false;\n    }\n\n    return { i: child.state.key!, x, y, h, w, isResizable, isDraggable };\n  }\n\n  public buildGridLayout(width: number, height: number): ReactGridLayout.Layout[] {\n    let cells: ReactGridLayout.Layout[] = [];\n\n    for (const child of this.state.children) {\n      cells.push(this.toGridCell(child));\n\n      if (child instanceof SceneGridRow && !child.state.isCollapsed) {\n        for (const rowChild of child.state.children) {\n          cells.push(this.toGridCell(rowChild));\n        }\n      }\n    }\n\n    // Sort by position\n    cells = sortGridLayout(cells);\n\n    if (this.state.UNSAFE_fitPanels) {\n      cells = fitPanelsInHeight(cells, height);\n    }\n\n    if (width < 768) {\n      // We should not persist the mobile layout\n      this._skipOnLayoutChange = true;\n      return cells.map((cell) => ({ ...cell, w: 24 }));\n    }\n\n    this._skipOnLayoutChange = false;\n\n    return cells;\n  }\n}\n\nfunction isItemSizeEqual(a: SceneGridItemPlacement, b: SceneGridItemPlacement) {\n  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;\n}\n\nfunction sortChildrenByPosition(children: SceneGridItemLike[]) {\n  children.forEach((child) => {\n    if (child instanceof SceneGridRow) {\n      child.setState({ children: sortChildrenByPosition(child.state.children) });\n    }\n  });\n\n  return [...children].sort((a, b) => {\n    return a.state.y! - b.state.y! || a.state.x! - b.state.x!;\n  });\n}\n\nfunction sortGridLayout(layout: ReactGridLayout.Layout[]) {\n  return [...layout].sort((a, b) => a.y - b.y || a.x! - b.x);\n}\n"],"names":[],"mappings":"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"}