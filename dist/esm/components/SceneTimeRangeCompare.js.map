{"version":3,"file":"SceneTimeRangeCompare.js","sources":["../../../src/components/SceneTimeRangeCompare.tsx"],"sourcesContent":["import { DataQueryRequest, DateTime, dateTime, FieldType, GrafanaTheme2, rangeUtil, TimeRange } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { ButtonGroup, ButtonSelect, Checkbox, ToolbarButton, useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { sceneGraph } from '../core/sceneGraph';\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneComponentProps, SceneDataQuery, SceneObjectState, SceneObjectUrlValues } from '../core/types';\nimport { DataQueryExtended } from '../querying/SceneQueryRunner';\nimport { ExtraQueryDescriptor, ExtraQueryDataProcessor, ExtraQueryProvider } from '../querying/ExtraQueryProvider';\nimport { SceneObjectUrlSyncConfig } from '../services/SceneObjectUrlSyncConfig';\nimport { getCompareSeriesRefId } from '../utils/getCompareSeriesRefId';\nimport { parseUrlParam } from '../utils/parseUrlParam';\nimport { css } from '@emotion/css';\nimport { of } from 'rxjs';\n\ninterface SceneTimeRangeCompareState extends SceneObjectState {\n  compareWith?: string;\n  compareOptions: Array<{ label: string; value: string }>;\n}\n\nconst PREVIOUS_PERIOD_VALUE = '__previousPeriod';\nconst NO_PERIOD_VALUE = '__noPeriod';\n\nexport const PREVIOUS_PERIOD_COMPARE_OPTION = {\n  label: 'Previous period',\n  value: PREVIOUS_PERIOD_VALUE,\n};\n\nexport const NO_COMPARE_OPTION = {\n  label: 'No comparison',\n  value: NO_PERIOD_VALUE,\n};\n\nexport const DEFAULT_COMPARE_OPTIONS = [\n  { label: 'Day before', value: '24h' },\n  { label: 'Week before', value: '1w' },\n  { label: 'Month before', value: '1M' },\n];\n\nexport class SceneTimeRangeCompare\n  extends SceneObjectBase<SceneTimeRangeCompareState>\n  implements ExtraQueryProvider<SceneTimeRangeCompareState>\n{\n  static Component = SceneTimeRangeCompareRenderer;\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['compareWith'] });\n\n  public constructor(state: Partial<SceneTimeRangeCompareState>) {\n    super({ compareOptions: DEFAULT_COMPARE_OPTIONS, ...state });\n    this.addActivationHandler(this._onActivate);\n  }\n\n  private _onActivate = () => {\n    const sceneTimeRange = sceneGraph.getTimeRange(this);\n    this.setState({ compareOptions: this.getCompareOptions(sceneTimeRange.state.value) });\n\n    this._subs.add(\n      sceneTimeRange.subscribeToState((timeRange) => {\n        const compareOptions = this.getCompareOptions(timeRange.value);\n        const stateUpdate: Partial<SceneTimeRangeCompareState> = { compareOptions };\n\n        // if current compareWith is not applicable to the new time range, set it to previous period comparison\n        if (Boolean(this.state.compareWith) && !compareOptions.find(({ value }) => value === this.state.compareWith)) {\n          stateUpdate.compareWith = PREVIOUS_PERIOD_VALUE;\n        }\n\n        this.setState(stateUpdate);\n      })\n    );\n  };\n\n  public getCompareOptions = (timeRange: TimeRange) => {\n    const diffDays = Math.ceil(timeRange.to.diff(timeRange.from));\n\n    const matchIndex = DEFAULT_COMPARE_OPTIONS.findIndex(({ value }) => {\n      const intervalInMs = rangeUtil.intervalToMs(value);\n      return intervalInMs >= diffDays;\n    });\n\n    return [\n      NO_COMPARE_OPTION,\n      PREVIOUS_PERIOD_COMPARE_OPTION,\n      ...DEFAULT_COMPARE_OPTIONS.slice(matchIndex).map(({ label, value }) => ({ label, value })),\n    ];\n  };\n\n  public onCompareWithChanged = (compareWith: string) => {\n    if (compareWith === NO_PERIOD_VALUE) {\n      this.onClearCompare();\n    } else {\n      this.setState({ compareWith });\n    }\n  };\n\n  public onClearCompare = () => {\n    this.setState({ compareWith: undefined });\n  };\n\n  // Get a time shifted request to compare with the primary request.\n  public getExtraQueries(request: DataQueryRequest): ExtraQueryDescriptor[] {\n    const extraQueries: ExtraQueryDescriptor[] = [];\n    const compareRange = this.getCompareTimeRange(request.range);\n    if (!compareRange) {\n      return extraQueries;\n    }\n\n    const targets = request.targets.filter((query: DataQueryExtended) => query.timeRangeCompare !== false);\n    if (targets.length) {\n      extraQueries.push({\n        req: {\n          ...request,\n          targets,\n          range: compareRange,\n        },\n        processor: timeShiftAlignmentProcessor,\n      });\n    }\n    return extraQueries;\n  }\n\n  // The query runner should rerun the comparison query if the compareWith value has changed and there are queries that haven't opted out of TWC\n  public shouldRerun(\n    prev: SceneTimeRangeCompareState,\n    next: SceneTimeRangeCompareState,\n    queries: SceneDataQuery[]\n  ): boolean {\n    return (\n      prev.compareWith !== next.compareWith && queries.find((query) => query.timeRangeCompare !== false) !== undefined\n    );\n  }\n\n  public getCompareTimeRange(timeRange: TimeRange): TimeRange | undefined {\n    let compareFrom: DateTime;\n    let compareTo: DateTime;\n\n    if (this.state.compareWith) {\n      if (this.state.compareWith === PREVIOUS_PERIOD_VALUE) {\n        const diffMs = timeRange.to.diff(timeRange.from);\n        compareFrom = dateTime(timeRange.from!).subtract(diffMs);\n        compareTo = dateTime(timeRange.to!).subtract(diffMs);\n      } else {\n        compareFrom = dateTime(timeRange.from!).subtract(rangeUtil.intervalToMs(this.state.compareWith));\n        compareTo = dateTime(timeRange.to!).subtract(rangeUtil.intervalToMs(this.state.compareWith));\n      }\n      return {\n        from: compareFrom,\n        to: compareTo,\n        raw: {\n          from: compareFrom,\n          to: compareTo,\n        },\n      };\n    }\n\n    return undefined;\n  }\n\n  public getUrlState(): SceneObjectUrlValues {\n    return {\n      compareWith: this.state.compareWith,\n    };\n  }\n\n  public updateFromUrl(values: SceneObjectUrlValues) {\n    if (!values.compareWith) {\n      return;\n    }\n\n    const compareWith = parseUrlParam(values.compareWith);\n\n    if (compareWith) {\n      const compareOptions = this.getCompareOptions(sceneGraph.getTimeRange(this).state.value);\n\n      if (compareOptions.find(({ value }) => value === compareWith)) {\n        this.setState({\n          compareWith,\n        });\n      } else {\n        this.setState({\n          compareWith: '__previousPeriod',\n        });\n      }\n    }\n  }\n}\n\n// Processor function for use with time shifted comparison series.\n// This aligns the secondary series with the primary and adds custom\n// metadata and config to the secondary series' fields so that it is\n// rendered appropriately.\nconst timeShiftAlignmentProcessor: ExtraQueryDataProcessor = (primary, secondary) => {\n  const diff = secondary.timeRange.from.diff(primary.timeRange.from);\n  secondary.series.forEach((series) => {\n    series.refId = getCompareSeriesRefId(series.refId || '');\n    series.meta = {\n      ...series.meta,\n      // @ts-ignore Remove when https://github.com/grafana/grafana/pull/71129 is released\n      timeCompare: {\n        diffMs: diff,\n        isTimeShiftQuery: true,\n      },\n    };\n    series.fields.forEach((field) => {\n      // Align compare series time stamps with reference series\n      if (field.type === FieldType.time) {\n        field.values = field.values.map((v) => {\n          return diff < 0 ? v - diff : v + diff;\n        });\n      }\n\n      field.config = {\n        ...field.config,\n        color: {\n          mode: 'fixed',\n          fixedColor: config.theme.palette.gray60,\n        },\n      };\n      return field;\n    });\n  });\n  return of(secondary);\n};\n\nfunction SceneTimeRangeCompareRenderer({ model }: SceneComponentProps<SceneTimeRangeCompare>) {\n  const styles = useStyles2(getStyles);\n  const { compareWith, compareOptions } = model.useState();\n\n  const [previousCompare, setPreviousCompare] = React.useState(compareWith);\n  const previousValue = compareOptions.find(({ value }) => value === previousCompare) ?? PREVIOUS_PERIOD_COMPARE_OPTION;\n\n  const value = compareOptions.find(({ value }) => value === compareWith);\n  const enabled = Boolean(value);\n\n  const onClick = () => {\n    if (enabled) {\n      setPreviousCompare(compareWith);\n      model.onClearCompare();\n    } else if (!enabled) {\n      model.onCompareWithChanged(previousValue.value);\n    }\n  };\n\n  return (\n    <ButtonGroup>\n      <ToolbarButton\n        variant=\"canvas\"\n        tooltip=\"Enable time frame comparison\"\n        onClick={(e) => {\n          e.stopPropagation();\n          e.preventDefault();\n          onClick();\n        }}\n      >\n        <Checkbox label=\" \" value={enabled} onClick={onClick} />\n        Comparison\n      </ToolbarButton>\n\n      {enabled ? (\n        <ButtonSelect\n          variant=\"canvas\"\n          value={value}\n          options={compareOptions}\n          onChange={(v) => {\n            model.onCompareWithChanged(v.value!);\n          }}\n        />\n      ) : (\n        <ToolbarButton className={styles.previewButton} disabled variant=\"canvas\" isOpen={false}>\n          {previousValue.label}\n        </ToolbarButton>\n      )}\n    </ButtonGroup>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    previewButton: css({\n      '&:disabled': {\n        border: `1px solid ${theme.colors.secondary.border}`,\n        color: theme.colors.text.disabled,\n        opacity: 1,\n      },\n    }),\n  };\n}\n"],"names":["value"],"mappings":"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"}