{"version":3,"file":"SceneDataNode.js","sources":["../../../src/core/SceneDataNode.ts"],"sourcesContent":["import { getDefaultTimeRange, PanelData } from '@grafana/data';\nimport { LoadingState } from '@grafana/schema';\nimport { of } from 'rxjs';\n\nimport { SceneObjectBase } from './SceneObjectBase';\nimport { SceneDataProvider, SceneDataProviderResult, SceneDataState } from './types';\n\nexport interface SceneDataNodeState extends SceneDataState {\n  data: PanelData;\n}\n\nexport class SceneDataNode extends SceneObjectBase<SceneDataNodeState> implements SceneDataProvider {\n  public constructor(state?: Partial<SceneDataNodeState>) {\n    super({\n      data: emptyPanelData,\n      ...state,\n    });\n  }\n\n  public getResultsStream() {\n    const result: SceneDataProviderResult = {\n      origin: this,\n      data: this.state.data,\n    };\n\n    return of(result);\n  }\n}\n\nexport const emptyPanelData: PanelData = {\n  state: LoadingState.Done,\n  series: [],\n  timeRange: getDefaultTimeRange(),\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAWO,MAAM,sBAAsB,eAAiE,CAAA;AAAA,EAC3F,YAAY,KAAqC,EAAA;AACtD,IAAM,KAAA,CAAA,cAAA,CAAA;AAAA,MACJ,IAAM,EAAA,cAAA;AAAA,KAAA,EACH,KACJ,CAAA,CAAA,CAAA;AAAA,GACH;AAAA,EAEO,gBAAmB,GAAA;AACxB,IAAA,MAAM,MAAkC,GAAA;AAAA,MACtC,MAAQ,EAAA,IAAA;AAAA,MACR,IAAA,EAAM,KAAK,KAAM,CAAA,IAAA;AAAA,KACnB,CAAA;AAEA,IAAA,OAAO,GAAG,MAAM,CAAA,CAAA;AAAA,GAClB;AACF,CAAA;AAEO,MAAM,cAA4B,GAAA;AAAA,EACvC,OAAO,YAAa,CAAA,IAAA;AAAA,EACpB,QAAQ,EAAC;AAAA,EACT,WAAW,mBAAoB,EAAA;AACjC;;;;"}