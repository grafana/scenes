{"version":3,"file":"FieldConfigBuilder.js","sources":["../../../../src/core/PanelBuilders/FieldConfigBuilder.ts"],"sourcesContent":["import { FieldConfigSource } from '@grafana/data';\nimport { cloneDeep, merge } from 'lodash';\nimport { DeepPartial } from '../types';\nimport { FieldConfigOverridesBuilder } from './FieldConfigOverridesBuilder';\nimport { StandardFieldConfig, StandardFieldConfigInterface } from './types';\n\nexport class FieldConfigBuilder<TFieldConfig extends {}>\n  implements StandardFieldConfigInterface<StandardFieldConfig, FieldConfigBuilder<TFieldConfig>, 'set'>\n{\n  private _fieldConfig: FieldConfigSource<DeepPartial<TFieldConfig>> = {\n    defaults: {},\n    overrides: [],\n  };\n  private _overridesBuilder = new FieldConfigOverridesBuilder<TFieldConfig>();\n\n  public constructor(private defaultFieldConfig?: () => TFieldConfig) {\n    this.setDefaults();\n  }\n\n  private setDefaults() {\n    const fieldConfig: FieldConfigSource<TFieldConfig> = {\n      defaults: {\n        custom: this.defaultFieldConfig ? cloneDeep(this.defaultFieldConfig()) : ({} as TFieldConfig),\n      }, // use field config factory that will provide default field config\n      overrides: [],\n    };\n\n    this._fieldConfig = fieldConfig;\n  }\n  /**\n   * Set color.\n   */\n  public setColor(color: StandardFieldConfig['color']): this {\n    return this.setFieldConfigDefaults('color', color);\n  }\n\n  /**\n   * Set number of decimals to show.\n   */\n  public setDecimals(decimals: StandardFieldConfig['decimals']): this {\n    return this.setFieldConfigDefaults('decimals', decimals);\n  }\n\n  /**\n   * Set field display name.\n   */\n  public setDisplayName(displayName: StandardFieldConfig['displayName']): this {\n    return this.setFieldConfigDefaults('displayName', displayName);\n  }\n\n  /**\n   * Set the standard field config property filterable.\n   */\n  public setFilterable(filterable: StandardFieldConfig['filterable']): this {\n    return this.setFieldConfigDefaults('filterable', filterable);\n  }\n\n  /**\n   * Set data links.\n   */\n  public setLinks(links: StandardFieldConfig['links']): this {\n    return this.setFieldConfigDefaults('links', links);\n  }\n\n  /**\n   * Set value mappings.\n   */\n  public setMappings(mappings: StandardFieldConfig['mappings']): this {\n    return this.setFieldConfigDefaults('mappings', mappings);\n  }\n\n  /**\n   * Set the standard field config property max.\n   */\n  public setMax(max: StandardFieldConfig['max']): this {\n    return this.setFieldConfigDefaults('max', max);\n  }\n\n  /**\n   * Set the standard field config property min.\n   */\n  public setMin(min: StandardFieldConfig['min']): this {\n    return this.setFieldConfigDefaults('min', min);\n  }\n\n  /**\n   * Set the standard field config property noValue.\n   */\n  public setNoValue(noValue: StandardFieldConfig['noValue']): this {\n    return this.setFieldConfigDefaults('noValue', noValue);\n  }\n\n  /**\n   * Set the standard field config property thresholds.\n   */\n  public setThresholds(thresholds: StandardFieldConfig['thresholds']): this {\n    return this.setFieldConfigDefaults('thresholds', thresholds);\n  }\n\n  /**\n   * Set the standard field config property unit.\n   */\n  public setUnit(unit: StandardFieldConfig['unit']): this {\n    return this.setFieldConfigDefaults('unit', unit);\n  }\n\n  /**\n   * Set an individual custom field config value. This will merge the value with the existing custom field config.\n   */\n  public setCustomFieldConfig<T extends TFieldConfig, K extends keyof T>(id: K, value: DeepPartial<T[K]>): this {\n    this._fieldConfig.defaults = {\n      ...this._fieldConfig.defaults,\n      custom: merge(this._fieldConfig.defaults.custom, { [id]: value }),\n    };\n\n    return this;\n  }\n\n  /**\n   * Configure overrides for the field config. This will merge the overrides with the existing overrides.\n   */\n  public setOverrides(builder: (b: FieldConfigOverridesBuilder<TFieldConfig>) => void): this {\n    builder(this._overridesBuilder);\n    return this;\n  }\n\n  public setFieldConfigDefaults<T extends keyof StandardFieldConfig>(key: T, value: StandardFieldConfig[T]) {\n    this._fieldConfig.defaults = {\n      ...this._fieldConfig.defaults,\n      [key]: value,\n    };\n    return this;\n  }\n\n  public build() {\n    return {\n      defaults: this._fieldConfig.defaults,\n      overrides: this._overridesBuilder.build(),\n    };\n  }\n}\n"],"names":[],"mappings":"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"}