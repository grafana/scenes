{"version":3,"file":"PanelOptionsBuilder.js","sources":["../../../../src/core/PanelBuilders/PanelOptionsBuilder.ts"],"sourcesContent":["import { cloneDeep, merge } from 'lodash';\nimport { DeepPartial } from '../types';\n\nexport class PanelOptionsBuilder<TOptions extends {} = {}> {\n  private _options: DeepPartial<TOptions> = {};\n\n  public constructor(private defaultOptions?: () => Partial<TOptions>) {\n    this.setDefaults();\n  }\n\n  private setDefaults() {\n    this._options = this.defaultOptions ? cloneDeep(this.defaultOptions()) : ({} as TOptions);\n  }\n\n  /**\n   * Set an individual panel option. This will merge the value with the existing options.\n   */\n  public setOption<T extends TOptions, K extends keyof T>(id: K, value: DeepPartial<T[K]>): this {\n    this._options = merge(this._options, { [id]: value });\n    return this;\n  }\n\n  public build() {\n    return this._options;\n  }\n}\n"],"names":[],"mappings":";;AAGO,MAAM,mBAA8C,CAAA;AAAA,EAGlD,YAAoB,cAA0C,EAAA;AAA1C,IAAA,IAAA,CAAA,cAAA,GAAA,cAAA,CAAA;AAF3B,IAAA,IAAA,CAAQ,WAAkC,EAAC,CAAA;AAGzC,IAAA,IAAA,CAAK,WAAY,EAAA,CAAA;AAAA,GACnB;AAAA,EAEQ,WAAc,GAAA;AACpB,IAAK,IAAA,CAAA,QAAA,GAAW,KAAK,cAAiB,GAAA,SAAA,CAAU,KAAK,cAAe,EAAC,IAAK,EAAC,CAAA;AAAA,GAC7E;AAAA,EAKO,SAAA,CAAiD,IAAO,KAAgC,EAAA;AAC7F,IAAK,IAAA,CAAA,QAAA,GAAW,MAAM,IAAK,CAAA,QAAA,EAAU,EAAE,CAAC,EAAA,GAAK,OAAO,CAAA,CAAA;AACpD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAEO,KAAQ,GAAA;AACb,IAAA,OAAO,IAAK,CAAA,QAAA,CAAA;AAAA,GACd;AACF;;;;"}