{"version":3,"file":"SceneQueryController.js","sources":["../../../src/behaviors/SceneQueryController.ts"],"sourcesContent":["import { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneObject, SceneObjectState, SceneStatelessBehavior } from '../core/types';\nimport { DataQueryRequest } from '@grafana/data';\nimport { LoadingState } from '@grafana/schema';\n\nexport interface SceneQueryStateControllerState extends SceneObjectState {\n  isRunning: boolean;\n}\n\nexport interface SceneQueryControllerLike extends SceneObject<SceneQueryStateControllerState> {\n  isQueryController: true;\n  cancelAll(): void;\n\n  queryStarted(entry: SceneQueryControllerEntry): void;\n  queryCompleted(entry: SceneQueryControllerEntry): void;\n}\n\nexport function isQueryController(s: SceneObject | SceneStatelessBehavior): s is SceneQueryControllerLike {\n  return 'isQueryController' in s;\n}\n\nexport interface QueryResultWithState {\n  state: LoadingState;\n}\n\nexport interface SceneQueryControllerEntry {\n  request?: DataQueryRequest;\n  type: SceneQueryControllerEntryType;\n  origin: SceneObject;\n  cancel?: () => void;\n}\n\nexport type SceneQueryControllerEntryType = 'data' | 'annotations' | 'variable' | 'alerts';\n\nexport class SceneQueryController\n  extends SceneObjectBase<SceneQueryStateControllerState>\n  implements SceneQueryControllerLike\n{\n  public isQueryController: true = true;\n\n  #running = new Set<SceneQueryControllerEntry>();\n\n  public constructor() {\n    super({ isRunning: false });\n\n    // Clear running state on deactivate\n    this.addActivationHandler(() => {\n      return () => this.#running.clear();\n    });\n  }\n\n  public queryStarted(entry: SceneQueryControllerEntry) {\n    this.#running.add(entry);\n\n    this.changeRunningQueryCount(1);\n\n    if (!this.state.isRunning) {\n      this.setState({ isRunning: true });\n    }\n  }\n\n  public queryCompleted(entry: SceneQueryControllerEntry) {\n    if (!this.#running.has(entry)) {\n      return;\n    }\n\n    this.#running.delete(entry);\n\n    this.changeRunningQueryCount(-1);\n\n    if (this.#running.size === 0) {\n      this.setState({ isRunning: false });\n    }\n  }\n\n  private changeRunningQueryCount(dir: 1 | -1) {\n    /**\n     * Used by grafana-image-renderer to know when all queries are completed.\n     */\n    (window as any).__grafanaRunningQueryCount = ((window as any).__grafanaRunningQueryCount ?? 0) + dir;\n  }\n\n  public cancelAll() {\n    for (const entry of this.#running.values()) {\n      entry.cancel?.();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,QAAA,CAAA;AAiBO,SAAS,kBAAkB,CAAwE,EAAA;AACxG,EAAA,OAAO,mBAAuB,IAAA,CAAA,CAAA;AAChC,CAAA;AAeO,MAAM,6BACH,eAEV,CAAA;AAAA,EAKS,WAAc,GAAA;AACnB,IAAM,KAAA,CAAA,EAAE,SAAW,EAAA,KAAA,EAAO,CAAA,CAAA;AAL5B,IAAA,IAAA,CAAO,iBAA0B,GAAA,IAAA,CAAA;AAEjC,IAAA,YAAA,CAAA,IAAA,EAAA,QAAA,sBAAe,GAA+B,EAAA,CAAA,CAAA;AAM5C,IAAA,IAAA,CAAK,qBAAqB,MAAM;AAC9B,MAAO,OAAA,MAAM,YAAK,CAAA,IAAA,EAAA,QAAA,CAAA,CAAS,KAAM,EAAA,CAAA;AAAA,KAClC,CAAA,CAAA;AAAA,GACH;AAAA,EAEO,aAAa,KAAkC,EAAA;AACpD,IAAK,YAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAS,IAAI,KAAK,CAAA,CAAA;AAEvB,IAAA,IAAA,CAAK,wBAAwB,CAAC,CAAA,CAAA;AAE9B,IAAI,IAAA,CAAC,IAAK,CAAA,KAAA,CAAM,SAAW,EAAA;AACzB,MAAA,IAAA,CAAK,QAAS,CAAA,EAAE,SAAW,EAAA,IAAA,EAAM,CAAA,CAAA;AAAA,KACnC;AAAA,GACF;AAAA,EAEO,eAAe,KAAkC,EAAA;AACtD,IAAA,IAAI,CAAC,YAAA,CAAA,IAAA,EAAK,QAAS,CAAA,CAAA,GAAA,CAAI,KAAK,CAAG,EAAA;AAC7B,MAAA,OAAA;AAAA,KACF;AAEA,IAAK,YAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAS,OAAO,KAAK,CAAA,CAAA;AAE1B,IAAA,IAAA,CAAK,wBAAwB,CAAE,CAAA,CAAA,CAAA;AAE/B,IAAI,IAAA,YAAA,CAAA,IAAA,EAAK,QAAS,CAAA,CAAA,IAAA,KAAS,CAAG,EAAA;AAC5B,MAAA,IAAA,CAAK,QAAS,CAAA,EAAE,SAAW,EAAA,KAAA,EAAO,CAAA,CAAA;AAAA,KACpC;AAAA,GACF;AAAA,EAEQ,wBAAwB,GAAa,EAAA;AA3E/C,IAAA,IAAA,EAAA,CAAA;AA+EI,IAAC,MAAe,CAAA,0BAAA,GAAA,CAAA,CAA+B,EAAe,GAAA,MAAA,CAAA,0BAAA,KAAf,YAA6C,CAAK,IAAA,GAAA,CAAA;AAAA,GACnG;AAAA,EAEO,SAAY,GAAA;AAlFrB,IAAA,IAAA,EAAA,CAAA;AAmFI,IAAA,KAAA,MAAW,KAAS,IAAA,YAAA,CAAA,IAAA,EAAK,QAAS,CAAA,CAAA,MAAA,EAAU,EAAA;AAC1C,MAAA,CAAA,EAAA,GAAA,KAAA,CAAM,MAAN,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;AAAA,KACF;AAAA,GACF;AACF,CAAA;AA/CE,QAAA,GAAA,IAAA,OAAA,EAAA;;;;"}