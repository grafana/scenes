{"version":3,"file":"evaluateTimeRange.js","sources":["../../../src/utils/evaluateTimeRange.ts"],"sourcesContent":["import { dateMath, DateTime, DateTimeInput, setWeekStart, TimeRange } from '@grafana/data';\nimport { TimeZone } from '@grafana/schema';\n\nexport function evaluateTimeRange(\n  from: string | DateTime,\n  to: string | DateTime,\n  timeZone: TimeZone,\n  fiscalYearStartMonth: number | undefined,\n  delay: string | undefined,\n  weekStart: string | undefined\n): TimeRange {\n  const hasDelay = delay && to === 'now';\n  const now = Date.now();\n\n  if (weekStart) {\n    setWeekStartIfDifferent(weekStart);\n  }\n\n  /** This tries to use dateMath.toDateTime if available, otherwise falls back to dateMath.parse.\n   * Using dateMath.parse can potentially result in to and from being calculated using two different timestamps.\n   * If two different timestamps are used, the time range \"now-24h to now\" will potentially be 24h +- number of milliseconds it takes between calculations.\n   */\n  const parseOrToDateTime = (\n    val: string | DateTime,\n    options: { roundUp: boolean; timezone: TimeZone; fiscalYearStartMonth?: number; now?: DateTimeInput }\n  ) => {\n    // @ts-ignore\n    if (dateMath.toDateTime) {\n      // @ts-ignore\n      return dateMath.toDateTime(val, options);\n    } else {\n      return dateMath.parse(val, options.roundUp, options.timezone, options.fiscalYearStartMonth);\n    }\n  };\n\n  /** The order of calculating to and from is important. This is because if we're using the old dateMath.parse we could potentially get two different timestamps.\n   * If we calculate to first, then from. The timerange \"now-24h to now\" will err on the side of being shorter than 24h. This will aleviate some of the issues arising\n   * from the timerange indeterminently alternating between less than or equal to 24h and being greater than 24h.\n   */\n  return {\n    to: parseOrToDateTime(hasDelay ? 'now-' + delay : to, {\n      roundUp: true,\n      timezone: timeZone,\n      fiscalYearStartMonth: fiscalYearStartMonth,\n      now: now,\n    })!,\n    from: parseOrToDateTime(from, {\n      roundUp: false,\n      timezone: timeZone,\n      fiscalYearStartMonth: fiscalYearStartMonth,\n      now: now,\n    })!,\n    raw: {\n      from: from,\n      to: to,\n    },\n  };\n}\n\nlet prevWeekStart: string | undefined;\n\nfunction setWeekStartIfDifferent(weekStart: string) {\n  if (weekStart !== prevWeekStart) {\n    prevWeekStart = weekStart;\n    setWeekStart(weekStart);\n  }\n}\n"],"names":[],"mappings":";;AAGO,SAAS,kBACd,IACA,EAAA,EAAA,EACA,QACA,EAAA,oBAAA,EACA,OACA,SACW,EAAA;AACX,EAAM,MAAA,QAAA,GAAW,SAAS,EAAO,KAAA,KAAA,CAAA;AACjC,EAAM,MAAA,GAAA,GAAM,KAAK,GAAI,EAAA,CAAA;AAErB,EAAA,IAAI,SAAW,EAAA;AACb,IAAA,uBAAA,CAAwB,SAAS,CAAA,CAAA;AAAA,GACnC;AAMA,EAAM,MAAA,iBAAA,GAAoB,CACxB,GAAA,EACA,OACG,KAAA;AAEH,IAAA,IAAI,SAAS,UAAY,EAAA;AAEvB,MAAO,OAAA,QAAA,CAAS,UAAW,CAAA,GAAA,EAAK,OAAO,CAAA,CAAA;AAAA,KAClC,MAAA;AACL,MAAO,OAAA,QAAA,CAAS,MAAM,GAAK,EAAA,OAAA,CAAQ,SAAS,OAAQ,CAAA,QAAA,EAAU,QAAQ,oBAAoB,CAAA,CAAA;AAAA,KAC5F;AAAA,GACF,CAAA;AAMA,EAAO,OAAA;AAAA,IACL,EAAI,EAAA,iBAAA,CAAkB,QAAW,GAAA,MAAA,GAAS,QAAQ,EAAI,EAAA;AAAA,MACpD,OAAS,EAAA,IAAA;AAAA,MACT,QAAU,EAAA,QAAA;AAAA,MACV,oBAAA;AAAA,MACA,GAAA;AAAA,KACD,CAAA;AAAA,IACD,IAAA,EAAM,kBAAkB,IAAM,EAAA;AAAA,MAC5B,OAAS,EAAA,KAAA;AAAA,MACT,QAAU,EAAA,QAAA;AAAA,MACV,oBAAA;AAAA,MACA,GAAA;AAAA,KACD,CAAA;AAAA,IACD,GAAK,EAAA;AAAA,MACH,IAAA;AAAA,MACA,EAAA;AAAA,KACF;AAAA,GACF,CAAA;AACF,CAAA;AAEA,IAAI,aAAA,CAAA;AAEJ,SAAS,wBAAwB,SAAmB,EAAA;AAClD,EAAA,IAAI,cAAc,aAAe,EAAA;AAC/B,IAAgB,aAAA,GAAA,SAAA,CAAA;AAChB,IAAA,YAAA,CAAa,SAAS,CAAA,CAAA;AAAA,GACxB;AACF;;;;"}