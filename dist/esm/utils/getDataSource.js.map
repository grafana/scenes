{"version":3,"file":"getDataSource.js","sources":["../../../src/utils/getDataSource.ts"],"sourcesContent":["import { DataSourceApi, ScopedVars } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { DataSourceRef } from '@grafana/schema';\nimport { runtimeDataSources } from '../querying/RuntimeDataSource';\n\nexport async function getDataSource(\n  datasource: DataSourceRef | undefined | null,\n  scopedVars: ScopedVars\n): Promise<DataSourceApi> {\n  if (datasource?.uid) {\n    const runtimeDataSource = runtimeDataSources.get(datasource.uid);\n    if (runtimeDataSource) {\n      return runtimeDataSource;\n    }\n  }\n\n  if (datasource && (datasource as any).query) {\n    return datasource as DataSourceApi;\n  }\n\n  return await getDataSourceSrv().get(datasource as string, scopedVars);\n}\n"],"names":[],"mappings":";;;AAKsB,eAAA,aAAA,CACpB,YACA,UACwB,EAAA;AACxB,EAAA,IAAI,yCAAY,GAAK,EAAA;AACnB,IAAA,MAAM,iBAAoB,GAAA,kBAAA,CAAmB,GAAI,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAC/D,IAAA,IAAI,iBAAmB,EAAA;AACrB,MAAO,OAAA,iBAAA,CAAA;AAAA,KACT;AAAA,GACF;AAEA,EAAI,IAAA,UAAA,IAAe,WAAmB,KAAO,EAAA;AAC3C,IAAO,OAAA,UAAA,CAAA;AAAA,GACT;AAEA,EAAA,OAAO,MAAM,gBAAA,EAAmB,CAAA,GAAA,CAAI,YAAsB,UAAU,CAAA,CAAA;AACtE;;;;"}