{"version":3,"file":"AdHocFiltersCombobox.js","sources":["../../../../../src/variables/adhoc/AdHocFiltersCombobox/AdHocFiltersCombobox.tsx"],"sourcesContent":["import React, {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useId,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { FloatingFocusManager, FloatingPortal, UseFloatingOptions } from '@floating-ui/react';\nimport { Spinner, Text, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { AdHocFilterWithLabels, AdHocFiltersVariable, isMultiValueOperator } from '../AdHocFiltersVariable';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport {\n  DropdownItem,\n  LoadingOptionsPlaceholder,\n  MultiValueApplyButton,\n  NoOptionsPlaceholder,\n  OptionsErrorPlaceholder,\n} from './DropdownItem';\nimport {\n  ERROR_STATE_DROPDOWN_WIDTH,\n  flattenOptionGroups,\n  fuzzySearchOptions,\n  generateFilterUpdatePayload,\n  generatePlaceholder,\n  populateInputValueOnInputTypeSwitch,\n  setupDropdownAccessibility,\n  switchInputType,\n  switchToNextInputType,\n  VIRTUAL_LIST_ITEM_HEIGHT,\n  VIRTUAL_LIST_ITEM_HEIGHT_WITH_DESCRIPTION,\n  VIRTUAL_LIST_OVERSCAN,\n} from './utils';\nimport { handleOptionGroups } from '../../utils';\nimport { useFloatingInteractions, MAX_MENU_HEIGHT } from './useFloatingInteractions';\nimport { MultiValuePill } from './MultiValuePill';\n\ninterface AdHocComboboxProps {\n  filter?: AdHocFilterWithLabels;\n  isAlwaysWip?: boolean;\n  model: AdHocFiltersVariable;\n  handleChangeViewMode?: (event?: React.MouseEvent, shouldFocusOnPillWrapperOverride?: boolean) => void;\n  focusOnWipInputRef?: () => void;\n  populateInputOnEdit?: boolean;\n}\n\nexport type AdHocInputType = 'key' | 'operator' | 'value';\n\nexport const AdHocCombobox = forwardRef(function AdHocCombobox(\n  { filter, model, isAlwaysWip, handleChangeViewMode, focusOnWipInputRef, populateInputOnEdit }: AdHocComboboxProps,\n  parentRef\n) {\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState<Array<SelectableValue<string>>>([]);\n  const [optionsLoading, setOptionsLoading] = useState<boolean>(false);\n  const [optionsError, setOptionsError] = useState<boolean>(false);\n  const [inputValue, setInputValue] = useState('');\n  const [activeIndex, setActiveIndex] = useState<number | null>(null);\n  const [filterInputType, setInputType] = useState<AdHocInputType>(!isAlwaysWip ? 'value' : 'key');\n  const [preventFiltering, setPreventFiltering] = useState<boolean>(!isAlwaysWip && filterInputType === 'value');\n  const styles = useStyles2(getStyles);\n  // control multi values with local state in order to commit all values at once and avoid _wip reset mid creation\n  const [filterMultiValues, setFilterMultiValues] = useState<Array<SelectableValue<string>>>([]);\n  const [_, setForceRefresh] = useState({});\n  const allowCustomValue = model.state.allowCustomValue ?? true;\n\n  const multiValuePillWrapperRef = useRef<HTMLDivElement>(null);\n\n  const hasMultiValueOperator = isMultiValueOperator(filter?.operator || '');\n  const isMultiValueEdit = hasMultiValueOperator && filterInputType === 'value';\n\n  // used to identify operator element and prevent dismiss because it registers as outside click\n  const operatorIdentifier = useId();\n\n  const listRef = useRef<Array<HTMLElement | null>>([]);\n  const disabledIndicesRef = useRef<number[]>([]);\n  const filterInputTypeRef = useRef<AdHocInputType>(!isAlwaysWip ? 'value' : 'key');\n\n  const optionsSearcher = useMemo(() => fuzzySearchOptions(options), [options]);\n\n  const isLastFilter = useMemo(() => {\n    if (isAlwaysWip) {\n      return false;\n    }\n\n    if (model.state.filters.at(-1) === filter) {\n      return true;\n    }\n    return false;\n  }, [filter, isAlwaysWip, model.state.filters]);\n\n  // reset wip filter. Used when navigating away with incomplete wip filer or when selecting wip filter value\n  const handleResetWip = useCallback(() => {\n    if (isAlwaysWip) {\n      model._addWip();\n      setInputType('key');\n      setInputValue('');\n    }\n  }, [model, isAlwaysWip]);\n\n  const handleMultiValueFilterCommit = useCallback(\n    (\n      model: AdHocFiltersVariable,\n      filter: AdHocFilterWithLabels,\n      filterMultiValues: Array<SelectableValue<string>>,\n      preventFocus?: boolean\n    ) => {\n      if (filterMultiValues.length) {\n        const valueLabels: string[] = [];\n        const values: string[] = [];\n        filterMultiValues.forEach((item) => {\n          valueLabels.push(item.label ?? item.value!);\n          values.push(item.value!);\n        });\n        model._updateFilter(filter!, { valueLabels, values, value: values[0] });\n        setFilterMultiValues([]);\n      }\n      if (!preventFocus) {\n        setTimeout(() => refs.domReference.current?.focus());\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const handleLocalMultiValueChange = useCallback((selectedItem: SelectableValue<string>) => {\n    setFilterMultiValues((items) => {\n      if (items.some((item) => item.value === selectedItem.value)) {\n        return items.filter((item) => item.value !== selectedItem.value);\n      }\n      return [...items, selectedItem];\n    });\n  }, []);\n\n  const onOpenChange = useCallback<NonNullable<UseFloatingOptions['onOpenChange']>>(\n    (nextOpen, _, reason) => {\n      setOpen(nextOpen);\n      // change from filter edit mode to filter view mode when clicked\n      //   outside input or dropdown\n\n      if (reason && ['outside-press', 'escape-key'].includes(reason)) {\n        if (isMultiValueEdit) {\n          // commit multi value filter values on escape and click-away\n          handleMultiValueFilterCommit(model, filter!, filterMultiValues);\n        }\n        handleResetWip();\n        handleChangeViewMode?.();\n      }\n    },\n    [\n      filter,\n      filterMultiValues,\n      handleChangeViewMode,\n      handleMultiValueFilterCommit,\n      handleResetWip,\n      isMultiValueEdit,\n      model,\n    ]\n  );\n\n  // generate ids from multi values in order to prevent outside click based on those ids\n  const outsidePressIdsToIgnore = useMemo(() => {\n    return [\n      operatorIdentifier,\n      ...filterMultiValues.reduce<string[]>(\n        (acc, item, i) => [...acc, `${item.value}-${i}`, `${item.value}-${i}-close-icon`],\n        []\n      ),\n    ];\n  }, [operatorIdentifier, filterMultiValues]);\n\n  const { refs, floatingStyles, context, getReferenceProps, getFloatingProps, getItemProps } = useFloatingInteractions({\n    open,\n    onOpenChange,\n    activeIndex,\n    setActiveIndex,\n    outsidePressIdsToIgnore,\n    listRef,\n    disabledIndicesRef,\n  });\n\n  // pass ability to focus on input element back to parent\n  //     parentRef is coming from AdHocFiltersComboboxRenderer\n  useImperativeHandle(parentRef, () => () => refs.domReference.current?.focus(), [refs.domReference]);\n\n  function onChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const value = event.target.value;\n    setInputValue(value);\n    setActiveIndex(0);\n    if (preventFiltering) {\n      setPreventFiltering(false);\n    }\n  }\n\n  const handleRemoveMultiValue = useCallback(\n    (item: SelectableValue<string>) => {\n      setFilterMultiValues((selected) => selected.filter((option) => option.value !== item.value));\n      setTimeout(() => refs.domReference.current?.focus());\n    },\n    [refs.domReference]\n  );\n\n  // operation order on fetched options:\n  //    fuzzy search -> extract into groups -> flatten group labels and options\n  const filteredDropDownItems = flattenOptionGroups(\n    handleOptionGroups(optionsSearcher(preventFiltering ? '' : inputValue, filterInputType))\n  );\n\n  // adding custom option this way so that virtualiser is aware of it and can scroll to\n  if (allowCustomValue && filterInputType !== 'operator' && inputValue) {\n    filteredDropDownItems.push({\n      value: inputValue.trim(),\n      label: inputValue.trim(),\n      isCustom: true,\n    });\n  }\n\n  // calculate width and populate listRef and disabledIndicesRef for arrow key navigation\n  const maxOptionWidth = setupDropdownAccessibility(filteredDropDownItems, listRef, disabledIndicesRef);\n\n  const handleFetchOptions = useCallback(\n    async (inputType: AdHocInputType) => {\n      setOptionsError(false);\n      setOptionsLoading(true);\n      setOptions([]);\n      let options: Array<SelectableValue<string>> = [];\n\n      try {\n        if (inputType === 'key') {\n          options = await model._getKeys(null);\n        } else if (inputType === 'operator') {\n          options = model._getOperators();\n        } else if (inputType === 'value') {\n          options = await model._getValuesFor(filter!);\n        }\n\n        // if input type changed before fetch completed then abort updating options\n        //   this can cause race condition and return incorrect options when input type changed\n        if (filterInputTypeRef.current !== inputType) {\n          return;\n        }\n        setOptions(options);\n        if (options[0]?.group) {\n          setActiveIndex(1);\n        } else {\n          setActiveIndex(0);\n        }\n      } catch (e) {\n        setOptionsError(true);\n      }\n      setOptionsLoading(false);\n    },\n    [filter, model]\n  );\n\n  const rowVirtualizer = useVirtualizer({\n    count: filteredDropDownItems.length,\n    getScrollElement: () => refs.floating.current,\n    estimateSize: (index) =>\n      filteredDropDownItems[index].description ? VIRTUAL_LIST_ITEM_HEIGHT_WITH_DESCRIPTION : VIRTUAL_LIST_ITEM_HEIGHT,\n    overscan: VIRTUAL_LIST_OVERSCAN,\n  });\n\n  //\n  // Keyboard interactions\n  //\n\n  const handleBackspaceInput = useCallback(\n    (event: React.KeyboardEvent, multiValueEdit: boolean) => {\n      if (event.key === 'Backspace' && !inputValue) {\n        if (filterInputType === 'value') {\n          if (multiValueEdit) {\n            if (filterMultiValues.length) {\n              setFilterMultiValues((items) => {\n                const updated = [...items];\n                updated.splice(-1, 1);\n\n                return updated;\n              });\n              return;\n            }\n          }\n          setInputType('operator');\n          return;\n        }\n\n        // focus back on alway wip input when you delete filter with backspace\n        focusOnWipInputRef?.();\n\n        model._handleComboboxBackspace(filter!);\n\n        if (isAlwaysWip) {\n          handleResetWip();\n        }\n      }\n    },\n    [\n      inputValue,\n      filterInputType,\n      model,\n      filter,\n      isAlwaysWip,\n      filterMultiValues.length,\n      handleResetWip,\n      focusOnWipInputRef,\n    ]\n  );\n\n  const handleTabInput = useCallback(\n    (event: React.KeyboardEvent, multiValueEdit?: boolean) => {\n      // change filter to view mode when navigating away with Tab key\n      //  this is needed because useDismiss only reacts to mousedown\n      if (event.key === 'Tab' && !event.shiftKey) {\n        if (multiValueEdit) {\n          // commit multi value filter values on tab away\n          event.preventDefault();\n          handleMultiValueFilterCommit(model, filter!, filterMultiValues);\n          refs.domReference.current?.focus();\n        }\n\n        handleChangeViewMode?.();\n        handleResetWip();\n      }\n    },\n    [\n      filter,\n      filterMultiValues,\n      handleChangeViewMode,\n      handleMultiValueFilterCommit,\n      handleResetWip,\n      model,\n      refs.domReference,\n    ]\n  );\n\n  const handleShiftTabInput = useCallback(\n    (event: React.KeyboardEvent, multiValueEdit?: boolean) => {\n      if (event.key === 'Tab' && event.shiftKey) {\n        if (multiValueEdit) {\n          // commit multi value filter values on shift tab away\n          event.preventDefault();\n          handleMultiValueFilterCommit(model, filter!, filterMultiValues, true);\n        }\n        handleChangeViewMode?.();\n        handleResetWip();\n      }\n    },\n    [filter, filterMultiValues, handleChangeViewMode, handleMultiValueFilterCommit, handleResetWip, model]\n  );\n\n  const handleEnterInput = useCallback(\n    (event: React.KeyboardEvent, multiValueEdit?: boolean) => {\n      if (event.key === 'Enter' && activeIndex != null) {\n        // safeguard for non existing items\n        // note: custom item is added to filteredDropDownItems if allowed\n        if (!filteredDropDownItems[activeIndex]) {\n          return;\n        }\n        const selectedItem = filteredDropDownItems[activeIndex];\n\n        if (multiValueEdit) {\n          handleLocalMultiValueChange(selectedItem);\n          setInputValue('');\n        } else {\n          model._updateFilter(\n            filter!,\n            generateFilterUpdatePayload({\n              filterInputType,\n              item: selectedItem,\n              filter: filter!,\n              setFilterMultiValues,\n            })\n          );\n\n          populateInputValueOnInputTypeSwitch({\n            populateInputOnEdit,\n            item: selectedItem,\n            filterInputType,\n            setInputValue,\n            filter,\n          });\n\n          switchToNextInputType(\n            filterInputType,\n            setInputType,\n            handleChangeViewMode,\n            refs.domReference.current,\n            // preventing focus on filter pill only when last filter for better backspace experience\n            isLastFilter ? false : undefined\n          );\n          setActiveIndex(null);\n          if (isLastFilter) {\n            focusOnWipInputRef?.();\n          }\n        }\n      }\n    },\n    [\n      activeIndex,\n      filteredDropDownItems,\n      handleLocalMultiValueChange,\n      model,\n      filter,\n      filterInputType,\n      populateInputOnEdit,\n      handleChangeViewMode,\n      refs.domReference,\n      isLastFilter,\n      focusOnWipInputRef,\n    ]\n  );\n\n  const handleEditMultiValuePill = useCallback(\n    (value: SelectableValue<string>) => {\n      const valueLabel = value.label || value.value!;\n      setFilterMultiValues((prev) => prev.filter((item) => item.value !== value.value));\n      setPreventFiltering(true);\n      setInputValue(valueLabel);\n      refs.domReference.current?.focus();\n      setTimeout(() => {\n        refs.domReference.current?.select();\n      });\n    },\n    [refs.domReference]\n  );\n\n  //\n  // Effects\n  //\n\n  useEffect(() => {\n    // fetch options when dropdown is opened.\n    if (open) {\n      handleFetchOptions(filterInputType);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, filterInputType]);\n\n  // when not in wip mode this is the point of switching from view to edit mode\n  //    and in this case we default to 'value' input type and focus input\n  useEffect(() => {\n    if (!isAlwaysWip) {\n      if (hasMultiValueOperator && filter?.values?.length) {\n        const multiValueOptions = (filter.values as string[]).reduce<Array<SelectableValue<string>>>(\n          (acc, value, i) => [\n            ...acc,\n            {\n              label: filter.valueLabels?.[i] || value,\n              value: value,\n            },\n          ],\n          []\n        );\n        // populate filter multi values to local state on pill edit enter\n        setFilterMultiValues(multiValueOptions);\n      }\n\n      // populate input when selecting pill for edit\n      //   this avoids populating input during delete with backspace\n      if (!hasMultiValueOperator && populateInputOnEdit) {\n        setInputValue(filter?.value || '');\n        setTimeout(() => {\n          refs.domReference.current?.select();\n        });\n      }\n\n      refs.domReference.current?.focus();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // this is required only with multi value select in order to update position\n  //    of the multi value apply button\n  useEffect(() => {\n    if (isMultiValueEdit && filterMultiValues) {\n      setTimeout(() => setForceRefresh({}));\n    }\n  }, [filterMultiValues, isMultiValueEdit]);\n\n  // synch filterInputTypeRef with filterInputType state\n  useLayoutEffect(() => {\n    if (filterInputTypeRef.current) {\n      filterInputTypeRef.current = filterInputType;\n    }\n  }, [filterInputType]);\n\n  useLayoutEffect(() => {\n    // this is needed to scroll virtual list to the position of currently selected\n    //    dropdown item when navigating with arrow up/down keys to end/start of list\n    if (\n      activeIndex !== null &&\n      rowVirtualizer.range &&\n      (activeIndex > rowVirtualizer.range?.endIndex || activeIndex < rowVirtualizer.range?.startIndex)\n    ) {\n      rowVirtualizer.scrollToIndex(activeIndex);\n    }\n  }, [activeIndex, rowVirtualizer]);\n\n  const keyLabel = filter?.keyLabel ?? filter?.key;\n\n  return (\n    <div className={styles.comboboxWrapper}>\n      {filter ? (\n        <div className={styles.pillWrapper}>\n          {/* Filter key pill render */}\n          {filter?.key ? <div className={cx(styles.basePill, styles.keyPill)}>{keyLabel}</div> : null}\n          {/* Filter operator pill render */}\n          {filter?.key && filter?.operator && filterInputType !== 'operator' ? (\n            <div\n              id={operatorIdentifier}\n              className={cx(styles.basePill, styles.operatorPill, operatorIdentifier)}\n              role=\"button\"\n              aria-label=\"Edit filter operator\"\n              tabIndex={0}\n              onClick={(event) => {\n                event.stopPropagation();\n                setInputValue('');\n                switchInputType('operator', setInputType, undefined, refs.domReference.current);\n              }}\n              onKeyDown={(event) => {\n                handleShiftTabInput(event, hasMultiValueOperator);\n                if (event.key === 'Enter') {\n                  setInputValue('');\n                  switchInputType('operator', setInputType, undefined, refs.domReference.current);\n                }\n              }}\n            >\n              {filter.operator}\n            </div>\n          ) : null}\n\n          <div ref={multiValuePillWrapperRef}></div>\n          {isMultiValueEdit\n            ? filterMultiValues.map((item, i) => (\n                <MultiValuePill\n                  key={`${item.value}-${i}`}\n                  item={item}\n                  index={i}\n                  handleRemoveMultiValue={handleRemoveMultiValue}\n                  handleEditMultiValuePill={handleEditMultiValuePill}\n                />\n              ))\n            : null}\n        </div>\n      ) : null}\n\n      <input\n        {...getReferenceProps({\n          ref: refs.setReference,\n          onChange,\n          value: inputValue,\n          // dynamic placeholder to display operator and/or value in filter edit mode\n          placeholder: generatePlaceholder(filter!, filterInputType, isMultiValueEdit, isAlwaysWip),\n          'aria-autocomplete': 'list',\n          onKeyDown(event) {\n            if (!open) {\n              setOpen(true);\n              return;\n            }\n\n            if (filterInputType === 'operator') {\n              handleShiftTabInput(event);\n            }\n            handleBackspaceInput(event, isMultiValueEdit);\n            handleTabInput(event, isMultiValueEdit);\n            handleEnterInput(event, isMultiValueEdit);\n          },\n        })}\n        className={cx(styles.inputStyle, { [styles.loadingInputPadding]: !optionsLoading })}\n        onClick={(event) => {\n          event.stopPropagation();\n          setOpen(true);\n        }}\n        onFocus={() => {\n          setOpen(true);\n        }}\n      />\n      {optionsLoading ? <Spinner className={styles.loadingIndicator} inline={true} /> : null}\n      <FloatingPortal>\n        {open && (\n          <FloatingFocusManager context={context} initialFocus={-1} visuallyHiddenDismiss modal={false}>\n            <>\n              <div\n                style={{\n                  ...floatingStyles,\n                  width: `${optionsError ? ERROR_STATE_DROPDOWN_WIDTH : maxOptionWidth}px`,\n                  transform: isMultiValueEdit\n                    ? `translate(${multiValuePillWrapperRef.current?.getBoundingClientRect().left || 0}px, ${\n                        (refs.domReference.current?.getBoundingClientRect().bottom || 0) + 10\n                      }px )`\n                    : floatingStyles.transform,\n                }}\n                ref={refs.setFloating}\n                className={styles.dropdownWrapper}\n                tabIndex={-1}\n              >\n                <div\n                  style={{\n                    height: `${rowVirtualizer.getTotalSize() || VIRTUAL_LIST_ITEM_HEIGHT}px`, // fallback to 38px for loading/error/no options placeholders\n                  }}\n                  {...getFloatingProps()}\n                  tabIndex={-1}\n                >\n                  {optionsLoading ? (\n                    <LoadingOptionsPlaceholder />\n                  ) : optionsError ? (\n                    <OptionsErrorPlaceholder handleFetchOptions={() => handleFetchOptions(filterInputType)} />\n                  ) : !filteredDropDownItems.length &&\n                    (!allowCustomValue || filterInputType === 'operator' || !inputValue) ? (\n                    <NoOptionsPlaceholder />\n                  ) : (\n                    rowVirtualizer.getVirtualItems().map((virtualItem) => {\n                      const item = filteredDropDownItems[virtualItem.index];\n                      const index = virtualItem.index;\n\n                      // render group label\n                      if (item.options) {\n                        return (\n                          <div\n                            key={`${item.label}+${index}`}\n                            className={cx(styles.optionGroupLabel, styles.groupTopBorder)}\n                            style={{\n                              height: `${virtualItem.size}px`,\n                              transform: `translateY(${virtualItem.start}px)`,\n                            }}\n                          >\n                            <Text weight=\"bold\" variant=\"bodySmall\" color=\"secondary\">\n                              {item.label!}\n                            </Text>\n                          </div>\n                        );\n                      }\n\n                      const nextItem: SelectableValue<string> | undefined =\n                        filteredDropDownItems[virtualItem.index + 1];\n                      const shouldAddBottomBorder = nextItem && !nextItem.group && !nextItem.options && item.group;\n\n                      return (\n                        // key is included in getItemProps()\n                        // eslint-disable-next-line react/jsx-key\n                        <DropdownItem\n                          {...getItemProps({\n                            key: `${item.value!}-${index}`,\n                            ref(node) {\n                              listRef.current[index] = node;\n                            },\n                            onClick(event) {\n                              if (filterInputType !== 'value') {\n                                event.stopPropagation();\n                              }\n                              if (isMultiValueEdit) {\n                                event.preventDefault();\n                                event.stopPropagation();\n                                handleLocalMultiValueChange(item);\n                                setInputValue('');\n                                refs.domReference.current?.focus();\n                              } else {\n                                model._updateFilter(\n                                  filter!,\n                                  generateFilterUpdatePayload({\n                                    filterInputType,\n                                    item,\n                                    filter: filter!,\n                                    setFilterMultiValues,\n                                  })\n                                );\n\n                                populateInputValueOnInputTypeSwitch({\n                                  populateInputOnEdit,\n                                  item,\n                                  filterInputType,\n                                  setInputValue,\n                                  filter,\n                                });\n\n                                switchToNextInputType(\n                                  filterInputType,\n                                  setInputType,\n                                  handleChangeViewMode,\n                                  refs.domReference.current,\n                                  // explicitly preventing focus on filter pill due to a11y error\n                                  false\n                                );\n                              }\n                            },\n                          })}\n                          active={activeIndex === index}\n                          addGroupBottomBorder={shouldAddBottomBorder}\n                          // virtual item positioning and accessibility\n                          style={{\n                            height: `${virtualItem.size}px`,\n                            transform: `translateY(${virtualItem.start}px)`,\n                          }}\n                          aria-setsize={filteredDropDownItems.length}\n                          aria-posinset={virtualItem.index + 1}\n                          isMultiValueEdit={isMultiValueEdit}\n                          checked={filterMultiValues.some((val) => val.value === item.value)}\n                        >\n                          <span>\n                            {item.isCustom ? 'Use custom value: ' : ''} {item.label ?? item.value}\n                          </span>\n                          {item.description ? <div className={styles.descriptionText}>{item.description}</div> : null}\n                        </DropdownItem>\n                      );\n                    })\n                  )}\n                </div>\n              </div>\n              {isMultiValueEdit && !optionsLoading && !optionsError && filteredDropDownItems.length ? (\n                <MultiValueApplyButton\n                  onApply={() => {\n                    handleMultiValueFilterCommit(model, filter!, filterMultiValues);\n                  }}\n                  floatingElement={refs.floating.current}\n                  maxOptionWidth={maxOptionWidth}\n                  menuHeight={Math.min(rowVirtualizer.getTotalSize(), MAX_MENU_HEIGHT)}\n                />\n              ) : null}\n            </>\n          </FloatingFocusManager>\n        )}\n      </FloatingPortal>\n    </div>\n  );\n});\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  comboboxWrapper: css({\n    display: 'flex',\n    flexWrap: 'wrap',\n  }),\n  pillWrapper: css({\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n  }),\n  basePill: css({\n    display: 'flex',\n    alignItems: 'center',\n    background: theme.colors.action.disabledBackground,\n    border: `1px solid ${theme.colors.border.weak}`,\n    padding: theme.spacing(0.125, 1, 0.125, 1),\n    color: theme.colors.text.primary,\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    minHeight: theme.spacing(2.75),\n    ...theme.typography.bodySmall,\n    cursor: 'pointer',\n  }),\n  keyPill: css({\n    fontWeight: theme.typography.fontWeightBold,\n    cursor: 'default',\n  }),\n  operatorPill: css({\n    '&:hover': {\n      background: theme.colors.action.hover,\n    },\n  }),\n  dropdownWrapper: css({\n    backgroundColor: theme.colors.background.primary,\n    color: theme.colors.text.primary,\n    boxShadow: theme.shadows.z2,\n    overflowY: 'auto',\n    zIndex: theme.zIndex.dropdown,\n  }),\n  inputStyle: css({\n    paddingBlock: 0,\n    '&:focus': {\n      outline: 'none',\n    },\n  }),\n  loadingIndicator: css({\n    color: theme.colors.text.secondary,\n    marginLeft: theme.spacing(0.5),\n  }),\n  loadingInputPadding: css({\n    paddingRight: theme.spacing(2.5),\n  }),\n  optionGroupLabel: css({\n    padding: theme.spacing(1),\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n  }),\n  groupTopBorder: css({\n    '&:not(:first-child)': {\n      borderTop: `1px solid ${theme.colors.border.weak}`,\n    },\n  }),\n  descriptionText: css({\n    ...theme.typography.bodySmall,\n    color: theme.colors.text.secondary,\n    paddingTop: theme.spacing(0.5),\n  }),\n});\n"],"names":["AdHocCombobox","model","filter","filterMultiValues","_a","_","options","_b"],"mappings":"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"}