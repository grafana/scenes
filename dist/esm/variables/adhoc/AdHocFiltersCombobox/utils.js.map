{"version":3,"file":"utils.js","sources":["../../../../../src/variables/adhoc/AdHocFiltersCombobox/utils.ts"],"sourcesContent":["import { SelectableValue } from '@grafana/data';\nimport { AdHocInputType } from './AdHocFiltersCombobox';\nimport { AdHocFilterWithLabels, isMultiValueOperator } from '../AdHocFiltersVariable';\nimport { getFuzzySearcher } from '../../utils';\n\nconst VIRTUAL_LIST_WIDTH_ESTIMATE_MULTIPLIER = 8;\nconst VIRTUAL_LIST_DESCRIPTION_WIDTH_ESTIMATE_MULTIPLIER = 6;\nconst VIRTUAL_LIST_PADDING = 8;\nexport const VIRTUAL_LIST_OVERSCAN = 5;\nexport const VIRTUAL_LIST_ITEM_HEIGHT = 38;\nexport const VIRTUAL_LIST_ITEM_HEIGHT_WITH_DESCRIPTION = 60;\nexport const ERROR_STATE_DROPDOWN_WIDTH = 366;\n\nexport function fuzzySearchOptions(options: Array<SelectableValue<string>>) {\n  const haystack = options.map((o) => o.label ?? o.value!);\n  const fuzzySearch = getFuzzySearcher(haystack);\n\n  return (search: string, filterInputType: AdHocInputType) => {\n    if (filterInputType === 'operator' && search !== '') {\n      // uFuzzy can only match non-alphanum chars if quoted\n      search = `\"${search}\"`;\n    }\n\n    return fuzzySearch(search).map((i) => options[i]);\n  };\n}\nexport const flattenOptionGroups = (options: Array<SelectableValue<string>>) =>\n  options.flatMap<SelectableValue<string>>((option) => (option.options ? [option, ...option.options] : [option]));\n\nexport const setupDropdownAccessibility = (\n  options: Array<SelectableValue<string>>,\n  listRef: React.MutableRefObject<Array<HTMLElement | null>>,\n  disabledIndicesRef: React.MutableRefObject<number[]>\n) => {\n  let maxOptionWidth = 182;\n  const listRefArr = [];\n  const disabledIndices = [];\n\n  for (let i = 0; i < options.length; i++) {\n    // listRefArr should be filled with nulls for amount of dropdown items so that\n    //    useNavigationList sets activeIndex correctly when navigating with arrow keys\n    listRefArr.push(null);\n\n    // disabledIndices are used to skip unselectable group items in dropdown when\n    //    navigating with arrow keys\n    if (options[i]?.options) {\n      disabledIndices.push(i);\n    }\n    let label = options[i].label ?? options[i].value ?? '';\n    let multiplierToUse = VIRTUAL_LIST_WIDTH_ESTIMATE_MULTIPLIER;\n    if (\n      label.length * VIRTUAL_LIST_WIDTH_ESTIMATE_MULTIPLIER <\n      (options[i].description?.length || 0) * VIRTUAL_LIST_DESCRIPTION_WIDTH_ESTIMATE_MULTIPLIER\n    ) {\n      label = options[i].description!;\n      multiplierToUse = VIRTUAL_LIST_DESCRIPTION_WIDTH_ESTIMATE_MULTIPLIER;\n    }\n\n    // rough widthEstimate\n    const widthEstimate =\n      (options[i].isCustom ? label.length + 18 : label.length) * multiplierToUse + VIRTUAL_LIST_PADDING * 2;\n    if (widthEstimate > maxOptionWidth) {\n      maxOptionWidth = widthEstimate;\n    }\n  }\n\n  listRef.current = [...listRefArr];\n  disabledIndicesRef.current = [...disabledIndices];\n  return maxOptionWidth;\n};\n\nconst nextInputTypeMap = {\n  key: 'operator',\n  operator: 'value',\n  value: 'key',\n} as const;\n\nexport const switchToNextInputType = (\n  filterInputType: AdHocInputType,\n  setInputType: React.Dispatch<React.SetStateAction<AdHocInputType>>,\n  handleChangeViewMode: ((event?: React.MouseEvent, shouldFocusOnFilterPill?: boolean) => void) | undefined,\n  element: HTMLInputElement | null,\n  shouldFocusOnPillWrapperOverride?: boolean\n) =>\n  switchInputType(\n    nextInputTypeMap[filterInputType],\n    setInputType,\n    filterInputType === 'value' ? handleChangeViewMode : undefined,\n    element,\n    shouldFocusOnPillWrapperOverride\n  );\n\nexport const switchInputType = (\n  filterInputType: AdHocInputType,\n  setInputType: React.Dispatch<React.SetStateAction<AdHocInputType>>,\n  handleChangeViewMode?: (event?: React.MouseEvent, shouldFocusOnFilterPill?: boolean) => void,\n  element?: HTMLInputElement | null,\n  shouldFocusOnPillWrapperOverride?: boolean\n) => {\n  setInputType(filterInputType);\n\n  handleChangeViewMode?.(undefined, shouldFocusOnPillWrapperOverride);\n\n  setTimeout(() => element?.focus());\n};\n\nexport const generateFilterUpdatePayload = ({\n  filterInputType,\n  item,\n  filter,\n  setFilterMultiValues,\n}: {\n  filterInputType: AdHocInputType;\n  item: SelectableValue<string>;\n  filter: AdHocFilterWithLabels;\n  setFilterMultiValues: (value: React.SetStateAction<Array<SelectableValue<string>>>) => void;\n}): Partial<AdHocFilterWithLabels> => {\n  if (filterInputType === 'key') {\n    return {\n      key: item.value,\n      keyLabel: item.label ? item.label : item.value,\n    };\n  }\n  if (filterInputType === 'value') {\n    return {\n      value: item.value,\n      valueLabels: [item.label ? item.label : item.value!],\n    };\n  }\n\n  if (filterInputType === 'operator') {\n    // handle values/valueLabels when switching from multi to single value operator\n    if (isMultiValueOperator(filter.operator) && !isMultiValueOperator(item.value!)) {\n      // reset local multi values state\n      setFilterMultiValues([]);\n      // update operator and reset values and valueLabels\n      return {\n        operator: item.value,\n        valueLabels: [filter.valueLabels?.[0] || filter.values?.[0] || filter.value],\n        values: undefined,\n      };\n    }\n\n    // handle values/valueLabels when switching from single to multi value operator\n    if (isMultiValueOperator(item.value!) && !isMultiValueOperator(filter.operator)) {\n      const valueLabels = [filter.valueLabels?.[0] || filter.values?.[0] || filter.value];\n      const values = [filter.value];\n\n      // populate local multi values state\n      if (values[0]) {\n        setFilterMultiValues([\n          {\n            value: values[0],\n            label: valueLabels?.[0] ?? values[0],\n          },\n        ]);\n      }\n\n      // update operator and default values and valueLabels\n      return {\n        operator: item.value,\n        valueLabels: valueLabels,\n        values: values,\n      };\n    }\n  }\n\n  // default operator update of same multi/single type\n  return {\n    [filterInputType]: item.value,\n  };\n};\n\nconst INPUT_PLACEHOLDER = 'Filter by label values';\n\nexport const generatePlaceholder = (\n  filter: AdHocFilterWithLabels,\n  filterInputType: AdHocInputType,\n  isMultiValueEdit: boolean,\n  isAlwaysWip?: boolean\n) => {\n  if (filterInputType === 'key') {\n    return INPUT_PLACEHOLDER;\n  }\n  if (filterInputType === 'value') {\n    if (isMultiValueEdit) {\n      return 'Edit values';\n    }\n    return filter.valueLabels?.[0] || '';\n  }\n\n  return filter[filterInputType] && !isAlwaysWip ? `${filter[filterInputType]}` : INPUT_PLACEHOLDER;\n};\n\nexport const populateInputValueOnInputTypeSwitch = ({\n  populateInputOnEdit,\n  item,\n  filterInputType,\n  setInputValue,\n  filter,\n}: {\n  populateInputOnEdit: boolean | undefined;\n  item: SelectableValue<string>;\n  filterInputType: AdHocInputType;\n  setInputValue: (value: React.SetStateAction<string>) => void;\n  filter: AdHocFilterWithLabels | undefined;\n}) => {\n  if (populateInputOnEdit && !isMultiValueOperator(item.value || '') && nextInputTypeMap[filterInputType] === 'value') {\n    setInputValue(filter?.value || '');\n  } else {\n    setInputValue('');\n  }\n};\n"],"names":[],"mappings":"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"}