{"version":3,"file":"AdHocFiltersVariable.js","sources":["../../../../src/variables/adhoc/AdHocFiltersVariable.tsx"],"sourcesContent":["import React from 'react';\n// @ts-expect-error Remove when 11.1.x is released\nimport { AdHocVariableFilter, GetTagResponse, GrafanaTheme2, MetricFindValue, SelectableValue } from '@grafana/data';\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneVariable, SceneVariableState, SceneVariableValueChangedEvent, VariableValue } from '../types';\nimport { ControlsLayout, SceneComponentProps } from '../../core/types';\nimport { DataSourceRef } from '@grafana/schema';\nimport { dataFromResponse, getQueriesForVariables, renderPrometheusLabelFilters, responseHasError } from '../utils';\nimport { patchGetAdhocFilters } from './patchGetAdhocFilters';\nimport { useStyles2 } from '@grafana/ui';\nimport { sceneGraph } from '../../core/sceneGraph';\nimport { AdHocFilterBuilder } from './AdHocFilterBuilder';\nimport { AdHocFilterRenderer } from './AdHocFilterRenderer';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { AdHocFiltersVariableUrlSyncHandler } from './AdHocFiltersVariableUrlSyncHandler';\nimport { css } from '@emotion/css';\nimport { getEnrichedFiltersRequest } from '../getEnrichedFiltersRequest';\nimport { AdHocFiltersComboboxRenderer } from './AdHocFiltersCombobox/AdHocFiltersComboboxRenderer';\nimport { wrapInSafeSerializableSceneObject } from '../../utils/wrapInSafeSerializableSceneObject';\n\nexport interface AdHocFilterWithLabels extends AdHocVariableFilter {\n  keyLabel?: string;\n  valueLabels?: string[];\n}\n\nexport type AdHocControlsLayout = ControlsLayout | 'combobox';\n\nexport interface AdHocFiltersVariableState extends SceneVariableState {\n  /** Optional text to display on the 'add filter' button */\n  addFilterButtonText?: string;\n  /** The visible filters */\n  filters: AdHocFilterWithLabels[];\n  /** Base filters to always apply when looking up keys*/\n  baseFilters?: AdHocFilterWithLabels[];\n  /** Datasource to use for getTagKeys and getTagValues and also controls which scene queries the filters should apply to */\n  datasource: DataSourceRef | null;\n  /** Controls if the filters can be changed */\n  readOnly?: boolean;\n  /**\n   * @experimental\n   * Controls the layout and design of the label.\n   */\n  layout?: AdHocControlsLayout;\n  /**\n   * Defaults to automatic which means filters will automatically be applied to all queries with the same data source as this AdHocFilterSet.\n   * In manual mode you either have to use the filters programmatically or as a variable inside query expressions.\n   */\n  applyMode: 'auto' | 'manual';\n  /**\n   * Filter out the keys that do not match the regex.\n   */\n  tagKeyRegexFilter?: RegExp;\n  /**\n   * Extension hook for customizing the key lookup.\n   * Return replace: true if you want to override the default lookup\n   * Return replace: false if you want to combine the results with the default lookup\n   */\n  getTagKeysProvider?: getTagKeysProvider;\n  /**\n   * Extension hook for customizing the value lookup.\n   * Return replace: true if you want to override the default lookup.\n   * Return replace: false if you want to combine the results with the default lookup\n   */\n  getTagValuesProvider?: getTagValuesProvider;\n\n  /**\n   * Optionally provide an array of static keys that override getTagKeys\n   */\n  defaultKeys?: MetricFindValue[];\n\n  /**\n   * This is the expression that the filters resulted in. Defaults to\n   * Prometheus / Loki compatible label filter expression\n   */\n  filterExpression?: string;\n\n  /**\n   * The default builder creates a Prometheus/Loki compatible filter expression,\n   * this can be overridden to create a different expression based on the current filters.\n   */\n  expressionBuilder?: AdHocVariableExpressionBuilderFn;\n\n  /**\n   * Whether the filter supports new multi-value operators like =| and !=|\n   */\n  supportsMultiValueOperators?: boolean;\n\n  /**\n   * When querying the datasource for label names and values to determine keys and values\n   * for this ad hoc filter, consider the queries in the scene and use them as a filter.\n   * This queries filter can be used to ensure that only ad hoc filter options that would\n   * impact the current queries are presented to the user.\n   */\n  useQueriesAsFilterForOptions?: boolean;\n\n  /**\n   * @internal state of the new filter being added\n   */\n  _wip?: AdHocFilterWithLabels;\n}\n\nexport type AdHocVariableExpressionBuilderFn = (filters: AdHocFilterWithLabels[]) => string;\n\nexport type getTagKeysProvider = (\n  variable: AdHocFiltersVariable,\n  currentKey: string | null\n) => Promise<{ replace?: boolean; values: GetTagResponse | MetricFindValue[] }>;\n\nexport type getTagValuesProvider = (\n  variable: AdHocFiltersVariable,\n  filter: AdHocFilterWithLabels\n) => Promise<{ replace?: boolean; values: GetTagResponse | MetricFindValue[] }>;\n\nexport type AdHocFiltersVariableCreateHelperArgs = AdHocFiltersVariableState;\n\nexport type OperatorDefinition = {\n  value: string;\n  description?: string;\n  isMulti?: Boolean;\n};\n\nexport const OPERATORS: OperatorDefinition[] = [\n  {\n    value: '=',\n    description: 'Equals',\n  },\n  {\n    value: '!=',\n    description: 'Not equal',\n  },\n  {\n    value: '=|',\n    description: 'One of. Use to filter on multiple values.',\n    isMulti: true,\n  },\n  {\n    value: '!=|',\n    description: 'Not one of. Use to exclude multiple values.',\n    isMulti: true,\n  },\n  {\n    value: '=~',\n    description: 'Matches regex',\n  },\n  {\n    value: '!~',\n    description: 'Does not match regex',\n  },\n  {\n    value: '<',\n    description: 'Less than',\n  },\n  {\n    value: '>',\n    description: 'Greater than',\n  },\n];\n\nexport class AdHocFiltersVariable\n  extends SceneObjectBase<AdHocFiltersVariableState>\n  implements SceneVariable<AdHocFiltersVariableState>\n{\n  static Component = AdHocFiltersVariableRenderer;\n\n  private _scopedVars = { __sceneObject: wrapInSafeSerializableSceneObject(this) };\n  private _dataSourceSrv = getDataSourceSrv();\n\n  protected _urlSync = new AdHocFiltersVariableUrlSyncHandler(this);\n\n  public constructor(state: Partial<AdHocFiltersVariableState>) {\n    super({\n      type: 'adhoc',\n      name: state.name ?? 'Filters',\n      filters: [],\n      datasource: null,\n      applyMode: 'auto',\n      filterExpression: state.filterExpression ?? renderExpression(state.expressionBuilder, state.filters),\n      ...state,\n    });\n\n    if (this.state.applyMode === 'auto') {\n      patchGetAdhocFilters(this);\n    }\n  }\n\n  public setState(update: Partial<AdHocFiltersVariableState>): void {\n    let filterExpressionChanged = false;\n\n    if (update.filters && update.filters !== this.state.filters && !update.filterExpression) {\n      update.filterExpression = renderExpression(this.state.expressionBuilder, update.filters);\n      filterExpressionChanged = update.filterExpression !== this.state.filterExpression;\n    }\n\n    super.setState(update);\n\n    if (filterExpressionChanged) {\n      this.publishEvent(new SceneVariableValueChangedEvent(this), true);\n    }\n  }\n\n  public getValue(): VariableValue | undefined {\n    return this.state.filterExpression;\n  }\n\n  public _updateFilter(filter: AdHocFilterWithLabels, update: Partial<AdHocFilterWithLabels>) {\n    const { filters, _wip } = this.state;\n\n    if (filter === _wip) {\n      // If we set value we are done with this \"work in progress\" filter and we can add it\n      if ('value' in update && update['value'] !== '') {\n        this.setState({ filters: [...filters, { ..._wip, ...update }], _wip: undefined });\n      } else {\n        this.setState({ _wip: { ...filter, ...update } });\n      }\n      return;\n    }\n\n    const updatedFilters = this.state.filters.map((f) => {\n      return f === filter ? { ...f, ...update } : f;\n    });\n\n    this.setState({ filters: updatedFilters });\n  }\n\n  public _removeFilter(filter: AdHocFilterWithLabels) {\n    if (filter === this.state._wip) {\n      this.setState({ _wip: undefined });\n      return;\n    }\n\n    this.setState({ filters: this.state.filters.filter((f) => f !== filter) });\n  }\n\n  public _removeLastFilter() {\n    const filterToRemove = this.state.filters.at(-1);\n\n    if (filterToRemove) {\n      this._removeFilter(filterToRemove);\n    }\n  }\n\n  /**\n   * Get possible keys given current filters. Do not call from plugins directly\n   */\n  public async _getKeys(currentKey: string | null): Promise<Array<SelectableValue<string>>> {\n    const override = await this.state.getTagKeysProvider?.(this, currentKey);\n\n    if (override && override.replace) {\n      return dataFromResponse(override.values).map(toSelectableValue);\n    }\n\n    if (this.state.defaultKeys) {\n      return this.state.defaultKeys.map(toSelectableValue);\n    }\n\n    const ds = await this._dataSourceSrv.get(this.state.datasource, this._scopedVars);\n    if (!ds || !ds.getTagKeys) {\n      return [];\n    }\n\n    const otherFilters = this.state.filters.filter((f) => f.key !== currentKey).concat(this.state.baseFilters ?? []);\n    const timeRange = sceneGraph.getTimeRange(this).state.value;\n    const queries = this.state.useQueriesAsFilterForOptions ? getQueriesForVariables(this) : undefined;\n    const response = await ds.getTagKeys({\n      filters: otherFilters,\n      queries,\n      timeRange,\n      ...getEnrichedFiltersRequest(this),\n    });\n\n    if (responseHasError(response)) {\n      // @ts-expect-error Remove when 11.1.x is released\n      this.setState({ error: response.error.message });\n    }\n\n    let keys = dataFromResponse(response);\n    if (override) {\n      keys = keys.concat(dataFromResponse(override.values));\n    }\n\n    const tagKeyRegexFilter = this.state.tagKeyRegexFilter;\n    if (tagKeyRegexFilter) {\n      // @ts-expect-error Remove when 11.1.x is released\n      keys = keys.filter((f) => f.text.match(tagKeyRegexFilter));\n    }\n\n    return keys.map(toSelectableValue);\n  }\n\n  /**\n   * Get possible key values for a specific key given current filters. Do not call from plugins directly\n   */\n  public async _getValuesFor(filter: AdHocFilterWithLabels): Promise<Array<SelectableValue<string>>> {\n    const override = await this.state.getTagValuesProvider?.(this, filter);\n\n    if (override && override.replace) {\n      return dataFromResponse(override.values).map(toSelectableValue);\n    }\n\n    const ds = await this._dataSourceSrv.get(this.state.datasource, this._scopedVars);\n\n    if (!ds || !ds.getTagValues) {\n      return [];\n    }\n\n    // Filter out the current filter key from the list of all filters\n    const otherFilters = this.state.filters.filter((f) => f.key !== filter.key).concat(this.state.baseFilters ?? []);\n\n    const timeRange = sceneGraph.getTimeRange(this).state.value;\n    const queries = this.state.useQueriesAsFilterForOptions ? getQueriesForVariables(this) : undefined;\n\n    const response = await ds.getTagValues({\n      key: filter.key,\n      filters: otherFilters,\n      timeRange, // @ts-expect-error TODO: remove this once 11.1.x is released\n      queries,\n      ...getEnrichedFiltersRequest(this),\n    });\n\n    if (responseHasError(response)) {\n      // @ts-expect-error Remove when 11.1.x is released\n      this.setState({ error: response.error.message });\n    }\n\n    let values = dataFromResponse(response);\n    if (override) {\n      values = values.concat(dataFromResponse(override.values));\n    }\n\n    return values.map(toSelectableValue);\n  }\n\n  public _addWip() {\n    this.setState({\n      _wip: { key: '', value: '', operator: '=', condition: '' },\n    });\n  }\n\n  public _getOperators() {\n    const filteredOperators = this.state.supportsMultiValueOperators\n      ? OPERATORS\n      : OPERATORS.filter((operator) => !operator.isMulti);\n    return filteredOperators.map<SelectableValue<string>>(({ value, description }) => ({\n      label: value,\n      value,\n      description,\n    }));\n  }\n}\n\nfunction renderExpression(\n  builder: AdHocVariableExpressionBuilderFn | undefined,\n  filters: AdHocFilterWithLabels[] | undefined\n) {\n  return (builder ?? renderPrometheusLabelFilters)(filters ?? []);\n}\n\nexport function AdHocFiltersVariableRenderer({ model }: SceneComponentProps<AdHocFiltersVariable>) {\n  const { filters, readOnly, addFilterButtonText } = model.useState();\n  const styles = useStyles2(getStyles);\n\n  if (model.state.layout === 'combobox') {\n    return <AdHocFiltersComboboxRenderer model={model} />;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {filters.map((filter, index) => (\n        <React.Fragment key={index}>\n          <AdHocFilterRenderer filter={filter} model={model} />\n        </React.Fragment>\n      ))}\n\n      {!readOnly && <AdHocFilterBuilder model={model} key=\"'builder\" addFilterButtonText={addFilterButtonText} />}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignItems: 'flex-end',\n    columnGap: theme.spacing(2),\n    rowGap: theme.spacing(1),\n  }),\n});\n\nexport function toSelectableValue(input: MetricFindValue): SelectableValue<string> {\n  const { text, value } = input;\n  const result: SelectableValue<string> = {\n    label: text,\n    value: String(value ?? text),\n  };\n\n  if ('group' in input) {\n    result.group = input.group;\n  }\n\n  return result;\n}\n\nexport function isFilterComplete(filter: AdHocFilterWithLabels): boolean {\n  return filter.key !== '' && filter.operator !== '' && filter.value !== '';\n}\n\nexport function isMultiValueOperator(operatorValue: string): boolean {\n  const operator = OPERATORS.find((o) => o.value === operatorValue);\n  if (!operator) {\n    // default to false if operator is not found\n    return false;\n  }\n  return Boolean(operator.isMulti);\n}\n"],"names":[],"mappings":"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"}