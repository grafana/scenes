{"version":3,"file":"SceneVariableSet.js","sources":["../../../../src/variables/sets/SceneVariableSet.ts"],"sourcesContent":["import { VariableRefresh } from '@grafana/data';\nimport { Unsubscribable } from 'rxjs';\nimport { sceneGraph } from '../../core/sceneGraph';\n\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneObject } from '../../core/types';\nimport { writeSceneLog } from '../../utils/writeSceneLog';\nimport {\n  SceneVariable,\n  SceneVariableDependencyConfigLike,\n  SceneVariables,\n  SceneVariableSetState,\n  SceneVariableValueChangedEvent,\n} from '../types';\nimport { VariableValueRecorder } from '../VariableValueRecorder';\n\nexport class SceneVariableSet extends SceneObjectBase<SceneVariableSetState> implements SceneVariables {\n  /** Variables that have changed in since the activation or since the first manual value change */\n  private _variablesThatHaveChanged = new Set<SceneVariable>();\n\n  /** Variables that are scheduled to be validated and updated */\n  private _variablesToUpdate = new Set<SceneVariable>();\n\n  /** Variables currently updating  */\n  private _updating = new Map<SceneVariable, VariableUpdateInProgress>();\n\n  private _variableValueRecorder = new VariableValueRecorder();\n\n  /**\n   * This makes sure SceneVariableSet's higher up in the chain notify us when parent level variables complete update batches.\n   **/\n  protected _variableDependency = new SceneVariableSetVariableDependencyHandler(\n    this._handleParentVariableUpdatesCompleted.bind(this)\n  );\n\n  public getByName(name: string): SceneVariable | undefined {\n    // TODO: Replace with index\n    return this.state.variables.find((x) => x.state.name === name);\n  }\n\n  public constructor(state: SceneVariableSetState) {\n    super(state);\n\n    this.addActivationHandler(this._onActivate);\n  }\n\n  /**\n   * Subscribes to child variable value changes, and starts the variable value validation process\n   */\n  private _onActivate = () => {\n    const timeRange = sceneGraph.getTimeRange(this);\n    // Subscribe to changes to child variables\n    this._subs.add(\n      this.subscribeToEvent(SceneVariableValueChangedEvent, (event) => this._handleVariableValueChanged(event.payload))\n    );\n\n    this._subs.add(\n      timeRange.subscribeToState(() => {\n        this._refreshTimeRangeBasedVariables();\n      })\n    );\n\n    // Subscribe to state changes\n    this._subs.add(this.subscribeToState(this._onStateChanged));\n\n    this._checkForVariablesThatChangedWhileInactive();\n\n    // Add all variables that need updating to queue\n    for (const variable of this.state.variables) {\n      if (this._variableNeedsUpdate(variable)) {\n        this._variablesToUpdate.add(variable);\n      }\n    }\n\n    this._updateNextBatch();\n\n    // Return deactivation handler;\n    return this._onDeactivate;\n  };\n\n  /**\n   * Add all variables that depend on the changed variable to the update queue\n   */\n  private _refreshTimeRangeBasedVariables() {\n    for (const variable of this.state.variables) {\n      if ('refresh' in variable.state && variable.state.refresh === VariableRefresh.onTimeRangeChanged) {\n        this._variablesToUpdate.add(variable);\n      }\n    }\n\n    this._updateNextBatch();\n  }\n\n  /**\n   * Cancel all currently running updates\n   */\n  private _onDeactivate = () => {\n    for (const update of this._updating.values()) {\n      update.subscription?.unsubscribe();\n    }\n\n    // Remember current variable values\n    for (const variable of this.state.variables) {\n      // if the current variable is not in queue to update and validate and not being actively updated then the value is ok\n      if (!this._variablesToUpdate.has(variable) && !this._updating.has(variable)) {\n        this._variableValueRecorder.recordCurrentValue(variable);\n      }\n    }\n\n    this._variablesToUpdate.clear();\n    this._updating.clear();\n  };\n\n  /**\n   * Look for new variables that need to be initialized\n   */\n  private _onStateChanged = (newState: SceneVariableSetState, oldState: SceneVariableSetState) => {\n    const variablesToUpdateCountStart = this._variablesToUpdate.size;\n\n    // Check for removed variables\n    for (const variable of oldState.variables) {\n      if (!newState.variables.includes(variable)) {\n        const updating = this._updating.get(variable);\n        if (updating?.subscription) {\n          updating.subscription.unsubscribe();\n        }\n        this._updating.delete(variable);\n        this._variablesToUpdate.delete(variable);\n      }\n    }\n\n    // Check for new variables\n    for (const variable of newState.variables) {\n      if (!oldState.variables.includes(variable)) {\n        if (this._variableNeedsUpdate(variable)) {\n          this._variablesToUpdate.add(variable);\n        }\n      }\n    }\n\n    // Only start a new batch if there was no batch already running\n    if (variablesToUpdateCountStart === 0 && this._variablesToUpdate.size > 0) {\n      this._updateNextBatch();\n    }\n  };\n\n  /**\n   * If variables changed while in in-active state we don't get any change events, so we need to check for that here.\n   */\n  private _checkForVariablesThatChangedWhileInactive() {\n    if (!this._variableValueRecorder.hasValues()) {\n      return;\n    }\n\n    for (const variable of this.state.variables) {\n      if (this._variableValueRecorder.hasValueChanged(variable)) {\n        writeVariableTraceLog(variable, 'Changed while in-active');\n        this._addDependentVariablesToUpdateQueue(variable);\n      }\n    }\n  }\n\n  private _variableNeedsUpdate(variable: SceneVariable): boolean {\n    if (variable.isLazy) {\n      return false;\n    }\n\n    if (!variable.validateAndUpdate) {\n      return false;\n    }\n\n    // If we have recorded valid value (even if it has changed since we do not need to re-validate this variable)\n    if (this._variableValueRecorder.hasRecordedValue(variable)) {\n      writeVariableTraceLog(variable, 'Skipping updateAndValidate current value valid');\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * This loops through variablesToUpdate and update all that can.\n   * If one has a dependency that is currently in variablesToUpdate it will be skipped for now.\n   */\n  private _updateNextBatch() {\n    for (const variable of this._variablesToUpdate) {\n      if (!variable.validateAndUpdate) {\n        throw new Error('Variable added to variablesToUpdate but does not have validateAndUpdate');\n      }\n\n      // Ignore it if it's already started\n      if (this._updating.has(variable)) {\n        continue;\n      }\n\n      // Wait for variables that has dependencies that also needs updates\n      if (sceneGraph.hasVariableDependencyInLoadingState(variable)) {\n        continue;\n      }\n\n      const variableToUpdate: VariableUpdateInProgress = {\n        variable,\n      };\n\n      this._updating.set(variable, variableToUpdate);\n      writeVariableTraceLog(variable, 'updateAndValidate started');\n\n      variableToUpdate.subscription = variable.validateAndUpdate().subscribe({\n        next: () => this._validateAndUpdateCompleted(variable),\n        complete: () => this._validateAndUpdateCompleted(variable),\n        error: (err) => this._handleVariableError(variable, err),\n      });\n    }\n  }\n\n  /**\n   * A variable has completed its update process. This could mean that variables that depend on it can now be updated in turn.\n   */\n  private _validateAndUpdateCompleted(variable: SceneVariable) {\n    if (!this._updating.has(variable)) {\n      return;\n    }\n\n    const update = this._updating.get(variable);\n    update?.subscription?.unsubscribe();\n\n    this._updating.delete(variable);\n    this._variablesToUpdate.delete(variable);\n\n    writeVariableTraceLog(variable, 'updateAndValidate completed');\n\n    this._notifyDependentSceneObjects(variable);\n    this._updateNextBatch();\n  }\n\n  public cancel(variable: SceneVariable) {\n    const update = this._updating.get(variable);\n    update?.subscription?.unsubscribe();\n\n    this._updating.delete(variable);\n    this._variablesToUpdate.delete(variable);\n  }\n\n  private _handleVariableError(variable: SceneVariable, err: Error) {\n    const update = this._updating.get(variable);\n    update?.subscription?.unsubscribe();\n\n    this._updating.delete(variable);\n    this._variablesToUpdate.delete(variable);\n\n    variable.setState({ loading: false, error: err.message });\n\n    console.error('SceneVariableSet updateAndValidate error', err);\n\n    writeVariableTraceLog(variable, 'updateAndValidate error', err);\n\n    this._notifyDependentSceneObjects(variable);\n    this._updateNextBatch();\n  }\n\n  private _handleVariableValueChanged(variableThatChanged: SceneVariable) {\n    this._variablesThatHaveChanged.add(variableThatChanged);\n    this._addDependentVariablesToUpdateQueue(variableThatChanged);\n\n    // Ignore this change if it is currently updating\n    if (!this._updating.has(variableThatChanged)) {\n      this._updateNextBatch();\n      this._notifyDependentSceneObjects(variableThatChanged);\n    }\n  }\n\n  /**\n   * This is called by any parent level variable set to notify scene that an update batch is completed.\n   * This is the main mechanism lower level variable set's react to changes on higher levels.\n   */\n  private _handleParentVariableUpdatesCompleted(variable: SceneVariable, hasChanged: boolean) {\n    // First loop through changed variables and add any of our variables that depend on the higher level variable to the update queue\n    if (hasChanged) {\n      this._addDependentVariablesToUpdateQueue(variable);\n    }\n\n    // If we have variables to update but none are currently updating kick of a new update batch\n    if (this._variablesToUpdate.size > 0 && this._updating.size === 0) {\n      this._updateNextBatch();\n    }\n  }\n\n  private _addDependentVariablesToUpdateQueue(variableThatChanged: SceneVariable) {\n    for (const otherVariable of this.state.variables) {\n      if (otherVariable.variableDependency) {\n        if (otherVariable.variableDependency.hasDependencyOn(variableThatChanged.state.name)) {\n          writeVariableTraceLog(otherVariable, 'Added to update queue, dependant variable value changed');\n\n          if (this._updating.has(otherVariable) && otherVariable.onCancel) {\n            otherVariable.onCancel();\n          }\n\n          this._variablesToUpdate.add(otherVariable);\n        }\n      }\n    }\n  }\n\n  /**\n   * Walk scene object graph and update all objects that depend on variables that have changed\n   */\n  private _notifyDependentSceneObjects(variable: SceneVariable) {\n    if (!this.parent) {\n      return;\n    }\n\n    this._traverseSceneAndNotify(this.parent, variable, this._variablesThatHaveChanged.has(variable));\n    this._variablesThatHaveChanged.delete(variable);\n  }\n\n  /**\n   * Recursivly walk the full scene object graph and notify all objects with dependencies that include any of changed variables\n   */\n  private _traverseSceneAndNotify(sceneObject: SceneObject, variable: SceneVariable, hasChanged: boolean) {\n    // No need to notify variables under this SceneVariableSet\n    if (this === sceneObject) {\n      return;\n    }\n\n    // Skip non active scene objects\n    if (!sceneObject.isActive) {\n      return;\n    }\n\n    // If we find a nested SceneVariableSet that has a variable with the same name we stop the traversal\n    if (sceneObject.state.$variables && sceneObject.state.$variables !== this) {\n      const localVar = sceneObject.state.$variables.getByName(variable.state.name);\n      if (localVar) {\n        return;\n      }\n    }\n\n    if (sceneObject.variableDependency) {\n      sceneObject.variableDependency.variableUpdateCompleted(variable, hasChanged);\n    }\n\n    sceneObject.forEachChild((child) => this._traverseSceneAndNotify(child, variable, hasChanged));\n  }\n\n  /**\n   * Return true if variable is waiting to update or currently updating.\n   * It also returns true if a dependency of the variable is loading.\n   *\n   * For example if C depends on variable B which depends on variable A and A is loading this returns true for variable C and B.\n   */\n  public isVariableLoadingOrWaitingToUpdate(variable: SceneVariable) {\n    if (variable.isAncestorLoading && variable.isAncestorLoading()) {\n      return true;\n    }\n\n    if (this._variablesToUpdate.has(variable) || this._updating.has(variable)) {\n      return true;\n    }\n\n    // Last scenario is to check the variable's own dependencies as well\n    return sceneGraph.hasVariableDependencyInLoadingState(variable);\n  }\n}\n\nexport interface VariableUpdateInProgress {\n  variable: SceneVariable;\n  subscription?: Unsubscribable;\n}\n\nfunction writeVariableTraceLog(variable: SceneVariable, message: string, err?: Error) {\n  if (err) {\n    writeSceneLog('SceneVariableSet', `Variable[${variable.state.name}]: ${message}`, err);\n  } else {\n    writeSceneLog('SceneVariableSet', `Variable[${variable.state.name}]: ${message}`);\n  }\n}\n\nclass SceneVariableSetVariableDependencyHandler implements SceneVariableDependencyConfigLike {\n  public constructor(private _variableUpdatesCompleted: (variable: SceneVariable, hasChanged: boolean) => void) {}\n\n  private _emptySet = new Set<string>();\n\n  public getNames(): Set<string> {\n    return this._emptySet;\n  }\n\n  public hasDependencyOn(name: string): boolean {\n    return false;\n  }\n\n  public variableUpdateCompleted(variable: SceneVariable, hasChanged: boolean): void {\n    this._variableUpdatesCompleted(variable, hasChanged);\n  }\n}\n"],"names":[],"mappings":"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"}