{"version":3,"file":"utils.js","sources":["../../../../../src/variables/variants/query/utils.ts"],"sourcesContent":["import { isNumber, sortBy, toLower, uniqBy } from 'lodash';\n\nimport { stringToJsRegex, VariableSort } from '@grafana/data';\n\nimport { VariableValueOption } from '../../types';\n\nexport const metricNamesToVariableValues = (variableRegEx: string, sort: VariableSort, metricNames: any[]) => {\n  let regex;\n  let options: VariableValueOption[] = [];\n\n  if (variableRegEx) {\n    regex = stringToJsRegex(variableRegEx);\n  }\n\n  for (let i = 0; i < metricNames.length; i++) {\n    const item = metricNames[i];\n    let text = item.text === undefined || item.text === null ? item.value : item.text;\n    let value = item.value === undefined || item.value === null ? item.text : item.value;\n\n    if (isNumber(value)) {\n      value = value.toString();\n    }\n\n    if (isNumber(text)) {\n      text = text.toString();\n    }\n\n    if (regex) {\n      const matches = getAllMatches(value, regex);\n      if (!matches.length) {\n        continue;\n      }\n\n      const valueGroup = matches.find((m) => m.groups && m.groups.value);\n      const textGroup = matches.find((m) => m.groups && m.groups.text);\n      const firstMatch = matches.find((m) => m.length > 1);\n      const manyMatches = matches.length > 1 && firstMatch;\n\n      if (valueGroup || textGroup) {\n        value = valueGroup?.groups?.value ?? textGroup?.groups?.text;\n        text = textGroup?.groups?.text ?? valueGroup?.groups?.value;\n      } else if (manyMatches) {\n        for (let j = 0; j < matches.length; j++) {\n          const match = matches[j];\n          options.push({ label: match[1], value: match[1] });\n        }\n        continue;\n      } else if (firstMatch) {\n        text = firstMatch[1];\n        value = firstMatch[1];\n      }\n    }\n\n    options.push({ label: text, value: value });\n  }\n\n  options = uniqBy(options, 'value');\n  return sortVariableValues(options, sort);\n};\n\nconst getAllMatches = (str: string, regex: RegExp): RegExpExecArray[] => {\n  const results: RegExpExecArray[] = [];\n  let matches = null;\n\n  regex.lastIndex = 0;\n\n  do {\n    matches = regex.exec(str);\n    if (matches) {\n      results.push(matches);\n    }\n  } while (regex.global && matches && matches[0] !== '' && matches[0] !== undefined);\n\n  return results;\n};\n\nexport const sortVariableValues = (options: any[], sortOrder: VariableSort) => {\n  if (sortOrder === VariableSort.disabled) {\n    return options;\n  }\n\n  // @ts-ignore\n  const sortByNumeric = (opt) => {\n    if (!opt.text) {\n      return -1;\n    }\n    const matches = opt.text.match(/.*?(\\d+).*/);\n    if (!matches || matches.length < 2) {\n      return -1;\n    } else {\n      return parseInt(matches[1], 10);\n    }\n  };\n\n  // @ts-ignore\n  const sortByNaturalSort = (options) => {\n    //@ts-ignore\n    return options.sort((a, b) => {\n      if (!a.text) {\n        return -1;\n      }\n\n      if (!b.text) {\n        return 1;\n      }\n\n      return a.text.localeCompare(b.text, undefined, { numeric: true });\n    });\n  };\n\n  switch (sortOrder) {\n    case VariableSort.alphabeticalAsc:\n      options = sortBy(options, 'label');\n      break;\n    case VariableSort.alphabeticalDesc:\n      options = sortBy(options, 'label').reverse();\n      break;\n    case VariableSort.numericalAsc:\n      options = sortBy(options, sortByNumeric);\n      break;\n    case VariableSort.numericalDesc:\n      options = sortBy(options, sortByNumeric);\n      options = options.reverse();\n      break;\n    case VariableSort.alphabeticalCaseInsensitiveAsc:\n      options = sortBy(options, (opt) => {\n        return toLower(opt.label);\n      });\n      break;\n    case VariableSort.alphabeticalCaseInsensitiveDesc:\n      options = sortBy(options, (opt) => {\n        return toLower(opt.label);\n      });\n      options = options.reverse();\n      break;\n    case VariableSort.naturalAsc || 7:\n      // Sort by natural sort\n      options = sortByNaturalSort(options);\n      break;\n    case VariableSort.naturalDesc || 8:\n      options = sortByNaturalSort(options);\n      options = options.reverse();\n      break;\n    default:\n      break;\n  }\n  return options;\n};\n"],"names":["options"],"mappings":"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"}