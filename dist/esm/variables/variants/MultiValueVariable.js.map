{"version":3,"file":"MultiValueVariable.js","sources":["../../../../src/variables/variants/MultiValueVariable.ts"],"sourcesContent":["import { isArray, isEqual } from 'lodash';\nimport { map, Observable } from 'rxjs';\n\nimport { ALL_VARIABLE_TEXT, ALL_VARIABLE_VALUE } from '../constants';\n\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneObjectUrlSyncHandler, SceneObjectUrlValues } from '../../core/types';\nimport {\n  SceneVariable,\n  SceneVariableValueChangedEvent,\n  SceneVariableState,\n  ValidateAndUpdateResult,\n  VariableValue,\n  VariableValueOption,\n  VariableValueSingle,\n  CustomVariableValue,\n  VariableCustomFormatterFn,\n} from '../types';\nimport { formatRegistry } from '../interpolation/formatRegistry';\nimport { VariableFormatID } from '@grafana/schema';\nimport { SceneVariableSet } from '../sets/SceneVariableSet';\nimport { setBaseClassState } from '../../utils/utils';\n\nexport interface MultiValueVariableState extends SceneVariableState {\n  value: VariableValue; // old current.text\n  text: VariableValue; // old current.value\n  options: VariableValueOption[];\n  isMulti?: boolean;\n  includeAll?: boolean;\n  defaultToAll?: boolean;\n  allValue?: string;\n  placeholder?: string;\n  /**\n   * For multi value variables, this option controls how many values to show before they are collapsed into +N.\n   * Defaults to 5\n   */\n  maxVisibleValues?: number;\n  noValueOnClear?: boolean;\n  isReadOnly?: boolean;\n}\n\nexport interface VariableGetOptionsArgs {\n  searchFilter?: string;\n}\n\nexport abstract class MultiValueVariable<TState extends MultiValueVariableState = MultiValueVariableState>\n  extends SceneObjectBase<TState>\n  implements SceneVariable<TState>\n{\n  protected _urlSync: SceneObjectUrlSyncHandler = new MultiValueUrlSyncHandler(this);\n\n  /**\n   * Set to true to skip next value validation to maintain the current value even it it's not among the options (ie valid values)\n   */\n  public skipNextValidation?: boolean;\n\n  /**\n   * The source of value options.\n   */\n  public abstract getValueOptions(args: VariableGetOptionsArgs): Observable<VariableValueOption[]>;\n\n  /**\n   * This function is called on when SceneVariableSet is activated or when a dependency changes.\n   */\n  public validateAndUpdate(): Observable<ValidateAndUpdateResult> {\n    return this.getValueOptions({}).pipe(\n      map((options) => {\n        this.updateValueGivenNewOptions(options);\n        return {};\n      })\n    );\n  }\n\n  public onCancel(): void {\n    this.setStateHelper({ loading: false });\n    const sceneVarSet = this.parent as SceneVariableSet;\n    sceneVarSet?.cancel(this);\n  }\n\n  /**\n   * Check if current value is valid given new options. If not update the value.\n   */\n  private updateValueGivenNewOptions(options: VariableValueOption[]) {\n    // Remember current value and text\n    const { value: currentValue, text: currentText, options: oldOptions } = this.state;\n\n    const stateUpdate = this.getStateUpdateGivenNewOptions(options, currentValue, currentText);\n\n    this.interceptStateUpdateAfterValidation(stateUpdate);\n\n    // Perform state change\n    this.setStateHelper(stateUpdate);\n\n    // Publish value changed event only if value changed\n    if (stateUpdate.value !== currentValue || stateUpdate.text !== currentText || (this.hasAllValue() && !isEqual(options, oldOptions))) {\n      this.publishEvent(new SceneVariableValueChangedEvent(this), true);\n    }\n  }\n\n  private getStateUpdateGivenNewOptions(\n    options: VariableValueOption[],\n    currentValue: VariableValue,\n    currentText: VariableValue\n  ): Partial<MultiValueVariableState> {\n    const stateUpdate: Partial<MultiValueVariableState> = {\n      options,\n      loading: false,\n      value: currentValue,\n      text: currentText,\n    };\n\n    if (options.length === 0) {\n      if (this.state.defaultToAll || this.state.includeAll) {\n        stateUpdate.value = ALL_VARIABLE_VALUE;\n        stateUpdate.text = ALL_VARIABLE_TEXT;\n      } else if (this.state.isMulti) {\n        stateUpdate.value = [];\n        stateUpdate.text = [];\n      } else {\n        stateUpdate.value = '';\n        stateUpdate.text = '';\n      }\n\n      return stateUpdate;\n    }\n\n    if (this.hasAllValue()) {\n      if (!this.state.includeAll) {\n        stateUpdate.value = options[0].value;\n        stateUpdate.text = options[0].label;\n        // If multi switch to arrays\n        if (this.state.isMulti) {\n          stateUpdate.value = [stateUpdate.value];\n          stateUpdate.text = [stateUpdate.text];\n        }\n      }\n      return stateUpdate;\n    }\n\n    if (this.state.isMulti) {\n      // If we are a multi valued variable validate the current values are among the options\n      const currentValues = Array.isArray(currentValue) ? currentValue : [currentValue];\n      const validValues = currentValues.filter((v) => options.find((o) => o.value === v));\n      const validTexts = validValues.map((v) => options.find((o) => o.value === v)!.label);\n\n      // If no valid values pick the first option\n      if (validValues.length === 0) {\n        const defaultState = this.getDefaultMultiState(options);\n        stateUpdate.value = defaultState.value;\n        stateUpdate.text = defaultState.text;\n      } else {\n        // We have valid values, if it's different from current valid values update current values\n        if (!isEqual(validValues, currentValue)) {\n          stateUpdate.value = validValues;\n        }\n        if (!isEqual(validTexts, currentText)) {\n          stateUpdate.text = validTexts;\n        }\n      }\n      return stateUpdate;\n    }\n\n    // Single value variable validation\n\n    // Try find by value then text\n    let matchingOption = findOptionMatchingCurrent(currentValue, currentText, options);\n    if (matchingOption) {\n      // When updating the initial state from URL the text property is set the same as value\n      // Here we can correct the text value state\n      stateUpdate.text = matchingOption.label;\n      stateUpdate.value = matchingOption.value;\n    } else {\n      // Current value is found in options\n      if (this.state.defaultToAll) {\n        stateUpdate.value = ALL_VARIABLE_VALUE;\n        stateUpdate.text = ALL_VARIABLE_TEXT;\n      } else {\n        // Current value is not valid. Set to first of the available options\n        stateUpdate.value = options[0].value;\n        stateUpdate.text = options[0].label;\n      }\n    }\n\n    return stateUpdate;\n  }\n\n  /**\n   * Values set by initial URL sync needs to survive the next validation and update.\n   * This function can intercept and make sure those values are preserved.\n   */\n  protected interceptStateUpdateAfterValidation(stateUpdate: Partial<MultiValueVariableState>): void {\n    // If the validation wants to fix the all value (All ==> $__all) then we should let that pass\n    const isAllValueFix = stateUpdate.value === ALL_VARIABLE_VALUE && this.state.text === ALL_VARIABLE_TEXT;\n\n    if (this.skipNextValidation && stateUpdate.value !== this.state.value && stateUpdate.text !== this.state.text && !isAllValueFix) {\n      stateUpdate.value = this.state.value;\n      stateUpdate.text = this.state.text;\n    }\n\n    this.skipNextValidation = false;\n  }\n\n  public getValue(): VariableValue {\n    if (this.hasAllValue()) {\n      if (this.state.allValue) {\n        return new CustomAllValue(this.state.allValue, this);\n      }\n\n      return this.state.options.map((x) => x.value);\n    }\n\n    return this.state.value;\n  }\n\n  public getValueText(): string {\n    if (this.hasAllValue()) {\n      return ALL_VARIABLE_TEXT;\n    }\n\n    if (Array.isArray(this.state.text)) {\n      return this.state.text.join(' + ');\n    }\n\n    return String(this.state.text);\n  }\n\n  public hasAllValue() {\n    const value = this.state.value;\n    return value === ALL_VARIABLE_VALUE || (Array.isArray(value) && value[0] === ALL_VARIABLE_VALUE);\n  }\n\n  public getDefaultMultiState(options: VariableValueOption[]) {\n    if (this.state.defaultToAll) {\n      return { value: [ALL_VARIABLE_VALUE], text: [ALL_VARIABLE_TEXT] };\n    } else if (options.length > 0) {\n      return { value: [options[0].value], text: [options[0].label] };\n    } else {\n      return { value: [], text: [] };\n    }\n  }\n\n  /**\n   * Change the value and publish SceneVariableValueChangedEvent event.\n   */\n  public changeValueTo(value: VariableValue, text?: VariableValue) {\n    // Ignore if there is no change\n    if (value === this.state.value && text === this.state.text) {\n      return;\n    }\n\n    if (!text) {\n      if (Array.isArray(value)) {\n        text = value.map((v) => this.findLabelTextForValue(v));\n      } else {\n        text = this.findLabelTextForValue(value);\n      }\n    }\n\n    if (Array.isArray(value)) {\n      // If we are a multi valued variable is cleared (empty array) we need to set the default empty state\n      if (value.length === 0) {\n        const state = this.getDefaultMultiState(this.state.options);\n        value = state.value;\n        text = state.text;\n      }\n\n      // If last value is the All value then replace all with it\n      if (value[value.length - 1] === ALL_VARIABLE_VALUE) {\n        value = [ALL_VARIABLE_VALUE];\n        text = [ALL_VARIABLE_TEXT];\n      }\n      // If the first value is the ALL value and we have other values, then remove the All value\n      else if (value[0] === ALL_VARIABLE_VALUE && value.length > 1) {\n        value.shift();\n        if (Array.isArray(text)) {\n          text.shift();\n        }\n      }\n    }\n\n    // Do nothing if value and text are the same\n    if (isEqual(value, this.state.value) && isEqual(text, this.state.text)) {\n      return;\n    }\n\n    this.setStateHelper({ value, text, loading: false });\n    this.publishEvent(new SceneVariableValueChangedEvent(this), true);\n  }\n\n  private findLabelTextForValue(value: VariableValueSingle): VariableValueSingle {\n    if (value === ALL_VARIABLE_VALUE) {\n      return ALL_VARIABLE_TEXT;\n    }\n\n    const option = this.state.options.find((x) => x.value === value);\n    if (option) {\n      return option.label;\n    }\n\n    const optionByLabel = this.state.options.find((x) => x.label === value);\n    if (optionByLabel) {\n      return optionByLabel.label;\n    }\n\n    return value;\n  }\n\n  /**\n   * This helper function is to counter the contravariance of setState\n   */\n  private setStateHelper(state: Partial<MultiValueVariableState>) {\n    setBaseClassState<MultiValueVariableState>(this, state);\n  }\n\n  public getOptionsForSelect(): VariableValueOption[] {\n    let options = this.state.options;\n\n    if (this.state.includeAll) {\n      options = [{ value: ALL_VARIABLE_VALUE, label: ALL_VARIABLE_TEXT }, ...options];\n    }\n\n    if (!Array.isArray(this.state.value)) {\n      const current = options.find((x) => x.value === this.state.value);\n      if (!current) {\n        options = [{ value: this.state.value, label: String(this.state.text) }, ...options];\n      }\n    }\n\n    return options;\n  }\n\n  public refreshOptions() {\n    this.getValueOptions({}).subscribe((options) => {\n        this.updateValueGivenNewOptions(options);\n    });\n  }\n\n  /**\n   * Can be used by subclasses to do custom handling of option search based on search input\n   */\n  public onSearchChange?(searchFilter: string): void;\n}\n\n/**\n * Looks for matching option, first by value but as a fallback by text (label).\n */\nfunction findOptionMatchingCurrent(\n  currentValue: VariableValue,\n  currentText: VariableValue,\n  options: VariableValueOption[]\n) {\n  let textMatch: VariableValueOption | undefined;\n\n  for (const item of options) {\n    if (item.value === currentValue) {\n      return item;\n    }\n\n    // No early return here as want to continue to look a value match\n    if (item.label === currentText) {\n      textMatch = item;\n    }\n  }\n\n  return textMatch;\n}\n\nexport class MultiValueUrlSyncHandler<TState extends MultiValueVariableState = MultiValueVariableState>\n  implements SceneObjectUrlSyncHandler\n{\n  public constructor(private _sceneObject: MultiValueVariable<TState>) {}\n\n  private getKey(): string {\n    return `var-${this._sceneObject.state.name}`;\n  }\n\n  public getKeys(): string[] {\n    if (this._sceneObject.state.skipUrlSync) {\n      return [];\n    }\n\n    return [this.getKey()];\n  }\n\n  public getUrlState(): SceneObjectUrlValues {\n    if (this._sceneObject.state.skipUrlSync) {\n      return {};\n    }\n\n    let urlValue: string | string[] | null = null;\n    let value = this._sceneObject.state.value;\n\n    if (Array.isArray(value)) {\n      urlValue = value.map(String);\n    } else if ((this, this._sceneObject.state.isMulti)) {\n      // If we are inMulti mode we must return an array here as otherwise UrlSyncManager will not pass all values (in an array) in updateFromUrl\n      urlValue = [String(value)];\n    } else {\n      urlValue = String(value);\n    }\n\n    return { [this.getKey()]: urlValue };\n  }\n\n  public updateFromUrl(values: SceneObjectUrlValues): void {\n    let urlValue = values[this.getKey()];\n\n    if (urlValue != null) {\n      // This is to be backwards compatible with old url all value\n      if (this._sceneObject.state.includeAll) {\n        urlValue = handleLegacyUrlAllValue(urlValue);\n      }\n\n      // For edge cases where data links include variables with custom all value.\n      // We want the variable to maintain the \"All\" meta value not the actual custom vall value. (Fixes https://github.com/grafana/grafana/issues/28635)\n      if (this._sceneObject.state.allValue && this._sceneObject.state.allValue === urlValue) {\n        urlValue = ALL_VARIABLE_VALUE;\n      }\n\n      /**\n       * Initial URL Sync happens before scene objects are activated.\n       * We need to skip validation in this case to make sure values set via URL are maintained.\n       */\n      if (!this._sceneObject.isActive) {\n        this._sceneObject.skipNextValidation = true;\n      }\n\n      this._sceneObject.changeValueTo(urlValue);\n    }\n  }\n}\n\nfunction handleLegacyUrlAllValue(value: string | string[]) {\n  if (isArray(value) && value[0] === ALL_VARIABLE_TEXT) {\n    return [ALL_VARIABLE_VALUE];\n  } else if (value === ALL_VARIABLE_TEXT) {\n    return ALL_VARIABLE_VALUE;\n  }\n\n  return value;\n}\n\n/**\n * Variable getValue can return this to skip any subsequent formatting.\n * This is useful for custom all values that should not be escaped/formatted.\n */\nexport class CustomAllValue implements CustomVariableValue {\n  public constructor(private _value: string, private _variable: SceneVariable) {}\n\n  public formatter(formatNameOrFn?: string | VariableCustomFormatterFn): string {\n    if (formatNameOrFn === VariableFormatID.Text) {\n      return ALL_VARIABLE_TEXT;\n    }\n\n    if (formatNameOrFn === VariableFormatID.PercentEncode) {\n      return formatRegistry.get(VariableFormatID.PercentEncode).formatter(this._value, [], this._variable);\n    }\n\n    if (formatNameOrFn === VariableFormatID.QueryParam) {\n      return formatRegistry.get(VariableFormatID.QueryParam).formatter(ALL_VARIABLE_TEXT, [], this._variable);\n    }\n\n    return this._value;\n  }\n}\n"],"names":[],"mappings":"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"}