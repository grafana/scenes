{"version":3,"file":"AllVariablesMacro.js","sources":["../../../../src/variables/macros/AllVariablesMacro.ts"],"sourcesContent":["import { SceneObject } from '../../core/types';\nimport { isCustomVariableValue, SceneVariable } from '../types';\nimport { formatRegistry, FormatVariable } from '../interpolation/formatRegistry';\nimport { SkipFormattingValue } from './types';\nimport { VariableFormatID } from '@grafana/schema';\nimport { MultiValueVariable } from '../variants/MultiValueVariable';\nimport { ALL_VARIABLE_VALUE } from '../constants';\n\nexport class AllVariablesMacro implements FormatVariable {\n  public state: { name: string; type: string };\n  private _sceneObject: SceneObject;\n\n  public constructor(name: string, sceneObject: SceneObject) {\n    this.state = { name, type: 'url_variable' };\n    this._sceneObject = sceneObject;\n  }\n\n  public getValue(): SkipFormattingValue {\n    const allVars = collectAllVariables(this._sceneObject);\n    const format = formatRegistry.get(VariableFormatID.QueryParam);\n    const params: string[] = [];\n\n    for (const name of Object.keys(allVars)) {\n      const variable = allVars[name];\n\n      if (variable instanceof MultiValueVariable && variable.hasAllValue() && !variable.state.allValue) {\n        params.push(format.formatter(ALL_VARIABLE_VALUE, [], variable))\n        continue;\n      }\n\n      const value = variable.getValue();\n\n      if (!value) {\n        continue;\n      }\n\n      if (isCustomVariableValue(value)) {\n        params.push(value.formatter(VariableFormatID.QueryParam));\n      } else {\n        params.push(format.formatter(value, [], variable));\n      }\n    }\n\n    return new SkipFormattingValue(params.join('&'));\n  }\n\n  public getValueText?(): string {\n    return '';\n  }\n}\n\nfunction collectAllVariables(\n  sceneObject: SceneObject,\n  record: Record<string, SceneVariable> = {}\n): Record<string, SceneVariable> {\n  if (sceneObject.state.$variables) {\n    for (const variable of sceneObject.state.$variables.state.variables) {\n      if (variable.state.skipUrlSync) {\n        continue;\n      }\n\n      if (!record[variable.state.name]) {\n        record[variable.state.name] = variable;\n      }\n    }\n  }\n\n  if (sceneObject.parent) {\n    collectAllVariables(sceneObject.parent, record);\n  }\n\n  return record;\n}\n"],"names":[],"mappings":";;;;;;;AAQO,MAAM,iBAA4C,CAAA;AAAA,EAIhD,WAAA,CAAY,MAAc,WAA0B,EAAA;AACzD,IAAA,IAAA,CAAK,KAAQ,GAAA,EAAE,IAAM,EAAA,IAAA,EAAM,cAAe,EAAA,CAAA;AAC1C,IAAA,IAAA,CAAK,YAAe,GAAA,WAAA,CAAA;AAAA,GACtB;AAAA,EAEO,QAAgC,GAAA;AACrC,IAAM,MAAA,OAAA,GAAU,mBAAoB,CAAA,IAAA,CAAK,YAAY,CAAA,CAAA;AACrD,IAAA,MAAM,MAAS,GAAA,cAAA,CAAe,GAAI,CAAA,gBAAA,CAAiB,UAAU,CAAA,CAAA;AAC7D,IAAA,MAAM,SAAmB,EAAC,CAAA;AAE1B,IAAA,KAAA,MAAW,IAAQ,IAAA,MAAA,CAAO,IAAK,CAAA,OAAO,CAAG,EAAA;AACvC,MAAA,MAAM,WAAW,OAAQ,CAAA,IAAA,CAAA,CAAA;AAEzB,MAAI,IAAA,QAAA,YAAoB,sBAAsB,QAAS,CAAA,WAAA,MAAiB,CAAC,QAAA,CAAS,MAAM,QAAU,EAAA;AAChG,QAAA,MAAA,CAAO,KAAK,MAAO,CAAA,SAAA,CAAU,oBAAoB,EAAC,EAAG,QAAQ,CAAC,CAAA,CAAA;AAC9D,QAAA,SAAA;AAAA,OACF;AAEA,MAAM,MAAA,KAAA,GAAQ,SAAS,QAAS,EAAA,CAAA;AAEhC,MAAA,IAAI,CAAC,KAAO,EAAA;AACV,QAAA,SAAA;AAAA,OACF;AAEA,MAAI,IAAA,qBAAA,CAAsB,KAAK,CAAG,EAAA;AAChC,QAAA,MAAA,CAAO,IAAK,CAAA,KAAA,CAAM,SAAU,CAAA,gBAAA,CAAiB,UAAU,CAAC,CAAA,CAAA;AAAA,OACnD,MAAA;AACL,QAAA,MAAA,CAAO,KAAK,MAAO,CAAA,SAAA,CAAU,OAAO,EAAC,EAAG,QAAQ,CAAC,CAAA,CAAA;AAAA,OACnD;AAAA,KACF;AAEA,IAAA,OAAO,IAAI,mBAAA,CAAoB,MAAO,CAAA,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA;AAAA,GACjD;AAAA,EAEO,YAAwB,GAAA;AAC7B,IAAO,OAAA,EAAA,CAAA;AAAA,GACT;AACF,CAAA;AAEA,SAAS,mBACP,CAAA,WAAA,EACA,MAAwC,GAAA,EACT,EAAA;AAC/B,EAAI,IAAA,WAAA,CAAY,MAAM,UAAY,EAAA;AAChC,IAAA,KAAA,MAAW,QAAY,IAAA,WAAA,CAAY,KAAM,CAAA,UAAA,CAAW,MAAM,SAAW,EAAA;AACnE,MAAI,IAAA,QAAA,CAAS,MAAM,WAAa,EAAA;AAC9B,QAAA,SAAA;AAAA,OACF;AAEA,MAAA,IAAI,CAAC,MAAA,CAAO,QAAS,CAAA,KAAA,CAAM,IAAO,CAAA,EAAA;AAChC,QAAO,MAAA,CAAA,QAAA,CAAS,MAAM,IAAQ,CAAA,GAAA,QAAA,CAAA;AAAA,OAChC;AAAA,KACF;AAAA,GACF;AAEA,EAAA,IAAI,YAAY,MAAQ,EAAA;AACtB,IAAoB,mBAAA,CAAA,WAAA,CAAY,QAAQ,MAAM,CAAA,CAAA;AAAA,GAChD;AAEA,EAAO,OAAA,MAAA,CAAA;AACT;;;;"}