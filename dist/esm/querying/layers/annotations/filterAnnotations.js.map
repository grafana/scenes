{"version":3,"file":"filterAnnotations.js","sources":["../../../../../src/querying/layers/annotations/filterAnnotations.ts"],"sourcesContent":["import { DataFrame, Field } from '@grafana/data';\nimport { DataLayerFilter } from '../../../core/types';\n\n// Provided SceneDataLayerProviderResult is an array of DataFrames.\nexport function filterAnnotations(data: DataFrame[], filters: DataLayerFilter) {\n  if (!Array.isArray(data) || data.length === 0) {\n    return data;\n  }\n\n  const rows = Array.from({ length: data.length }, () => new Set<number>());\n\n  let frameIdx = 0;\n  for (const frame of data) {\n    for (let index = 0; index < frame.length; index++) {\n      if (rows[frameIdx].has(index)) {\n        continue;\n      }\n      let matching = true;\n\n      // Let's call those standard fields that annotations data frame has.\n      // panelId is a standard field, but it's not always present. It's added to annotations that were added to a particular panel.\n      const panelIdField = frame.fields.find((f) => f.name === 'panelId');\n      // Source field contains annotation definition, with type and filters included.\n      const sourceField = frame.fields.find((f) => f.name === 'source');\n\n      if (sourceField) {\n        // Here we are filtering Grafana annotations that were added to a particular panel.\n        if (panelIdField && sourceField.values[index].type === 'dashboard') {\n          matching = panelIdField.values[index] === filters.panelId;\n        }\n\n        const sourceFilter = sourceField.values[index].filter;\n\n        // Here we are filtering based on annotation filter definition.\n        // Those fitlers are: Show annotation in selected panels, Exclude annotation from selected panels.\n        if (sourceFilter) {\n          const includes = (sourceFilter.ids ?? []).includes(filters.panelId);\n          if (sourceFilter.exclude) {\n            if (includes) {\n              matching = false;\n            }\n          } else if (!includes) {\n            matching = false;\n          }\n        }\n      }\n\n      if (matching) {\n        rows[frameIdx].add(index);\n      }\n    }\n    frameIdx++;\n  }\n\n  const processed: DataFrame[] = [];\n\n  frameIdx = 0;\n  for (const frame of data) {\n    const frameLength = rows[frameIdx].size;\n    const fields: Field[] = [];\n\n    for (const field of frame.fields) {\n      const buffer = [];\n\n      for (let index = 0; index < frame.length; index++) {\n        if (rows[frameIdx].has(index)) {\n          buffer.push(field.values[index]);\n          continue;\n        }\n      }\n\n      fields.push({\n        ...field,\n        values: buffer,\n      });\n    }\n\n    processed.push({\n      ...frame,\n      fields: fields,\n      length: frameLength,\n    });\n    frameIdx++;\n  }\n  return processed;\n}\n"],"names":[],"mappings":"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"}