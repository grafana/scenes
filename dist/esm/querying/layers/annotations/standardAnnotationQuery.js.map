{"version":3,"file":"standardAnnotationQuery.js","sources":["../../../../../src/querying/layers/annotations/standardAnnotationQuery.ts"],"sourcesContent":["import { from, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  AnnotationQuery,\n  CoreApp,\n  DataQueryRequest,\n  DataSourceApi,\n  DataTopic,\n  PanelModel,\n  rangeUtil,\n  ScopedVars,\n} from '@grafana/data';\n\nimport { getRunRequest, getTemplateSrv } from '@grafana/runtime';\nimport { shouldUseLegacyRunner, standardAnnotationSupport } from './standardAnnotationsSupport';\nimport { Dashboard, LoadingState } from '@grafana/schema';\nimport { SceneObject, SceneTimeRangeLike } from '../../../core/types';\nimport { getEnrichedDataRequest } from '../../getEnrichedDataRequest';\nimport { wrapInSafeSerializableSceneObject } from '../../../utils/wrapInSafeSerializableSceneObject';\n\nlet counter = 100;\nfunction getNextRequestId() {\n  return 'AQ' + counter++;\n}\n\nexport interface AnnotationQueryOptions {\n  dashboard: Dashboard;\n  panel: PanelModel;\n}\n\nexport interface AnnotationQueryResults {\n  state: LoadingState;\n  events: AnnotationEvent[];\n}\n\nexport function executeAnnotationQuery(\n  datasource: DataSourceApi,\n  timeRange: SceneTimeRangeLike,\n  query: AnnotationQuery,\n  layer: SceneObject\n): Observable<AnnotationQueryResults> {\n  // Check if we should use the old annotationQuery method\n  if (datasource.annotationQuery && shouldUseLegacyRunner(datasource)) {\n    console.warn('Using deprecated annotationQuery method, please upgrade your datasource');\n    return from(\n      datasource.annotationQuery({\n        range: timeRange.state.value,\n        rangeRaw: timeRange.state.value.raw,\n        annotation: query,\n        dashboard: {\n          getVariables: getTemplateSrv().getVariables\n        },\n      })\n    ).pipe(\n      map((events) => ({\n        state: LoadingState.Done,\n        events,\n      }))\n    );\n  }\n\n  // Standard API for annotations support. Spread in datasource annotations support overrides\n  const processor = {\n    ...standardAnnotationSupport,\n    ...datasource.annotations,\n  };\n\n  const annotationWithDefaults = {\n    // Default query provided by a data source\n    ...processor.getDefaultQuery?.(),\n    ...query,\n  };\n\n  // Data source query migrations\n  const annotation = processor.prepareAnnotation!(annotationWithDefaults);\n  if (!annotation) {\n    return of({\n      state: LoadingState.Done,\n      events: [],\n    });\n  }\n\n  const processedQuery = processor.prepareQuery!(annotation);\n  if (!processedQuery) {\n    return of({\n      state: LoadingState.Done,\n      events: [],\n    });\n  }\n\n  // No more points than pixels\n  const maxDataPoints = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n\n  // Add interval to annotation queries\n  const interval = rangeUtil.calculateInterval(timeRange.state.value, maxDataPoints, datasource.interval);\n\n  const scopedVars: ScopedVars = {\n    __interval: { text: interval.interval, value: interval.interval },\n    __interval_ms: { text: interval.intervalMs.toString(), value: interval.intervalMs },\n    __annotation: { text: annotation.name, value: annotation },\n    __sceneObject: wrapInSafeSerializableSceneObject(layer),\n  };\n\n  const queryRequest: DataQueryRequest = {\n    startTime: Date.now(),\n    requestId: getNextRequestId(),\n    range: timeRange.state.value,\n    maxDataPoints,\n    scopedVars,\n    ...interval,\n    app: CoreApp.Dashboard,\n    timezone: timeRange.getTimeZone(),\n    targets: [\n      {\n        ...processedQuery,\n        refId: 'Anno',\n      },\n    ],\n    ...getEnrichedDataRequest(layer),\n  };\n\n  const runRequest = getRunRequest();\n\n  return runRequest(datasource, queryRequest).pipe(\n    mergeMap((panelData) => {\n      // Some annotations set the topic already\n      const data = panelData?.series.length ? panelData.series : panelData.annotations;\n\n      if (!data?.length) {\n        return of({\n          state: panelData.state,\n          events: [],\n        });\n      }\n\n      // Add data topic to each frame\n      data.forEach((frame) => {\n        // If data topic has not been provided by the data source, make sure it's set correctly\n        if (!frame.meta?.dataTopic) {\n          frame.meta = { ...(frame.meta || {}), dataTopic: DataTopic.Annotations };\n        }\n      });\n\n      return processor.processEvents!(annotation, data).pipe(\n        map((events) => {\n          return {\n            state: panelData.state,\n            events: events || [],\n          };\n        })\n      );\n    })\n  );\n}\n"],"names":["_a"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAI,OAAU,GAAA,GAAA,CAAA;AACd,SAAS,gBAAmB,GAAA;AAC1B,EAAA,OAAO,IAAO,GAAA,OAAA,EAAA,CAAA;AAChB,CAAA;AAYO,SAAS,sBACd,CAAA,UAAA,EACA,SACA,EAAA,KAAA,EACA,KACoC,EAAA;AA1CtC,EAAA,IAAA,EAAA,CAAA;AA4CE,EAAA,IAAI,UAAW,CAAA,eAAA,IAAmB,qBAAsB,CAAA,UAAU,CAAG,EAAA;AACnE,IAAA,OAAA,CAAQ,KAAK,yEAAyE,CAAA,CAAA;AACtF,IAAO,OAAA,IAAA;AAAA,MACL,WAAW,eAAgB,CAAA;AAAA,QACzB,KAAA,EAAO,UAAU,KAAM,CAAA,KAAA;AAAA,QACvB,QAAA,EAAU,SAAU,CAAA,KAAA,CAAM,KAAM,CAAA,GAAA;AAAA,QAChC,UAAY,EAAA,KAAA;AAAA,QACZ,SAAW,EAAA;AAAA,UACT,YAAA,EAAc,gBAAiB,CAAA,YAAA;AAAA,SACjC;AAAA,OACD,CAAA;AAAA,KACD,CAAA,IAAA;AAAA,MACA,GAAA,CAAI,CAAC,MAAY,MAAA;AAAA,QACf,OAAO,YAAa,CAAA,IAAA;AAAA,QACpB,MAAA;AAAA,OACA,CAAA,CAAA;AAAA,KACJ,CAAA;AAAA,GACF;AAGA,EAAM,MAAA,SAAA,GAAY,cACb,CAAA,cAAA,CAAA,EAAA,EAAA,yBAAA,CAAA,EACA,UAAW,CAAA,WAAA,CAAA,CAAA;AAGhB,EAAA,MAAM,sBAAyB,GAAA,cAAA,CAAA,cAAA,CAAA,EAAA,EAAA,CAE1B,EAAU,GAAA,SAAA,CAAA,eAAA,KAAV,IACA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA;AAIL,EAAM,MAAA,UAAA,GAAa,SAAU,CAAA,iBAAA,CAAmB,sBAAsB,CAAA,CAAA;AACtE,EAAA,IAAI,CAAC,UAAY,EAAA;AACf,IAAA,OAAO,EAAG,CAAA;AAAA,MACR,OAAO,YAAa,CAAA,IAAA;AAAA,MACpB,QAAQ,EAAC;AAAA,KACV,CAAA,CAAA;AAAA,GACH;AAEA,EAAM,MAAA,cAAA,GAAiB,SAAU,CAAA,YAAA,CAAc,UAAU,CAAA,CAAA;AACzD,EAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,IAAA,OAAO,EAAG,CAAA;AAAA,MACR,OAAO,YAAa,CAAA,IAAA;AAAA,MACpB,QAAQ,EAAC;AAAA,KACV,CAAA,CAAA;AAAA,GACH;AAGA,EAAA,MAAM,gBAAgB,MAAO,CAAA,UAAA,IAAc,SAAS,eAAgB,CAAA,WAAA,IAAe,SAAS,IAAK,CAAA,WAAA,CAAA;AAGjG,EAAM,MAAA,QAAA,GAAW,UAAU,iBAAkB,CAAA,SAAA,CAAU,MAAM,KAAO,EAAA,aAAA,EAAe,WAAW,QAAQ,CAAA,CAAA;AAEtG,EAAA,MAAM,UAAyB,GAAA;AAAA,IAC7B,YAAY,EAAE,IAAA,EAAM,SAAS,QAAU,EAAA,KAAA,EAAO,SAAS,QAAS,EAAA;AAAA,IAChE,aAAA,EAAe,EAAE,IAAM,EAAA,QAAA,CAAS,WAAW,QAAS,EAAA,EAAG,KAAO,EAAA,QAAA,CAAS,UAAW,EAAA;AAAA,IAClF,cAAc,EAAE,IAAA,EAAM,UAAW,CAAA,IAAA,EAAM,OAAO,UAAW,EAAA;AAAA,IACzD,aAAA,EAAe,kCAAkC,KAAK,CAAA;AAAA,GACxD,CAAA;AAEA,EAAA,MAAM,YAAiC,GAAA,cAAA,CAAA,aAAA,CAAA,cAAA,CAAA;AAAA,IACrC,SAAA,EAAW,KAAK,GAAI,EAAA;AAAA,IACpB,WAAW,gBAAiB,EAAA;AAAA,IAC5B,KAAA,EAAO,UAAU,KAAM,CAAA,KAAA;AAAA,IACvB,aAAA;AAAA,IACA,UAAA;AAAA,GAAA,EACG,QANkC,CAAA,EAAA;AAAA,IAOrC,KAAK,OAAQ,CAAA,SAAA;AAAA,IACb,QAAA,EAAU,UAAU,WAAY,EAAA;AAAA,IAChC,OAAS,EAAA;AAAA,MACP,iCACK,cADL,CAAA,EAAA;AAAA,QAEE,KAAO,EAAA,MAAA;AAAA,OACT,CAAA;AAAA,KACF;AAAA,GAAA,CAAA,EACG,uBAAuB,KAAK,CAAA,CAAA,CAAA;AAGjC,EAAA,MAAM,aAAa,aAAc,EAAA,CAAA;AAEjC,EAAO,OAAA,UAAA,CAAW,UAAY,EAAA,YAAY,CAAE,CAAA,IAAA;AAAA,IAC1C,QAAA,CAAS,CAAC,SAAc,KAAA;AAEtB,MAAA,MAAM,QAAO,SAAW,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAA,MAAA,CAAO,MAAS,IAAA,SAAA,CAAU,SAAS,SAAU,CAAA,WAAA,CAAA;AAErE,MAAI,IAAA,EAAC,6BAAM,MAAQ,CAAA,EAAA;AACjB,QAAA,OAAO,EAAG,CAAA;AAAA,UACR,OAAO,SAAU,CAAA,KAAA;AAAA,UACjB,QAAQ,EAAC;AAAA,SACV,CAAA,CAAA;AAAA,OACH;AAGA,MAAK,IAAA,CAAA,OAAA,CAAQ,CAAC,KAAU,KAAA;AA1I9B,QAAAA,IAAAA,GAAAA,CAAAA;AA4IQ,QAAA,IAAI,GAACA,GAAA,GAAA,KAAA,CAAM,IAAN,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,IAAY,SAAW,CAAA,EAAA;AAC1B,UAAM,KAAA,CAAA,IAAA,GAAO,iCAAM,KAAM,CAAA,IAAA,IAAQ,EAApB,CAAA,EAAA,EAAyB,SAAW,EAAA,SAAA,CAAU,WAAY,EAAA,CAAA,CAAA;AAAA,SACzE;AAAA,OACD,CAAA,CAAA;AAED,MAAA,OAAO,SAAU,CAAA,aAAA,CAAe,UAAY,EAAA,IAAI,CAAE,CAAA,IAAA;AAAA,QAChD,GAAA,CAAI,CAAC,MAAW,KAAA;AACd,UAAO,OAAA;AAAA,YACL,OAAO,SAAU,CAAA,KAAA;AAAA,YACjB,MAAA,EAAQ,UAAU,EAAC;AAAA,WACrB,CAAA;AAAA,SACD,CAAA;AAAA,OACH,CAAA;AAAA,KACD,CAAA;AAAA,GACH,CAAA;AACF;;;;"}