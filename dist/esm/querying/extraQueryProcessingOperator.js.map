{"version":3,"file":"extraQueryProcessingOperator.js","sources":["../../../src/querying/extraQueryProcessingOperator.ts"],"sourcesContent":["import { PanelData } from '@grafana/data';\nimport { forkJoin, of, map, mergeMap, Observable } from 'rxjs';\nimport { ExtraQueryDataProcessor } from './ExtraQueryProvider';\n\n// Passthrough processor for use with ExtraQuerys.\nexport const passthroughProcessor: ExtraQueryDataProcessor = (_, secondary) => of(secondary);\n\n// Factory function which takes a map from request ID to processor functions and\n// returns an rxjs operator which operates on an array of panel data responses.\n//\n// Each secondary response is transformed according to the processor function\n// identified by it's request ID. The processor function is passed the primary\n// response and the secondary response to be processed.\n//\n// The output is a single frame with the primary series and all processed\n// secondary series combined.\nexport const extraQueryProcessingOperator = (processors: Map<string, ExtraQueryDataProcessor>) =>\n  (data: Observable<[PanelData, ...PanelData[]]>) => {\n    return data.pipe(\n      mergeMap(([primary, ...secondaries]) => {\n        const processedSecondaries = secondaries.flatMap((s) => {\n          return processors.get(s.request!.requestId)?.(primary, s) ?? of(s);\n        });\n        return forkJoin([of(primary), ...processedSecondaries]);\n      }),\n      map(([primary, ...processedSecondaries]) => ({\n        ...primary,\n        series: [...primary.series, ...processedSecondaries.flatMap((s) => s.series)],\n        annotations: [...(primary.annotations ?? []), ...processedSecondaries.flatMap((s) => s.annotations ?? [])],\n      }))\n    );\n  }\n"],"names":["_a"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAKO,MAAM,oBAAgD,GAAA,CAAC,CAAG,EAAA,SAAA,KAAc,GAAG,SAAS,EAAA;AAWpF,MAAM,4BAA+B,GAAA,CAAC,UAC3C,KAAA,CAAC,IAAkD,KAAA;AACjD,EAAA,OAAO,IAAK,CAAA,IAAA;AAAA,IACV,QAAS,CAAA,CAAC,CAAC,OAAA,EAAA,GAAY,WAAW,CAAM,KAAA;AACtC,MAAA,MAAM,oBAAuB,GAAA,WAAA,CAAY,OAAQ,CAAA,CAAC,CAAM,KAAA;AApBhE,QAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAqBU,QAAO,OAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,UAAA,CAAW,GAAI,CAAA,CAAA,CAAE,OAAS,CAAA,SAAS,CAAnC,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAuC,OAAS,EAAA,CAAA,CAAA,KAAhD,IAAsD,GAAA,EAAA,GAAA,EAAA,CAAG,CAAC,CAAA,CAAA;AAAA,OAClE,CAAA,CAAA;AACD,MAAA,OAAO,SAAS,CAAC,EAAA,CAAG,OAAO,CAAG,EAAA,GAAG,oBAAoB,CAAC,CAAA,CAAA;AAAA,KACvD,CAAA;AAAA,IACD,GAAI,CAAA,CAAC,CAAC,OAAA,EAAA,GAAY,oBAAoB,CAAG,KAAA;AAzB/C,MAAA,IAAA,EAAA,CAAA;AAyBmD,MAAA,OAAA,aAAA,CAAA,cAAA,CAAA,EAAA,EACxC,OADwC,CAAA,EAAA;AAAA,QAE3C,MAAQ,EAAA,CAAC,GAAG,OAAA,CAAQ,MAAQ,EAAA,GAAG,oBAAqB,CAAA,OAAA,CAAQ,CAAC,CAAA,KAAM,CAAE,CAAA,MAAM,CAAC,CAAA;AAAA,QAC5E,WAAa,EAAA,CAAC,GAAI,CAAA,EAAA,GAAA,OAAA,CAAQ,WAAR,KAAA,IAAA,GAAA,EAAA,GAAuB,EAAC,EAAI,GAAG,oBAAA,CAAqB,OAAQ,CAAA,CAAC,CAAG,KAAA;AA5B1F,UAAAA,IAAAA,GAAAA,CAAAA;AA4B6F,UAAA,OAAA,CAAAA,GAAA,GAAA,CAAA,CAAE,WAAF,KAAA,IAAA,GAAAA,MAAiB,EAAC,CAAA;AAAA,SAAC,CAAC,CAAA;AAAA,OAC3G,CAAA,CAAA;AAAA,KAAE,CAAA;AAAA,GACJ,CAAA;AACF;;;;"}