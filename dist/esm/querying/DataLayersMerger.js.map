{"version":3,"file":"DataLayersMerger.js","sources":["../../../src/querying/DataLayersMerger.ts"],"sourcesContent":["import { filter, finalize, map, merge, mergeAll } from 'rxjs';\nimport { CancelActivationHandler, SceneDataLayerProvider, SceneDataProviderResult } from '../core/types';\n\nexport class DataLayersMerger {\n  private _resultsMap: Map<string, SceneDataProviderResult> = new Map();\n  private _prevLayers: SceneDataLayerProvider[] = [];\n\n  public getMergedStream(layers: SceneDataLayerProvider[]) {\n    if (areDifferentLayers(layers, this._prevLayers)) {\n      this._resultsMap = new Map();\n      this._prevLayers = layers;\n    }\n\n    const resultStreams = layers.map((l) => l.getResultsStream());\n    const deactivationHandlers: CancelActivationHandler[] = [];\n\n    for (const layer of layers) {\n      deactivationHandlers.push(layer.activate());\n    }\n\n    return merge(resultStreams).pipe(\n      mergeAll(),\n      filter((v) => {\n        return this._resultsMap.get(v.origin.state.key!) !== v;\n      }),\n      map((v) => {\n        // Is there a better, rxjs only way to combine multiple same-data-topic observables?\n        // Indexing by origin state key is to make sure we do not duplicate/overwrite data from the different origins\n        this._resultsMap.set(v.origin.state.key!, v);\n        return this._resultsMap.values();\n      }),\n      finalize(() => {\n        deactivationHandlers.forEach((handler) => handler());\n      })\n    );\n  }\n}\n\nfunction areDifferentLayers(a: SceneDataLayerProvider[], b: SceneDataLayerProvider[]) {\n  if (a.length !== b.length) {\n    return true;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n"],"names":[],"mappings":";;AAGO,MAAM,gBAAiB,CAAA;AAAA,EAAvB,WAAA,GAAA;AACL,IAAQ,IAAA,CAAA,WAAA,uBAAwD,GAAI,EAAA,CAAA;AACpE,IAAA,IAAA,CAAQ,cAAwC,EAAC,CAAA;AAAA,GAAA;AAAA,EAE1C,gBAAgB,MAAkC,EAAA;AACvD,IAAA,IAAI,kBAAmB,CAAA,MAAA,EAAQ,IAAK,CAAA,WAAW,CAAG,EAAA;AAChD,MAAK,IAAA,CAAA,WAAA,uBAAkB,GAAI,EAAA,CAAA;AAC3B,MAAA,IAAA,CAAK,WAAc,GAAA,MAAA,CAAA;AAAA,KACrB;AAEA,IAAA,MAAM,gBAAgB,MAAO,CAAA,GAAA,CAAI,CAAC,CAAM,KAAA,CAAA,CAAE,kBAAkB,CAAA,CAAA;AAC5D,IAAA,MAAM,uBAAkD,EAAC,CAAA;AAEzD,IAAA,KAAA,MAAW,SAAS,MAAQ,EAAA;AAC1B,MAAqB,oBAAA,CAAA,IAAA,CAAK,KAAM,CAAA,QAAA,EAAU,CAAA,CAAA;AAAA,KAC5C;AAEA,IAAO,OAAA,KAAA,CAAM,aAAa,CAAE,CAAA,IAAA;AAAA,MAC1B,QAAS,EAAA;AAAA,MACT,MAAA,CAAO,CAAC,CAAM,KAAA;AACZ,QAAA,OAAO,KAAK,WAAY,CAAA,GAAA,CAAI,EAAE,MAAO,CAAA,KAAA,CAAM,GAAI,CAAM,KAAA,CAAA,CAAA;AAAA,OACtD,CAAA;AAAA,MACD,GAAA,CAAI,CAAC,CAAM,KAAA;AAGT,QAAA,IAAA,CAAK,YAAY,GAAI,CAAA,CAAA,CAAE,MAAO,CAAA,KAAA,CAAM,KAAM,CAAC,CAAA,CAAA;AAC3C,QAAO,OAAA,IAAA,CAAK,YAAY,MAAO,EAAA,CAAA;AAAA,OAChC,CAAA;AAAA,MACD,SAAS,MAAM;AACb,QAAA,oBAAA,CAAqB,OAAQ,CAAA,CAAC,OAAY,KAAA,OAAA,EAAS,CAAA,CAAA;AAAA,OACpD,CAAA;AAAA,KACH,CAAA;AAAA,GACF;AACF,CAAA;AAEA,SAAS,kBAAA,CAAmB,GAA6B,CAA6B,EAAA;AACpF,EAAI,IAAA,CAAA,CAAE,MAAW,KAAA,CAAA,CAAE,MAAQ,EAAA;AACzB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAEA,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,CAAA,CAAE,QAAQ,CAAK,EAAA,EAAA;AACjC,IAAI,IAAA,CAAA,CAAE,CAAO,CAAA,KAAA,CAAA,CAAE,CAAI,CAAA,EAAA;AACjB,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AAAA,GACF;AAEA,EAAO,OAAA,KAAA,CAAA;AACT;;;;"}