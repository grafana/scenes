{"version":3,"file":"ExtraQueryProvider.js","sources":["../../../src/querying/ExtraQueryProvider.ts"],"sourcesContent":["import { DataQueryRequest, PanelData } from '@grafana/data';\nimport { Observable } from 'rxjs';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneDataQuery, SceneObjectState } from '../core/types';\n\n// A processor function called by the query runner with responses\n// to any extra requests.\n//\n// A processor function should accept two arguments: the data returned by the\n// _primary_ query, and the data returned by the `ExtraQueryProvider`'s\n// _secondary_ query. It should return a new `PanelData` representing the processed output.\n// It should _not_ modify the primary PanelData.\n//\n// Examples of valid processing include alignment of data between primary and secondary\n// (see the `timeShiftAlignmentProcessor` returned by `SceneTimeRangeCompare`), or doing\n// some more advanced processing such as fitting a time series model on the secondary data.\n//\n// See the docs for `extraQueryProcessingOperator` for more information.\nexport type ExtraQueryDataProcessor = (primary: PanelData, secondary: PanelData) => Observable<PanelData>;\n\n// An extra request that should be run by a query runner, and an optional\n// processor that should be called with the response data.\nexport interface ExtraQueryDescriptor {\n  // The extra request to add.\n  req: DataQueryRequest;\n  // An optional function used to process the data before passing it\n  // to any transformations or visualizations.\n  processor?: ExtraQueryDataProcessor;\n}\n\n// Indicates that this type wants to add extra requests, along with\n// optional processing functions, to a query runner.\nexport interface ExtraQueryProvider<T extends SceneObjectState> extends SceneObjectBase<T> {\n  // Get any extra requests and their required processors.\n  getExtraQueries(request: DataQueryRequest): ExtraQueryDescriptor[];\n  // Determine whether a query should be rerun.\n  //\n  // When the provider's state changes this function will be passed both the previous and the\n  // next state. The implementation can use this to determine whether the change should trigger\n  // a rerun of the query or not.\n  shouldRerun(prev: T, next: T, queries: SceneDataQuery[]): boolean;\n}\n\nexport function isExtraQueryProvider(obj: any): obj is ExtraQueryProvider<any> {\n  return typeof obj === 'object' && 'getExtraQueries' in obj;\n}\n"],"names":[],"mappings":"AA4CO,SAAS,qBAAqB,GAA0C,EAAA;AAC7E,EAAO,OAAA,OAAO,GAAQ,KAAA,QAAA,IAAY,iBAAqB,IAAA,GAAA,CAAA;AACzD;;;;"}