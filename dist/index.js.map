{"version":3,"file":"index.js","sources":["../src/components/SceneApp/utils.ts","../src/components/VizPanel/registerRuntimePanelPlugin.ts","../src/core/SceneComponentWrapper.tsx","../src/core/events.ts","../src/core/SceneObjectRef.ts","../src/core/SceneObjectBase.tsx","../src/core/sceneGraph/utils.ts","../src/querying/RuntimeDataSource.ts","../src/variables/lookupVariable.ts","../src/core/SceneDataNode.ts","../src/services/SceneObjectUrlSyncConfig.ts","../src/utils/parseUrlParam.ts","../src/utils/evaluateTimeRange.ts","../src/utils/date.ts","../src/core/SceneTimeRange.tsx","../src/variables/interpolation/defaults.ts","../src/core/sceneGraph/getTimeRange.ts","../src/variables/types.ts","../src/variables/interpolation/fieldAccessorCache.ts","../src/variables/interpolation/ScopedVarsVariable.ts","../src/variables/constants.ts","../src/variables/interpolation/formatRegistry.ts","../src/variables/macros/types.ts","../src/variables/macros/timeMacros.ts","../src/utils/utils.ts","../src/variables/variants/MultiValueVariable.ts","../src/variables/macros/AllVariablesMacro.ts","../src/variables/macros/templateProxies.ts","../src/variables/macros/dataMacros.ts","../src/variables/macros/urlMacros.ts","../src/variables/macros/contextMacros.ts","../src/variables/macros/index.ts","../src/variables/interpolation/sceneInterpolator.ts","../src/core/types.ts","../src/behaviors/SceneQueryController.ts","../src/utils/writeSceneLog.ts","../src/utils/getDataSource.ts","../src/variables/VariableValueRecorder.ts","../src/querying/ExtraQueryProvider.ts","../src/querying/extraQueryProcessingOperator.ts","../src/querying/layers/annotations/filterAnnotations.ts","../src/querying/getEnrichedDataRequest.ts","../src/variables/adhoc/patchGetAdhocFilters.ts","../src/querying/registerQueryWithController.ts","../src/variables/groupby/findActiveGroupByVariablesByUid.ts","../src/variables/components/getOptionSearcher.ts","../src/variables/components/VariableValueSelect.tsx","../src/variables/groupby/GroupByVariableUrlSyncHandler.ts","../src/variables/getEnrichedFiltersRequest.ts","../src/utils/SafeSerializableSceneObject.ts","../src/utils/wrapInSafeSerializableSceneObject.ts","../src/variables/groupby/GroupByVariable.tsx","../src/utils/LoadingIndicator.tsx","../src/utils/ControlsLabel.tsx","../src/variables/adhoc/getAdhocOptionSearcher.ts","../src/variables/adhoc/AdHocFilterRenderer.tsx","../src/variables/adhoc/AdHocFilterBuilder.tsx","../src/variables/adhoc/AdHocFiltersVariableUrlSyncHandler.ts","../src/variables/adhoc/AdHocFiltersCombobox/DropdownItem.tsx","../src/variables/adhoc/AdHocFiltersCombobox/utils.ts","../src/variables/adhoc/AdHocFiltersCombobox/useFloatingInteractions.ts","../src/variables/adhoc/AdHocFiltersCombobox/AdHocFiltersCombobox.tsx","../src/variables/adhoc/AdHocFiltersCombobox/AdHocFilterPill.tsx","../src/variables/adhoc/AdHocFiltersCombobox/AdHocFiltersAlwaysWipCombobox.tsx","../src/variables/adhoc/AdHocFiltersCombobox/AdHocFiltersComboboxRenderer.tsx","../src/variables/adhoc/AdHocFiltersVariable.tsx","../src/querying/DataLayersMerger.ts","../src/querying/SceneQueryRunner.ts","../src/variables/utils.ts","../src/variables/VariableDependencyConfig.ts","../src/variables/variants/query/guards.ts","../src/variables/variants/query/createQueryVariableRunner.ts","../src/variables/variants/query/utils.ts","../src/variables/variants/query/toMetricFindValues.ts","../src/variables/variants/query/QueryVariable.tsx","../src/core/sceneGraph/sceneGraph.ts","../src/core/sceneGraph/index.ts","../src/services/UniqueUrlKeyMapper.ts","../src/services/utils.ts","../src/variables/variants/guards.ts","../src/behaviors/ActWhenVariableChanged.ts","../src/behaviors/CursorSync.ts","../src/components/VizPanel/VizPanelRenderer.tsx","../src/components/VizPanel/seriesVisibilityConfigFactory.ts","../src/components/VizPanel/colorSeriesConfigFactory.ts","../src/components/VizPanel/VizPanel.tsx","../src/behaviors/LiveNowTimer.ts","../src/utils/getMessageFromError.ts","../src/querying/layers/SceneDataLayerBase.ts","../src/querying/layers/SceneDataLayerControls.tsx","../src/querying/layers/annotations/standardAnnotationsSupport.ts","../src/querying/layers/annotations/standardAnnotationQuery.ts","../src/querying/layers/annotations/utils.ts","../src/querying/layers/annotations/AnnotationsDataLayer.tsx","../src/core/SceneTimeRangeTransformerBase.tsx","../src/core/SceneTimeZoneOverride.tsx","../src/querying/DataProviderProxy.ts","../src/querying/SceneDataLayerSet.tsx","../src/querying/SceneDataTransformer.ts","../src/variables/components/VariableValueSelectors.tsx","../src/variables/components/VariableValueControl.tsx","../src/variables/sets/SceneVariableSet.ts","../src/variables/variants/ConstantVariable.ts","../src/variables/variants/CustomVariable.tsx","../src/variables/variants/DataSourceVariable.tsx","../src/utils/metricTree.ts","../src/variables/variants/TestVariable.tsx","../src/variables/components/VariableValueInput.tsx","../src/variables/variants/TextBoxVariable.tsx","../src/variables/variants/LocalValueVariable.ts","../src/variables/variants/IntervalVariable.tsx","../src/services/UrlSyncManager.ts","../src/services/useUrlSync.ts","../src/services/UrlSyncContextProvider.ts","../src/utils/compatibility/setWindowGrafanaSceneContext.ts","../src/components/EmbeddedScene.tsx","../src/components/VizPanel/VizPanelMenu.tsx","../src/components/layout/grid/constants.ts","../src/components/layout/grid/SceneGridItem.tsx","../src/components/layout/LazyLoader.tsx","../src/components/layout/grid/SceneGridLayoutRenderer.tsx","../src/components/layout/grid/utils.ts","../src/components/layout/grid/SceneGridLayout.tsx","../src/components/layout/grid/SceneGridRow.tsx","../src/components/NestedScene.tsx","../src/components/SceneCanvasText.tsx","../src/components/SceneToolbarButton.tsx","../src/components/SceneTimePicker.tsx","../src/components/SceneRefreshPicker.tsx","../src/utils/getCompareSeriesRefId.ts","../src/components/SceneTimeRangeCompare.tsx","../src/components/SceneByFrameRepeater.tsx","../src/components/SceneByVariableRepeater.tsx","../src/components/SceneControlsSpacer.tsx","../src/components/layout/SceneFlexLayout.tsx","../src/components/layout/CSSGrid/SceneCSSGridLayout.tsx","../src/components/layout/split/Splitter.tsx","../src/components/layout/split/SplitLayoutRenderer.tsx","../src/components/layout/split/SplitLayout.ts","../src/components/SceneApp/SceneApp.tsx","../src/components/SceneReactObject.tsx","../src/components/SceneDebugger/DebugDetails.tsx","../src/components/SceneDebugger/DebugTreeNode.tsx","../src/components/SceneDebugger/SceneDebugger.tsx","../src/components/SceneApp/SceneAppPageView.tsx","../src/components/SceneApp/SceneAppPage.tsx","../src/core/PanelBuilders/StandardFieldConfigBuilders.ts","../src/core/PanelBuilders/FieldConfigOverridesBuilder.ts","../src/core/PanelBuilders/FieldConfigBuilder.ts","../src/core/PanelBuilders/PanelOptionsBuilder.ts","../src/core/PanelBuilders/VizPanelBuilder.ts","../src/core/PanelBuilders/PanelOptionsBuilders.ts","../src/core/PanelBuilders/FieldConfigBuilders.ts","../src/core/PanelBuilders/index.ts","../src/core/PanelBuilders/VizConfigBuilder.ts","../src/core/PanelBuilders/VizConfigBuilders.ts","../src/index.ts"],"sourcesContent":["import React from 'react';\nimport { RouteComponentProps, useLocation } from 'react-router-dom';\nimport { UrlQueryMap, locationUtil, urlUtil } from '@grafana/data';\nimport { locationSearchToObject } from '@grafana/runtime';\nimport { SceneObject } from '../../core/types';\n\nexport function useAppQueryParams(): UrlQueryMap {\n  const location = useLocation();\n  return locationSearchToObject(location.search || '');\n}\n\n/**\n *\n * @param path Url to append query params to\n * @param searchObject Query params of the URL\n * @param preserveParams Query params to preserve\n * @returns Url with query params\n */\nexport function getUrlWithAppState(path: string, searchObject: UrlQueryMap, preserveParams?: string[]): string {\n  // make a copy of params as the renderUrl function mutates the object\n  const paramsCopy = { ...searchObject };\n\n  if (preserveParams) {\n    for (const key of Object.keys(paramsCopy)) {\n      // if param is not in preserveParams, remove it\n      if (!preserveParams.includes(key)) {\n        delete paramsCopy[key];\n      }\n    }\n  }\n\n  return urlUtil.renderUrl(locationUtil.assureBaseUrl(path), paramsCopy);\n}\n\nexport function renderSceneComponentWithRouteProps(sceneObject: SceneObject, routeProps: RouteComponentProps) {\n  // @ts-ignore\n  return React.createElement(sceneObject.Component, { model: sceneObject, routeProps: routeProps });\n}\n","import { PanelPlugin, PluginMetaInfo } from '@grafana/data';\nimport { getPluginImportUtils } from '@grafana/runtime';\n\nexport const runtimePanelPlugins = new Map<string, PanelPlugin>();\n\nexport interface RuntimePanelPluginOptions {\n  /**\n   * Please specify a pluginId that is unlikely to collide with other plugins.\n   */\n  pluginId: string;\n  plugin: PanelPlugin;\n}\n\n/**\n * Provides a way to register runtime panel plugins.\n * Please use a pluginId that is unlikely to collide with other plugins.\n */\nexport function registerRuntimePanelPlugin({ pluginId, plugin }: RuntimePanelPluginOptions) {\n  if (runtimePanelPlugins.has(pluginId)) {\n    throw new Error(`A runtime panel plugin with id ${pluginId} has already been registered`);\n  }\n\n  plugin.meta = {\n    ...plugin.meta,\n    id: pluginId,\n    name: pluginId,\n    module: 'runtime plugin',\n    baseUrl: 'runtime plugin',\n    info: {\n      author: {\n        name: 'Runtime plugin ' + pluginId,\n      },\n      description: '',\n      links: [],\n      logos: {\n        large: '',\n        small: '',\n      },\n      screenshots: [],\n      updated: '',\n      version: '',\n    } as PluginMetaInfo,\n  };\n\n  runtimePanelPlugins.set(pluginId, plugin);\n}\n\nexport function loadPanelPluginSync(pluginId: string) {\n  const { getPanelPluginFromCache } = getPluginImportUtils();\n\n  return getPanelPluginFromCache(pluginId) ?? runtimePanelPlugins.get(pluginId);\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { SceneComponentProps, SceneObject } from './types';\n\nfunction SceneComponentWrapperWithoutMemo<T extends SceneObject>({ model, ...otherProps }: SceneComponentProps<T>) {\n  const Component = (model as any).constructor['Component'] ?? EmptyRenderer;\n  const [_, setValue] = useState(0);\n\n  useEffect(() => {\n    const unsub = model.activate();\n    setValue((prevState) => prevState + 1);\n    return unsub;\n  }, [model]);\n\n  // By not rendering the component until the model is actiavted we make sure that parent models get activated before child models\n  // Otherwise child models would be activated before parents as that is the order of React mount effects.\n  // This also enables static logic to happen inside activate that can change state before the first render.\n  if (!model.isActive) {\n    return null;\n  }\n\n  return <Component {...otherProps} model={model} />;\n}\n\nexport const SceneComponentWrapper = React.memo(SceneComponentWrapperWithoutMemo);\n\nfunction EmptyRenderer<T>(_: SceneComponentProps<T>): React.ReactElement | null {\n  return null;\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { SceneObject, SceneObjectState } from './types';\n\nexport interface SceneObjectStateChangedPayload<TState extends SceneObjectState = SceneObjectState> {\n  prevState: TState;\n  newState: TState;\n  partialUpdate: Partial<TState>;\n  changedObject: SceneObject<TState>;\n}\n\nexport class SceneObjectStateChangedEvent extends BusEventWithPayload<SceneObjectStateChangedPayload> {\n  public static readonly type = 'scene-object-state-change';\n}\n\ntype UserActionEventType =\n  | 'panel-description-shown'\n  | 'panel-status-message-clicked'\n  | 'panel-cancel-query-clicked'\n  | 'panel-menu-shown';\n\ninterface UserActionEventPayload {\n  origin: SceneObject;\n  interaction: UserActionEventType;\n}\nexport class UserActionEvent extends BusEventWithPayload<UserActionEventPayload> {\n  public static readonly type = 'scene-object-user-action';\n}\n","export class SceneObjectRef<T> {\n  #ref: T;\n\n  public constructor(ref: T) {\n    this.#ref = ref;\n  }\n\n  public resolve(): T {\n    return this.#ref;\n  }\n}\n","import { useEffect, useState } from 'react';\nimport { Subscription, Unsubscribable } from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { BusEvent, BusEventHandler, BusEventType, EventBus, EventBusSrv } from '@grafana/data';\nimport {\n  SceneObject,\n  SceneComponent,\n  SceneObjectUrlSyncHandler,\n  SceneStateChangedHandler,\n  SceneActivationHandler,\n  SceneDeactivationHandler,\n  CancelActivationHandler,\n  SceneObjectState,\n  UseStateHookOptions,\n  SceneStatelessBehavior,\n} from './types';\n\nimport { SceneComponentWrapper } from './SceneComponentWrapper';\nimport { SceneObjectStateChangedEvent } from './events';\nimport { cloneSceneObject } from './sceneGraph/utils';\nimport { SceneVariableDependencyConfigLike } from '../variables/types';\nimport { SceneObjectRef } from './SceneObjectRef';\n\nexport abstract class SceneObjectBase<TState extends SceneObjectState = SceneObjectState>\n  implements SceneObject<TState>\n{\n  private _isActive = false;\n  private _state: TState;\n  private _activationHandlers: SceneActivationHandler[] = [];\n  private _deactivationHandlers = new Map<object, SceneDeactivationHandler>();\n  private _ref?: SceneObjectRef<this>;\n\n  protected _events?: EventBus;\n  protected _parent?: SceneObject;\n  protected _subs = new Subscription();\n  protected _refCount = 0;\n\n  protected _variableDependency: SceneVariableDependencyConfigLike | undefined;\n  protected _urlSync: SceneObjectUrlSyncHandler | undefined;\n\n  public constructor(state: TState) {\n    if (!state.key) {\n      state.key = uuidv4();\n    }\n\n    this._events = new EventBusSrv();\n\n    this._state = Object.freeze(state);\n    this._setParent(this._state);\n  }\n\n  /** Current state */\n  public get state(): TState {\n    return this._state;\n  }\n\n  /** True if currently being active (ie displayed for visual objects) */\n  public get isActive(): boolean {\n    return this._isActive;\n  }\n\n  /** Returns the parent, undefined for root object */\n  public get parent(): SceneObject | undefined {\n    return this._parent;\n  }\n\n  /** Returns variable dependency config */\n  public get variableDependency(): SceneVariableDependencyConfigLike | undefined {\n    return this._variableDependency;\n  }\n\n  /** Returns url sync config */\n  public get urlSync(): SceneObjectUrlSyncHandler | undefined {\n    return this._urlSync;\n  }\n\n  /**\n   * Used in render functions when rendering a SceneObject.\n   * Wraps the component in an EditWrapper that handles edit mode\n   */\n  public get Component(): SceneComponent<this> {\n    return SceneComponentWrapper as SceneComponent<this>;\n  }\n\n  private _setParent(state: Partial<TState>) {\n    forEachChild(state, (child) => {\n      // If we already have a parent and it's not this, then we likely have a bug\n      if (child._parent && child._parent !== this) {\n        console.warn(\n          'SceneObject already has a parent set that is different from the new parent. You cannot share the same SceneObject instance in multiple scenes or in multiple different places of the same scene graph. Use SceneObject.clone() to duplicate a SceneObject or store a state key reference and use sceneGraph.findObject to locate it.',\n          child,\n          this\n        );\n      }\n      child._parent = this;\n    });\n  }\n\n  /**\n   * Sometimes you want to move one instance to another parent.\n   * This is a way to do that without getting the console warning.\n   */\n  public clearParent() {\n    this._parent = undefined;\n  }\n\n  /**\n   * Subscribe to the scene state subject\n   **/\n  public subscribeToState(handler: SceneStateChangedHandler<TState>): Unsubscribable {\n    return this._events!.subscribe(SceneObjectStateChangedEvent, (event) => {\n      if (event.payload.changedObject === this) {\n        handler(event.payload.newState as TState, event.payload.prevState as TState);\n      }\n    });\n  }\n\n  /**\n   * Subscribe to the scene event\n   **/\n  public subscribeToEvent<T extends BusEvent>(eventType: BusEventType<T>, handler: BusEventHandler<T>): Unsubscribable {\n    return this._events!.subscribe(eventType, handler);\n  }\n\n  public setState(update: Partial<TState>) {\n    const prevState = this._state;\n    const newState: TState = {\n      ...this._state,\n      ...update,\n    };\n\n    this._state = Object.freeze(newState);\n    this._setParent(update);\n\n    // Handles cases when $data, $timeRange, or $variables are changed\n    this._handleActivationOfChangedStateProps(prevState, newState);\n\n    // Bubble state change event. This is event is subscribed to by UrlSyncManager and UndoManager\n    this.publishEvent(\n      new SceneObjectStateChangedEvent({\n        prevState,\n        newState,\n        partialUpdate: update,\n        changedObject: this,\n      }),\n      true\n    );\n  }\n\n  /**\n   * This handles activation and deactivation of $data, $timeRange and $variables when they change\n   * during the active phase of the scene object.\n   */\n  private _handleActivationOfChangedStateProps(prevState: TState, newState: TState) {\n    if (!this.isActive) {\n      return;\n    }\n\n    if (prevState.$behaviors !== newState.$behaviors) {\n      this._handleChangedBehaviors(prevState.$behaviors, newState.$behaviors);\n    }\n\n    if (prevState.$data !== newState.$data) {\n      this._handleChangedStateActivation(prevState.$data, newState.$data);\n    }\n\n    if (prevState.$variables !== newState.$variables) {\n      this._handleChangedStateActivation(prevState.$variables, newState.$variables);\n    }\n\n    if (prevState.$timeRange !== newState.$timeRange) {\n      this._handleChangedStateActivation(prevState.$timeRange, newState.$timeRange);\n    }\n  }\n\n  private _handleChangedStateActivation(oldValue: SceneObject | undefined, newValue: SceneObject | undefined) {\n    if (oldValue) {\n      const deactivationHandler = this._deactivationHandlers.get(oldValue);\n      if (deactivationHandler) {\n        deactivationHandler();\n        this._deactivationHandlers.delete(oldValue);\n      }\n    }\n\n    if (newValue) {\n      this._deactivationHandlers.set(newValue, newValue.activate());\n    }\n  }\n\n  private _handleChangedBehaviors(\n    oldValue: Array<SceneObject | SceneStatelessBehavior> | undefined,\n    newValue: Array<SceneObject | SceneStatelessBehavior> | undefined\n  ) {\n    // Handle removed behaviors\n    if (oldValue) {\n      for (const oldBehavior of oldValue) {\n        if (!newValue || !newValue.includes(oldBehavior)) {\n          const deactivationHandler = this._deactivationHandlers.get(oldBehavior);\n          if (deactivationHandler) {\n            deactivationHandler();\n            this._deactivationHandlers.delete(oldBehavior);\n          }\n        }\n      }\n    }\n\n    // Handle new behaviors\n    if (newValue) {\n      for (const newBehavior of newValue) {\n        if (!oldValue || !oldValue.includes(newBehavior)) {\n          this._activateBehavior(newBehavior);\n        }\n      }\n    }\n  }\n\n  /*\n   * Publish an event and optionally bubble it up the scene\n   **/\n  public publishEvent(event: BusEvent, bubble?: boolean) {\n    this._events!.publish(event);\n\n    if (bubble && this.parent) {\n      this.parent.publishEvent(event, bubble);\n    }\n  }\n\n  public getRoot(): SceneObject {\n    return !this._parent ? this : this._parent.getRoot();\n  }\n\n  private _internalActivate() {\n    this._isActive = true;\n\n    const { $data, $variables, $timeRange, $behaviors } = this.state;\n\n    this._activationHandlers.forEach((handler) => {\n      const result = handler();\n      if (result) {\n        this._deactivationHandlers.set(result, result);\n      }\n    });\n\n    if ($timeRange && !$timeRange.isActive) {\n      this._deactivationHandlers.set($timeRange, $timeRange.activate());\n    }\n\n    if ($variables && !$variables.isActive) {\n      this._deactivationHandlers.set($variables, $variables.activate());\n    }\n\n    if ($data && !$data.isActive) {\n      this._deactivationHandlers.set($data, $data.activate());\n    }\n\n    if ($behaviors) {\n      for (const behavior of $behaviors) {\n        this._activateBehavior(behavior);\n      }\n    }\n  }\n\n  private _activateBehavior(behavior: SceneObject | SceneStatelessBehavior): SceneDeactivationHandler | void {\n    if (behavior instanceof SceneObjectBase) {\n      this._deactivationHandlers.set(behavior, behavior.activate());\n    } else if (typeof behavior === 'function') {\n      const deactivate = behavior(this);\n      if (deactivate) {\n        this._deactivationHandlers.set(behavior, deactivate);\n      }\n    }\n  }\n\n  /**\n   * This is primarily called from SceneComponentWrapper when the SceneObject's Component is mounted.\n   * But in some scenarios this can also be called directly from another scene object. When called manually from another scene object\n   * make sure to call the returned function when the source scene object is deactivated.\n   */\n  public activate(): CancelActivationHandler {\n    if (!this.isActive) {\n      this._internalActivate();\n    }\n\n    this._refCount++;\n\n    let called = false;\n\n    return () => {\n      this._refCount--;\n\n      if (called) {\n        const msg = `SceneObject cancelation handler returned by activate() called a second time`;\n        throw new Error(msg);\n      }\n\n      called = true;\n\n      if (this._refCount === 0) {\n        this._internalDeactivate();\n      }\n    };\n  }\n\n  /**\n   * Called by the SceneComponentWrapper when the react component is unmounted.\n   * Don't override this, instead use addActivationHandler. The activation handler can return a deactivation handler.\n   */\n  private _internalDeactivate(): void {\n    this._isActive = false;\n\n    for (let handler of this._deactivationHandlers.values()) {\n      handler();\n    }\n\n    this._deactivationHandlers.clear();\n\n    // Clear subscriptions and listeners\n    this._events!.removeAllListeners();\n    this._subs.unsubscribe();\n    this._subs = new Subscription();\n  }\n\n  /**\n   * Utility hook to get and subscribe to state\n   */\n  public useState(): TState {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useSceneObjectState(this);\n  }\n\n  /** Force a re-render, should only be needed when variable values change */\n  public forceRender(): void {\n    this.setState({});\n  }\n\n  /**\n   * Will create new SceneObject with shallow-cloned state, but all state items of type SceneObject are deep cloned\n   */\n  public clone(withState?: Partial<TState>): this {\n    return cloneSceneObject(this, withState);\n  }\n\n  /**\n   * Allows external code to register code that is executed on activate and deactivate. This allow you\n   * to wire up scene objects that need to respond to state changes in other objects from the outside.\n   **/\n  public addActivationHandler(handler: SceneActivationHandler) {\n    this._activationHandlers.push(handler);\n  }\n\n  /**\n   * Loop through state and call callback for each direct child scene object.\n   * Checks 1 level deep properties and arrays. So a scene object hidden in a nested plain object will not be detected.\n   */\n  public forEachChild(callback: (child: SceneObjectBase) => void) {\n    forEachChild(this.state, callback);\n  }\n\n  /** Returns a SceneObjectRef that will resolve to this object */\n  public getRef(): SceneObjectRef<this> {\n    if (!this._ref) {\n      this._ref = new SceneObjectRef(this);\n    }\n\n    return this._ref;\n  }\n}\n\n/**\n * This hook is always returning model.state instead of a useState that remembers the last state emitted on the subject\n * The reason for this is so that if the model instance change this function will always return the latest state.\n */\nexport function useSceneObjectState<TState extends SceneObjectState>(\n  model: SceneObject<TState>,\n  options?: UseStateHookOptions\n): TState {\n  const [_, setState] = useState<TState>(model.state);\n  const stateAtFirstRender = model.state;\n  const shouldActivateOrKeepAlive = options?.shouldActivateOrKeepAlive ?? false;\n\n  useEffect(() => {\n    let unactivate: CancelActivationHandler | undefined;\n\n    if (shouldActivateOrKeepAlive) {\n      unactivate = model.activate();\n    }\n\n    const s = model.subscribeToState((state) => {\n      setState(state);\n    });\n\n    // Re-render component if the state changed between first render and useEffect (mount)\n    if (model.state !== stateAtFirstRender) {\n      setState(model.state);\n    }\n\n    return () => {\n      s.unsubscribe();\n\n      if (unactivate) {\n        unactivate();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [model, shouldActivateOrKeepAlive]);\n\n  return model.state;\n}\n\nfunction forEachChild<T extends object>(state: T, callback: (child: SceneObjectBase) => void) {\n  for (const propValue of Object.values(state)) {\n    if (propValue instanceof SceneObjectBase) {\n      callback(propValue);\n    }\n\n    if (Array.isArray(propValue)) {\n      for (const child of propValue) {\n        if (child instanceof SceneObjectBase) {\n          callback(child);\n        }\n      }\n    }\n  }\n}\n","import { SceneObject, SceneObjectState } from '../types';\n\nimport { SceneObjectBase } from '../SceneObjectBase';\nimport { SceneObjectRef } from '../SceneObjectRef';\n\n/**\n * Will create new SceneItem with shalled cloned state, but all states items of type SceneObject are deep cloned\n */\nexport function cloneSceneObject<T extends SceneObjectBase<TState>, TState extends SceneObjectState>(\n  sceneObject: SceneObjectBase<TState>,\n  withState?: Partial<TState>\n): T {\n  const clonedState = cloneSceneObjectState(sceneObject.state, withState);\n  return new (sceneObject.constructor as any)(clonedState);\n}\n\nexport function cloneSceneObjectState<TState extends SceneObjectState>(\n  sceneState: TState,\n  withState?: Partial<TState>\n): TState {\n  const clonedState = { ...sceneState };\n\n  // Clone any SceneItems in state\n  for (const key in clonedState) {\n    const propValue = clonedState[key];\n    if (propValue instanceof SceneObjectBase) {\n      clonedState[key] = propValue.clone();\n    }\n\n    if (propValue instanceof SceneObjectRef) {\n      throw new Error('Cannot clone a SceneObject with a SceneObjectRef in state');\n    }\n\n    // Clone scene objects in arrays\n    if (Array.isArray(propValue)) {\n      const newArray: any = [];\n      for (const child of propValue) {\n        if (child instanceof SceneObjectBase) {\n          newArray.push(child.clone());\n        } else {\n          newArray.push(child);\n        }\n      }\n      clonedState[key] = newArray;\n    }\n  }\n\n  Object.assign(clonedState, withState);\n\n  return clonedState;\n}\n\n/** Walks up the scene graph, returning the first non-undefined result of `extract` */\nexport function getClosest<T>(sceneObject: SceneObject, extract: (s: SceneObject) => T | undefined): T | undefined {\n  let curSceneObject: SceneObject | undefined = sceneObject;\n  let extracted: T | undefined = undefined;\n\n  while (curSceneObject && !extracted) {\n    extracted = extract(curSceneObject);\n    curSceneObject = curSceneObject.parent;\n  }\n\n  return extracted;\n}\n","import { DataQuery, DataSourceApi, PluginType } from '@grafana/data';\n\nexport abstract class RuntimeDataSource<TQuery extends DataQuery = DataQuery> extends DataSourceApi<TQuery> {\n  public constructor(pluginId: string, uid: string) {\n    super({\n      name: 'RuntimeDataSource-' + pluginId,\n      uid: uid,\n      type: pluginId,\n      id: 1,\n      readOnly: true,\n      jsonData: {},\n      access: 'direct',\n      meta: {\n        id: pluginId,\n        name: 'RuntimeDataSource-' + pluginId,\n        type: PluginType.datasource,\n        info: {\n          author: {\n            name: '',\n          },\n          description: '',\n          links: [],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        module: '',\n        baseUrl: '',\n      },\n    });\n  }\n\n  public testDatasource(): Promise<any> {\n    return Promise.resolve({});\n  }\n}\n\nexport const runtimeDataSources = new Map<string, RuntimeDataSource>();\n\nexport interface RuntimeDataSourceOptions {\n  dataSource: RuntimeDataSource;\n}\n\n/**\n * Provides a way to register runtime panel plugins.\n * Please use a pluginId that is unlikely to collide with other plugins.\n */\nexport function registerRuntimeDataSource({ dataSource }: RuntimeDataSourceOptions) {\n  if (runtimeDataSources.has(dataSource.uid)) {\n    throw new Error(`A runtime data source with uid ${dataSource.uid} has already been registered`);\n  }\n\n  runtimeDataSources.set(dataSource.uid, dataSource);\n}\n","import { SceneObject } from '../core/types';\nimport { SceneVariable } from './types';\n\n/**\n * Will walk the scene object graph up to the root looking for the first variable with the specified name\n */\nexport function lookupVariable(name: string, sceneObject: SceneObject): SceneVariable | null {\n  const variables = sceneObject.state.$variables;\n  if (!variables) {\n    if (sceneObject.parent) {\n      return lookupVariable(name, sceneObject.parent);\n    } else {\n      return null;\n    }\n  }\n\n  const found = variables.getByName(name);\n  if (found) {\n    return found;\n  } else if (sceneObject.parent) {\n    return lookupVariable(name, sceneObject.parent);\n  }\n\n  return null;\n}\n","import { getDefaultTimeRange, PanelData } from '@grafana/data';\nimport { LoadingState } from '@grafana/schema';\nimport { of } from 'rxjs';\n\nimport { SceneObjectBase } from './SceneObjectBase';\nimport { SceneDataProvider, SceneDataProviderResult, SceneDataState } from './types';\n\nexport interface SceneDataNodeState extends SceneDataState {\n  data: PanelData;\n}\n\nexport class SceneDataNode extends SceneObjectBase<SceneDataNodeState> implements SceneDataProvider {\n  public constructor(state?: Partial<SceneDataNodeState>) {\n    super({\n      data: emptyPanelData,\n      ...state,\n    });\n  }\n\n  public getResultsStream() {\n    const result: SceneDataProviderResult = {\n      origin: this,\n      data: this.state.data,\n    };\n\n    return of(result);\n  }\n}\n\nexport const emptyPanelData: PanelData = {\n  state: LoadingState.Done,\n  series: [],\n  timeRange: getDefaultTimeRange(),\n};\n","import { SceneObjectUrlSyncHandler, SceneObjectWithUrlSync, SceneObjectUrlValues } from '../core/types';\n\ninterface SceneObjectUrlSyncConfigOptions {\n  keys: string[] | (() => string[]);\n}\n\nexport class SceneObjectUrlSyncConfig implements SceneObjectUrlSyncHandler {\n  private _keys: string[] | (() => string[]);\n  private _nextChangeShouldAddHistoryStep = false;\n\n  public constructor(private _sceneObject: SceneObjectWithUrlSync, _options: SceneObjectUrlSyncConfigOptions) {\n    this._keys = _options.keys;\n  }\n\n  public getKeys(): string[] {\n    if (typeof this._keys === 'function') {\n      return this._keys();\n    }\n\n    return this._keys;\n  }\n\n  public getUrlState(): SceneObjectUrlValues {\n    return this._sceneObject.getUrlState();\n  }\n\n  public updateFromUrl(values: SceneObjectUrlValues): void {\n    this._sceneObject.updateFromUrl(values);\n  }\n\n  public performBrowserHistoryAction(callback: () => void) {\n    this._nextChangeShouldAddHistoryStep = true;\n    callback();\n    this._nextChangeShouldAddHistoryStep = false;\n  }\n\n  public shouldCreateHistoryStep(values: SceneObjectUrlValues): boolean {\n    return this._nextChangeShouldAddHistoryStep;\n  }\n}\n","import { toUtc } from '@grafana/data';\nimport { SceneObjectUrlValue } from '../core/types';\n\nconst INTERVAL_STRING_REGEX = /^\\d+[yYmMsSwWhHdD]$/;\n\nexport function parseUrlParam(value: SceneObjectUrlValue): string | null {\n  if (typeof value !== 'string') {\n    return null;\n  }\n\n  if (value.indexOf('now') !== -1) {\n    return value;\n  }\n\n  if (INTERVAL_STRING_REGEX.test(value)) {\n    return value;\n  }\n\n  if (value.length === 8) {\n    const utcValue = toUtc(value, 'YYYYMMDD');\n    if (utcValue.isValid()) {\n      return utcValue.toISOString();\n    }\n  } else if (value.length === 15) {\n    const utcValue = toUtc(value, 'YYYYMMDDTHHmmss');\n    if (utcValue.isValid()) {\n      return utcValue.toISOString();\n    }\n  } else if (value.length === 19) {\n    const utcValue = toUtc(value, 'YYYY-MM-DD HH:mm:ss');\n    if (utcValue.isValid()) {\n      return utcValue.toISOString();\n    }\n  } else if (value.length === 24) {\n    const utcValue = toUtc(value);\n    return utcValue.toISOString();\n  }\n\n  const epoch = parseInt(value, 10);\n  if (!isNaN(epoch)) {\n    return toUtc(epoch).toISOString();\n  }\n\n  return null;\n}\n","import { dateMath, DateTime, TimeRange } from '@grafana/data';\nimport { TimeZone } from '@grafana/schema';\n\nexport function evaluateTimeRange(\n  from: string | DateTime,\n  to: string | DateTime,\n  timeZone: TimeZone,\n  fiscalYearStartMonth?: number,\n  delay?: string\n): TimeRange {\n  const hasDelay = delay && to === 'now';\n\n  return {\n    from: dateMath.parse(from, false, timeZone, fiscalYearStartMonth)!,\n    to: dateMath.parse(hasDelay ? 'now-' + delay : to, true, timeZone, fiscalYearStartMonth)!,\n    raw: {\n      from: from,\n      to: to,\n    },\n  };\n}\n","import { isDateTime, dateMath, dateTimeParse } from '@grafana/data';\nimport { TimeZone } from '@grafana/schema';\n\nexport function isValid(value: string, roundUp?: boolean, timeZone?: TimeZone): boolean {\n  if (isDateTime(value)) {\n    return value.isValid();\n  }\n\n  if (dateMath.isMathString(value)) {\n    return dateMath.isValid(value);\n  }\n\n  const parsed = dateTimeParse(value, { roundUp, timeZone });\n  return parsed.isValid();\n}\n","import { getTimeZone, rangeUtil, TimeRange, toUtc } from '@grafana/data';\nimport { TimeZone } from '@grafana/schema';\n\nimport { SceneObjectUrlSyncConfig } from '../services/SceneObjectUrlSyncConfig';\n\nimport { SceneObjectBase } from './SceneObjectBase';\nimport { SceneTimeRangeLike, SceneTimeRangeState, SceneObjectUrlValues } from './types';\nimport { getClosest } from './sceneGraph/utils';\nimport { parseUrlParam } from '../utils/parseUrlParam';\nimport { evaluateTimeRange } from '../utils/evaluateTimeRange';\nimport { locationService, RefreshEvent } from '@grafana/runtime';\nimport { isValid } from '../utils/date';\n\nexport class SceneTimeRange extends SceneObjectBase<SceneTimeRangeState> implements SceneTimeRangeLike {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['from', 'to', 'timezone', 'time', 'time.window'] });\n\n  public constructor(state: Partial<SceneTimeRangeState> = {}) {\n    const from = state.from && isValid(state.from) ? state.from : 'now-6h';\n    const to = state.to && isValid(state.to) ? state.to : 'now';\n\n    const timeZone = state.timeZone;\n    const value = evaluateTimeRange(\n      from,\n      to,\n      timeZone || getTimeZone(),\n      state.fiscalYearStartMonth,\n      state.UNSAFE_nowDelay\n    );\n    const refreshOnActivate = state.refreshOnActivate ?? { percent: 10 };\n    super({ from, to, timeZone, value, refreshOnActivate, ...state });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate() {\n    // When SceneTimeRange has no time zone provided, find closest source of time zone and subscribe to it\n    if (!this.state.timeZone) {\n      const timeZoneSource = this.getTimeZoneSource();\n      if (timeZoneSource !== this) {\n        this._subs.add(\n          timeZoneSource.subscribeToState((n, p) => {\n            if (n.timeZone !== undefined && n.timeZone !== p.timeZone) {\n              this.setState({\n                value: evaluateTimeRange(\n                  this.state.from,\n                  this.state.to,\n                  timeZoneSource.getTimeZone(),\n                  this.state.fiscalYearStartMonth,\n                  this.state.UNSAFE_nowDelay\n                ),\n              });\n            }\n          })\n        );\n      }\n    }\n\n    if (rangeUtil.isRelativeTimeRange(this.state.value.raw)) {\n      this.refreshIfStale();\n    }\n  }\n\n  private refreshIfStale() {\n    let ms;\n    if (this.state?.refreshOnActivate?.percent !== undefined) {\n      ms = this.calculatePercentOfInterval(this.state.refreshOnActivate.percent);\n    }\n    if (this.state?.refreshOnActivate?.afterMs !== undefined) {\n      ms = Math.min(this.state.refreshOnActivate.afterMs, ms ?? Infinity);\n    }\n    if (ms !== undefined) {\n      this.refreshRange(ms);\n    }\n  }\n\n  /**\n   * Will traverse up the scene graph to find the closest SceneTimeRangeLike with time zone set\n   */\n  private getTimeZoneSource() {\n    if (!this.parent || !this.parent.parent) {\n      return this;\n    }\n    // Find the closest source of time zone\n    const source = getClosest<SceneTimeRangeLike>(this.parent.parent, (o) => {\n      if (o.state.$timeRange && o.state.$timeRange.state.timeZone) {\n        return o.state.$timeRange;\n      }\n      return undefined;\n    });\n\n    if (!source) {\n      return this;\n    }\n\n    return source;\n  }\n\n  /**\n   * Refreshes time range if it is older than the invalidation interval\n   * @param refreshAfterMs invalidation interval (milliseconds)\n   * @private\n   */\n  private refreshRange(refreshAfterMs: number) {\n    const value = evaluateTimeRange(\n      this.state.from,\n      this.state.to,\n      this.state.timeZone ?? getTimeZone(),\n      this.state.fiscalYearStartMonth,\n      this.state.UNSAFE_nowDelay\n    );\n\n    const diff = value.to.diff(this.state.value.to, 'milliseconds');\n    if (diff >= refreshAfterMs) {\n      this.setState({\n        value,\n      });\n    }\n  }\n\n  private calculatePercentOfInterval(percent: number): number {\n    const intervalMs = this.state.value.to.diff(this.state.value.from, 'milliseconds');\n    return Math.ceil(intervalMs / percent);\n  }\n\n  public getTimeZone(): TimeZone {\n    // Return local time zone if provided\n    if (this.state.timeZone) {\n      return this.state.timeZone;\n    }\n\n    // Resolve higher level time zone source\n    const timeZoneSource = this.getTimeZoneSource();\n    if (timeZoneSource !== this) {\n      return timeZoneSource.state.timeZone!;\n    }\n\n    // Return default time zone\n    return getTimeZone();\n  }\n\n  public onTimeRangeChange = (timeRange: TimeRange) => {\n    const update: Partial<SceneTimeRangeState> = {};\n\n    if (typeof timeRange.raw.from === 'string') {\n      update.from = timeRange.raw.from;\n    } else {\n      update.from = timeRange.raw.from.toISOString();\n    }\n\n    if (typeof timeRange.raw.to === 'string') {\n      update.to = timeRange.raw.to;\n    } else {\n      update.to = timeRange.raw.to.toISOString();\n    }\n\n    update.value = evaluateTimeRange(\n      update.from,\n      update.to,\n      this.getTimeZone(),\n      this.state.fiscalYearStartMonth,\n      this.state.UNSAFE_nowDelay\n    );\n\n    // Only update if time range actually changed\n    if (update.from !== this.state.from || update.to !== this.state.to) {\n      this._urlSync.performBrowserHistoryAction(() => {\n        this.setState(update);\n      });\n    }\n  };\n\n  public onTimeZoneChange = (timeZone: TimeZone) => {\n    this._urlSync.performBrowserHistoryAction(() => {\n      this.setState({ timeZone });\n    });\n  };\n\n  public onRefresh = () => {\n    this.setState({\n      value: evaluateTimeRange(\n        this.state.from,\n        this.state.to,\n        this.getTimeZone(),\n        this.state.fiscalYearStartMonth,\n        this.state.UNSAFE_nowDelay\n      ),\n    });\n\n    this.publishEvent(new RefreshEvent(), true);\n  };\n\n  public getUrlState() {\n    const params = locationService.getSearchObject();\n    const urlValues: SceneObjectUrlValues = { from: this.state.from, to: this.state.to };\n\n    if (this.state.timeZone) {\n      urlValues.timezone = this.state.timeZone;\n    }\n\n    // Clear time and time.window once they are converted to from and to\n    if (params.time && params['time.window']) {\n      urlValues.time = null;\n      urlValues['time.window'] = null;\n    }\n\n    return urlValues;\n  }\n\n  public updateFromUrl(values: SceneObjectUrlValues) {\n    const update: Partial<SceneTimeRangeState> = {};\n\n    let from = parseUrlParam(values.from);\n    let to = parseUrlParam(values.to);\n\n    if (values.time && values['time.window']) {\n      const time = Array.isArray(values.time) ? values.time[0] : values.time;\n      const timeWindow = Array.isArray(values['time.window']) ? values['time.window'][0] : values['time.window'];\n      const timeRange = getTimeWindow(time, timeWindow);\n      if (timeRange.from && isValid(timeRange.from)) {\n        from = timeRange.from;\n      }\n\n      if (timeRange.to && isValid(timeRange.to)) {\n        to = timeRange.to;\n      }\n    }\n\n    if (from && isValid(from)) {\n      update.from = from;\n    }\n\n    if (to && isValid(to)) {\n      update.to = to;\n    }\n\n    if (typeof values.timezone === 'string') {\n      update.timeZone = values.timezone !== '' ? values.timezone : undefined;\n    }\n\n    if (Object.keys(update).length === 0) {\n      return;\n    }\n\n    update.value = evaluateTimeRange(\n      update.from ?? this.state.from,\n      update.to ?? this.state.to,\n      update.timeZone ?? this.getTimeZone(),\n      this.state.fiscalYearStartMonth,\n      this.state.UNSAFE_nowDelay\n    );\n\n    return this.setState(update);\n  }\n}\n\n/**\n * Calculates the duration of the time range from time-time.window/2 to time+time.window/2. Both be specified in ms. For example ?time=1500000000000&time.window=10000 results in a 10-second time range from 1499999995000 to 1500000005000`.\n * @param time - time in ms\n * @param timeWindow - time window in ms or interval string\n */\nfunction getTimeWindow(time: string, timeWindow: string) {\n  // Parse the time, assuming it could be an ISO string or a number in milliseconds\n  const valueTime = isNaN(Date.parse(time)) ? parseInt(time, 10) : Date.parse(time);\n\n  let timeWindowMs;\n\n  if (timeWindow.match(/^\\d+$/) && parseInt(timeWindow, 10)) {\n    // when time window is specified in ms\n    timeWindowMs = parseInt(timeWindow, 10);\n  } else {\n    timeWindowMs = rangeUtil.intervalToMs(timeWindow);\n  }\n\n  return {\n    from: toUtc(valueTime - timeWindowMs / 2).toISOString(),\n    to: toUtc(valueTime + timeWindowMs / 2).toISOString(),\n  };\n}\n","import { SceneDataNode } from '../../core/SceneDataNode';\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneTimeRange } from '../../core/SceneTimeRange';\nimport { SceneVariable, SceneVariables, SceneVariableSetState, SceneVariableState } from '../types';\n\nexport const EmptyDataNode = new SceneDataNode();\nexport const DefaultTimeRange = new SceneTimeRange();\n\n/**\n * Since this is used from sceneGraph.getVariables we cannot reference SceneVariableSet here as it would create a circular reference\n */\nexport class EmptyVariableSetImpl extends SceneObjectBase<SceneVariableSetState> implements SceneVariables {\n  public constructor() {\n    super({ variables: [] });\n  }\n\n  public getByName(name: string): SceneVariable<SceneVariableState> | undefined {\n    return undefined;\n  }\n\n  public isVariableLoadingOrWaitingToUpdate(variable: SceneVariable<SceneVariableState>): boolean {\n    return false;\n  }\n}\n\nexport const EmptyVariableSet = new EmptyVariableSetImpl();\n","import { DefaultTimeRange } from '../../variables/interpolation/defaults';\nimport { SceneObject, SceneTimeRangeLike } from '../types';\nimport { getClosest } from './utils';\n\n/**\n * Will walk up the scene object graph to the closest $timeRange scene object\n */\nexport function getTimeRange(sceneObject: SceneObject): SceneTimeRangeLike {\n  return getClosest(sceneObject, (s) => s.state.$timeRange) ?? DefaultTimeRange;\n}\n","import { Observable } from 'rxjs';\n\nimport { BusEventWithPayload } from '@grafana/data';\nimport { VariableType, VariableHide } from '@grafana/schema';\n\nimport { SceneObject, SceneObjectState } from '../core/types';\n\nexport interface SceneVariableState extends SceneObjectState {\n  type: VariableType;\n  name: string;\n  label?: string;\n  hide?: VariableHide;\n  skipUrlSync?: boolean;\n  loading?: boolean;\n  error?: any | null;\n  description?: string | null;\n}\n\nexport interface SceneVariable<TState extends SceneVariableState = SceneVariableState> extends SceneObject<TState> {\n  /**\n   * This function is called on activation or when a dependency changes.\n   */\n  validateAndUpdate?(): Observable<ValidateAndUpdateResult>;\n\n  /**\n   * Should return the value for the given field path\n   */\n  getValue(fieldPath?: string): VariableValue | undefined | null;\n\n  /**\n   * Should return the value display text, used by the \"text\" formatter\n   * Example: ${podId:text}\n   * Useful for variables that have non user friendly values but friendly display text names.\n   */\n  getValueText?(fieldPath?: string): string;\n\n  /**\n   * For special edge case senarios. For example local function that locally scoped variables can implement.\n   **/\n  isAncestorLoading?(): boolean;\n\n  /**\n   * Allows cancelling variable execution.\n   */\n  onCancel?(): void;\n\n  /**\n   * @experimental\n   * Indicates that a variable loads values lazily when user interacts with the variable dropdown.\n   */\n  isLazy?: boolean;\n}\n\nexport type VariableValue = VariableValueSingle | VariableValueSingle[];\n\nexport type VariableValueSingle = string | boolean | number | CustomVariableValue;\n\n/**\n * This is for edge case values like the custom \"allValue\" that should not be escaped/formatted like other values\n * The custom all value usually contain wildcards that should not be escaped.\n */\nexport interface CustomVariableValue {\n  /**\n   * The format name or function used in the expression\n   */\n  formatter(formatNameOrFn?: string | VariableCustomFormatterFn): string;\n}\n\nexport interface ValidateAndUpdateResult {}\nexport interface VariableValueOption {\n  label: string;\n  value: VariableValueSingle;\n  group?: string;\n}\n\nexport interface SceneVariableSetState extends SceneObjectState {\n  variables: SceneVariable[];\n}\n\nexport interface SceneVariables extends SceneObject<SceneVariableSetState> {\n  /**\n   * Will look for and return variable matching name\n   */\n  getByName(name: string): SceneVariable | undefined;\n  /**\n   * Will return true if the variable is loading or waiting for an update to complete.\n   */\n  isVariableLoadingOrWaitingToUpdate(variable: SceneVariable): boolean;\n}\n\nexport class SceneVariableValueChangedEvent extends BusEventWithPayload<SceneVariable> {\n  public static type = 'scene-variable-changed-value';\n}\n\nexport interface SceneVariableDependencyConfigLike {\n  /** Return all variable names this object depend on */\n  getNames(): Set<string>;\n\n  /** Used to check for dependency on a specific variable */\n  hasDependencyOn(name: string): boolean;\n\n  /**\n   * Will be called when the VariableSet have completed an update process or when a variable has changed value.\n   **/\n  variableUpdateCompleted(variable: SceneVariable, hasChanged: boolean): void;\n}\n\n/**\n * Used in CustomFormatterFn\n */\nexport interface CustomFormatterVariable {\n  name: string;\n  type: VariableType;\n  multi?: boolean;\n  includeAll?: boolean;\n}\n\nexport type VariableCustomFormatterFn = (\n  value: unknown,\n  legacyVariableModel: Partial<CustomFormatterVariable>,\n  legacyDefaultFormatter?: VariableCustomFormatterFn\n) => string;\n\nexport type InterpolationFormatParameter = string | VariableCustomFormatterFn | undefined;\n\nexport function isCustomVariableValue(value: VariableValue): value is CustomVariableValue {\n  return typeof value === 'object' && 'formatter' in value;\n}\n","import { property } from 'lodash';\n\ninterface FieldAccessorCache {\n  [key: string]: (obj: object) => any;\n}\n\nlet fieldAccessorCache: FieldAccessorCache = {};\n\nexport function getFieldAccessor(fieldPath: string) {\n  const accessor = fieldAccessorCache[fieldPath];\n  if (accessor) {\n    return accessor;\n  }\n\n  return (fieldAccessorCache[fieldPath] = property(fieldPath));\n}\n","import { ScopedVar } from '@grafana/data';\n\nimport { VariableValue } from '../types';\n\nimport { FormatVariable } from './formatRegistry';\nimport { getFieldAccessor } from './fieldAccessorCache';\n\nexport class ScopedVarsVariable implements FormatVariable {\n  public state: { name: string; value: ScopedVar; type: string };\n\n  public constructor(name: string, value: ScopedVar) {\n    this.state = { name, value, type: 'scopedvar' };\n  }\n\n  public getValue(fieldPath: string): VariableValue {\n    let { value } = this.state;\n    let realValue = value.value;\n\n    if (fieldPath) {\n      realValue = getFieldAccessor(fieldPath)(value.value);\n    } else {\n      realValue = value.value;\n    }\n\n    if (realValue === 'string' || realValue === 'number' || realValue === 'boolean') {\n      return realValue;\n    }\n\n    return String(realValue);\n  }\n\n  public getValueText(): string {\n    const { value } = this.state;\n\n    if (value.text != null) {\n      return String(value.text);\n    }\n\n    return String(value);\n  }\n}\n\nlet scopedVarsVariable: ScopedVarsVariable | undefined;\n\n/**\n * Reuses a single instance to avoid unnecessary memory allocations\n */\nexport function getSceneVariableForScopedVar(name: string, value: ScopedVar): FormatVariable {\n  if (!scopedVarsVariable) {\n    scopedVarsVariable = new ScopedVarsVariable(name, value);\n  } else {\n    scopedVarsVariable.state.name = name;\n    scopedVarsVariable.state.value = value;\n  }\n\n  return scopedVarsVariable;\n}\n","export const ALL_VARIABLE_TEXT = 'All';\nexport const ALL_VARIABLE_VALUE = '$__all';\nexport const NONE_VARIABLE_TEXT = 'None';\nexport const NONE_VARIABLE_VALUE = '';\nexport const AUTO_VARIABLE_TEXT = 'Auto';\nexport const AUTO_VARIABLE_VALUE = '$__auto';\n\n// Grafana core source: https://github.com/grafana/grafana/blob/main/public/app/features/variables/utils.ts#L23\n/*\n * This regex matches 3 types of variable reference with an optional format specifier\n * \\$(\\w+)                          $var1\n * \\[\\[(\\w+?)(?::(\\w+))?\\]\\]        [[var2]] or [[var2:fmt2]]\n * \\${(\\w+)(?::(\\w+))?}             ${var3} or ${var3:fmt3}\n */\nexport const VARIABLE_REGEX = /\\$(\\w+)|\\[\\[(\\w+?)(?::(\\w+))?\\]\\]|\\${(\\w+)(?:\\.([^:^\\}]+))?(?::([^\\}]+))?}/g;\nexport const SEARCH_FILTER_VARIABLE = '__searchFilter';\n","import { isArray, map, replace } from 'lodash';\n\nimport { dateTime, Registry, RegistryItem, textUtil, escapeRegex, urlUtil } from '@grafana/data';\nimport { VariableType, VariableFormatID } from '@grafana/schema';\n\nimport { VariableValue, VariableValueSingle } from '../types';\nimport { ALL_VARIABLE_VALUE } from '../constants';\nimport { SceneObjectUrlSyncHandler } from '../../core/types';\n\nexport interface FormatRegistryItem extends RegistryItem {\n  formatter(value: VariableValue, args: string[], variable: FormatVariable): string;\n}\n\n/**\n * Slimmed down version of the SceneVariable interface so that it only contains what the formatters actually use.\n * This is useful as we have some implementations of this interface that does not need to be full scene objects.\n * For example ScopedVarsVariable and LegacyVariableWrapper.\n */\nexport interface FormatVariable {\n  state: {\n    name: string;\n    type: VariableType | string;\n    isMulti?: boolean;\n    includeAll?: boolean;\n  };\n\n  getValue(fieldPath?: string): VariableValue | undefined | null;\n  getValueText?(fieldPath?: string): string;\n  urlSync?: SceneObjectUrlSyncHandler;\n}\n\nexport const formatRegistry = new Registry<FormatRegistryItem>(() => {\n  const formats: FormatRegistryItem[] = [\n    {\n      id: VariableFormatID.Lucene,\n      name: 'Lucene',\n      description: 'Values are lucene escaped and multi-valued variables generate an OR expression',\n      formatter: (value) => {\n        if (typeof value === 'string') {\n          return luceneEscape(value);\n        }\n\n        if (Array.isArray(value)) {\n          if (value.length === 0) {\n            return '__empty__';\n          }\n          const quotedValues = map(value, (val: string) => {\n            return '\"' + luceneEscape(val) + '\"';\n          });\n          return '(' + quotedValues.join(' OR ') + ')';\n        } else {\n          return luceneEscape(`${value}`);\n        }\n      },\n    },\n    {\n      id: VariableFormatID.Raw,\n      name: 'raw',\n      description: 'Keep value as is',\n      formatter: (value) => String(value),\n    },\n    {\n      id: VariableFormatID.Regex,\n      name: 'Regex',\n      description: 'Values are regex escaped and multi-valued variables generate a (<value>|<value>) expression',\n      formatter: (value) => {\n        if (typeof value === 'string') {\n          return escapeRegex(value);\n        }\n\n        if (Array.isArray(value)) {\n          const escapedValues = value.map((item) => {\n            if (typeof item === 'string') {\n              return escapeRegex(item);\n            } else {\n              return escapeRegex(String(item));\n            }\n          });\n\n          if (escapedValues.length === 1) {\n            return escapedValues[0];\n          }\n\n          return '(' + escapedValues.join('|') + ')';\n        }\n\n        return escapeRegex(`${value}`);\n      },\n    },\n    {\n      id: VariableFormatID.Pipe,\n      name: 'Pipe',\n      description: 'Values are separated by | character',\n      formatter: (value) => {\n        if (typeof value === 'string') {\n          return value;\n        }\n\n        if (Array.isArray(value)) {\n          return value.join('|');\n        }\n\n        return `${value}`;\n      },\n    },\n    {\n      id: VariableFormatID.Distributed,\n      name: 'Distributed',\n      description: 'Multiple values are formatted like variable=value',\n      formatter: (value, args, variable) => {\n        if (typeof value === 'string') {\n          return value;\n        }\n\n        if (Array.isArray(value)) {\n          value = map(value, (val: string, index: number) => {\n            if (index !== 0) {\n              return variable.state.name + '=' + val;\n            } else {\n              return val;\n            }\n          });\n\n          return value.join(',');\n        }\n\n        return `${value}`;\n      },\n    },\n    {\n      id: VariableFormatID.CSV,\n      name: 'Csv',\n      description: 'Comma-separated values',\n      formatter: (value) => {\n        if (typeof value === 'string') {\n          return value;\n        }\n\n        if (isArray(value)) {\n          return value.join(',');\n        }\n\n        return String(value);\n      },\n    },\n    {\n      id: VariableFormatID.HTML,\n      name: 'HTML',\n      description: 'HTML escaping of values',\n      formatter: (value) => {\n        if (typeof value === 'string') {\n          return textUtil.escapeHtml(value);\n        }\n\n        if (isArray(value)) {\n          return textUtil.escapeHtml(value.join(', '));\n        }\n\n        return textUtil.escapeHtml(String(value));\n      },\n    },\n    {\n      id: VariableFormatID.JSON,\n      name: 'JSON',\n      description: 'JSON stringify value',\n      formatter: (value) => {\n        if (typeof value === 'string') {\n          return value;\n        }\n        return JSON.stringify(value);\n      },\n    },\n    {\n      id: VariableFormatID.PercentEncode,\n      name: 'Percent encode',\n      description: 'Useful for URL escaping values',\n      formatter: (value) => {\n        // like glob, but url escaped\n        if (isArray(value)) {\n          return encodeURIComponentStrict('{' + value.join(',') + '}');\n        }\n\n        return encodeURIComponentStrict(value);\n      },\n    },\n    {\n      id: VariableFormatID.SingleQuote,\n      name: 'Single quote',\n      description: 'Single quoted values',\n      formatter: (value) => {\n        // escape single quotes with backslash\n        const regExp = new RegExp(`'`, 'g');\n\n        if (isArray(value)) {\n          return map(value, (v: string) => `'${replace(v, regExp, `\\\\'`)}'`).join(',');\n        }\n\n        let strVal = typeof value === 'string' ? value : String(value);\n        return `'${replace(strVal, regExp, `\\\\'`)}'`;\n      },\n    },\n    {\n      id: VariableFormatID.DoubleQuote,\n      name: 'Double quote',\n      description: 'Double quoted values',\n      formatter: (value) => {\n        // escape double quotes with backslash\n        const regExp = new RegExp('\"', 'g');\n        if (isArray(value)) {\n          return map(value, (v: string) => `\"${replace(v, regExp, '\\\\\"')}\"`).join(',');\n        }\n\n        let strVal = typeof value === 'string' ? value : String(value);\n        return `\"${replace(strVal, regExp, '\\\\\"')}\"`;\n      },\n    },\n    {\n      id: VariableFormatID.SQLString,\n      name: 'SQL string',\n      description: 'SQL string quoting and commas for use in IN statements and other scenarios',\n      formatter: sqlStringFormatter,\n    },\n    {\n      id: VariableFormatID.Date,\n      name: 'Date',\n      description: 'Format date in different ways',\n      formatter: (value, args) => {\n        let nrValue = NaN;\n\n        if (typeof value === 'number') {\n          nrValue = value;\n        } else if (typeof value === 'string') {\n          nrValue = parseInt(value, 10);\n        }\n\n        if (isNaN(nrValue)) {\n          return 'NaN';\n        }\n\n        const arg = args[0] ?? 'iso';\n        switch (arg) {\n          case 'ms':\n            return String(value);\n          case 'seconds':\n            return `${Math.round(nrValue! / 1000)}`;\n          case 'iso':\n            return dateTime(nrValue).toISOString();\n          default:\n            if ((args || []).length > 1) {\n              return dateTime(nrValue).format(args.join(':'));\n            }\n            return dateTime(nrValue).format(arg);\n        }\n      },\n    },\n    {\n      id: VariableFormatID.Glob,\n      name: 'Glob',\n      description: 'Format multi-valued variables using glob syntax, example {value1,value2}',\n      formatter: (value) => {\n        if (isArray(value) && value.length > 1) {\n          return '{' + value.join(',') + '}';\n        }\n        return String(value);\n      },\n    },\n    {\n      id: VariableFormatID.Text,\n      name: 'Text',\n      description: 'Format variables in their text representation. Example in multi-variable scenario A + B + C.',\n      formatter: (value, _args, variable) => {\n        if (variable.getValueText) {\n          return variable.getValueText();\n        }\n\n        return String(value);\n      },\n    },\n    {\n      id: VariableFormatID.QueryParam,\n      name: 'Query parameter',\n      description:\n        'Format variables as URL parameters. Example in multi-variable scenario A + B + C => var-foo=A&var-foo=B&var-foo=C.',\n      formatter: (value, _args, variable) => {\n        if (variable.urlSync) {\n          const urlParam = variable.urlSync.getUrlState();\n          return urlUtil.toUrlParams(urlParam);\n        }\n\n        if (Array.isArray(value)) {\n          return value.map((v) => formatQueryParameter(variable.state.name, v)).join('&');\n        }\n\n        return formatQueryParameter(variable.state.name, value);\n      },\n    },\n    {\n      id: VariableFormatID.UriEncode,\n      name: 'Percent encode as URI',\n      description: 'Useful for URL escaping values, taking into URI syntax characters',\n      formatter: (value: VariableValue) => {\n        if (isArray(value)) {\n          return encodeURIStrict('{' + value.join(',') + '}');\n        }\n\n        return encodeURIStrict(value);\n      },\n    },\n  ];\n\n  return formats;\n});\n\nfunction luceneEscape(value: string) {\n  if (isNaN(+value) === false) {\n    return value;\n  }\n\n  return value.replace(/([\\!\\*\\+\\-\\=<>\\s\\&\\|\\(\\)\\[\\]\\{\\}\\^\\~\\?\\:\\\\/\"])/g, '\\\\$1');\n}\n\n/**\n * encode string according to RFC 3986; in contrast to encodeURIComponent()\n * also the sub-delims \"!\", \"'\", \"(\", \")\" and \"*\" are encoded;\n * unicode handling uses UTF-8 as in ECMA-262.\n */\nfunction encodeURIComponentStrict(str: VariableValueSingle) {\n  if (typeof str === 'object') {\n    str = String(str);\n  }\n\n  return replaceSpecialCharactersToASCII(encodeURIComponent(str));\n}\n\nconst encodeURIStrict = (str: VariableValueSingle): string => replaceSpecialCharactersToASCII(encodeURI(String(str)));\n\nconst replaceSpecialCharactersToASCII = (value: string): string =>\n  value.replace(/[!'()*]/g, (c) => {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n\nfunction formatQueryParameter(name: string, value: VariableValueSingle): string {\n  return `var-${name}=${encodeURIComponentStrict(value)}`;\n}\n\nexport function isAllValue(value: VariableValueSingle) {\n  return value === ALL_VARIABLE_VALUE || (Array.isArray(value) && value[0] === ALL_VARIABLE_VALUE);\n}\n\nconst SQL_ESCAPE_MAP: Record<string, string> = {\n  \"'\": \"''\",\n  '\"': '\\\\\"',\n};\n\nfunction sqlStringFormatter(value: VariableValue) {\n  // escape single quotes by pairing them\n  const regExp = new RegExp(`'|\"`, 'g');\n\n  if (isArray(value)) {\n    return map(value, (v: string) => `'${replace(v, regExp, (match) => SQL_ESCAPE_MAP[match] ?? '')}'`).join(',');\n  }\n\n  let strVal = typeof value === 'string' ? value : String(value);\n  return `'${replace(strVal, regExp, (match) => SQL_ESCAPE_MAP[match] ?? '')}'`;\n}\n","import { ScopedVars } from '@grafana/data';\nimport { SceneObject } from '../../core/types';\nimport { FormatVariable } from '../interpolation/formatRegistry';\nimport { CustomVariableValue } from '../types';\n\nexport interface MacroVariableConstructor {\n  new (name: string, sceneObject: SceneObject, fullMatch: string, scopedVars?: ScopedVars): FormatVariable;\n}\n\n/**\n * The sceneInterpolator will detect if getValue returns VariableValueCustom and will skip the normal formatting\n * This is useful as otherwise we would url encode macros like $__all_variables twice.\n */\nexport class SkipFormattingValue implements CustomVariableValue {\n  public constructor(private _value: string) {}\n\n  public formatter(): string {\n    return this._value;\n  }\n}\n","import { dateTimeFormat, urlUtil } from '@grafana/data';\nimport { getTimeRange } from '../../core/sceneGraph/getTimeRange';\nimport { getData } from '../../core/sceneGraph/sceneGraph';\nimport { SceneObject } from '../../core/types';\nimport { FormatVariable } from '../interpolation/formatRegistry';\nimport { SkipFormattingValue } from './types';\n\n/**\n * Handles expressions like $__url_time_range.\n */\nexport class UrlTimeRangeMacro implements FormatVariable {\n  public state: { name: string; type: string };\n  private _sceneObject: SceneObject;\n\n  public constructor(name: string, sceneObject: SceneObject) {\n    this.state = { name: name, type: 'url_variable' };\n    this._sceneObject = sceneObject;\n  }\n\n  public getValue(): SkipFormattingValue {\n    const timeRange = getTimeRange(this._sceneObject);\n    const urlState = timeRange.urlSync?.getUrlState();\n    return new SkipFormattingValue(urlUtil.toUrlParams(urlState));\n  }\n\n  public getValueText?(): string {\n    return '';\n  }\n}\n\n/**\n * Handles expressions like $__from and $__to.\n */\nexport class TimeFromAndToMacro implements FormatVariable {\n  public state: { name: string; type: string };\n  private _sceneObject: SceneObject;\n\n  public constructor(name: string, sceneObject: SceneObject) {\n    this.state = { name: name, type: 'time_macro' };\n    this._sceneObject = sceneObject;\n  }\n\n  public getValue() {\n    const timeRange = getTimeRange(this._sceneObject);\n    if (this.state.name === '__from') {\n      return timeRange.state.value.from.valueOf();\n    } else {\n      return timeRange.state.value.to.valueOf();\n    }\n  }\n\n  public getValueText?(): string {\n    const timeRange = getTimeRange(this._sceneObject);\n    if (this.state.name === '__from') {\n      return dateTimeFormat(timeRange.state.value.from, { timeZone: timeRange.getTimeZone() });\n    } else {\n      return dateTimeFormat(timeRange.state.value.to, { timeZone: timeRange.getTimeZone() });\n    }\n  }\n}\n\n/**\n * Handles $__timezone expression.\n */\nexport class TimezoneMacro implements FormatVariable {\n  public state: { name: string; type: string };\n  private _sceneObject: SceneObject;\n\n  public constructor(name: string, sceneObject: SceneObject) {\n    this.state = { name: name, type: 'time_macro' };\n    this._sceneObject = sceneObject;\n  }\n\n  public getValue() {\n    const timeRange = getTimeRange(this._sceneObject);\n    const timeZone = timeRange.getTimeZone();\n\n    if (timeZone === 'browser') {\n      return Intl.DateTimeFormat().resolvedOptions().timeZone;\n    }\n\n    return timeZone;\n  }\n\n  public getValueText?(): string {\n    return this.getValue();\n  }\n}\n\n/**\n * Handles $__interval and $__intervalMs expression.\n */\nexport class IntervalMacro implements FormatVariable {\n  public state: { name: string; type: string; match: string };\n  private _sceneObject: SceneObject;\n\n  public constructor(name: string, sceneObject: SceneObject, match: string) {\n    this.state = { name: name, type: 'time_macro', match: match };\n    this._sceneObject = sceneObject;\n  }\n\n  public getValue() {\n    const data = getData(this._sceneObject);\n\n    if (data) {\n      const request = data.state.data?.request;\n      if (!request) {\n        return this.state.match;\n      }\n      if (this.state.name === '__interval_ms') {\n        return request.intervalMs;\n      }\n      return request.interval;\n    }\n\n    return this.state.match;\n  }\n}\n","import { SceneObject, SceneObjectState } from '../core/types';\nimport { locationService as locationServiceRuntime } from '@grafana/runtime';\n// @ts-ignore\n// eslint-disable-next-line no-duplicate-imports\nimport { useLocationService } from '@grafana/runtime';\n\n/**\n *  This function works around the problem of Contravariance of the SceneObject.setState function\n *  Contravariance is not enforce by interfaces and here we use the SceneObject interface to access the setState function\n */\nexport function setBaseClassState<T extends SceneObjectState>(sceneObject: SceneObject<T>, newState: Partial<T>) {\n  sceneObject.setState(newState);\n}\n\n/**\n * Safe way to get location service that fallbacks to singleton for older runtime versions where useLocationService is\n * not available.\n */\nexport function useLocationServiceSafe() {\n  // This is basically a version/feature check for grafana/runtime so this 'if' should be stable (ie for one instance\n  // of grafana this will always be true or false) so it should be safe to ignore the hook rule here\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useLocationService ? useLocationService() : locationServiceRuntime;\n}\n","import { isArray, isEqual } from 'lodash';\nimport { map, Observable } from 'rxjs';\n\nimport { ALL_VARIABLE_TEXT, ALL_VARIABLE_VALUE } from '../constants';\n\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneObjectUrlSyncHandler, SceneObjectUrlValues } from '../../core/types';\nimport {\n  SceneVariable,\n  SceneVariableValueChangedEvent,\n  SceneVariableState,\n  ValidateAndUpdateResult,\n  VariableValue,\n  VariableValueOption,\n  VariableValueSingle,\n  CustomVariableValue,\n  VariableCustomFormatterFn,\n} from '../types';\nimport { formatRegistry } from '../interpolation/formatRegistry';\nimport { VariableFormatID } from '@grafana/schema';\nimport { SceneVariableSet } from '../sets/SceneVariableSet';\nimport { setBaseClassState } from '../../utils/utils';\n\nexport interface MultiValueVariableState extends SceneVariableState {\n  value: VariableValue; // old current.text\n  text: VariableValue; // old current.value\n  options: VariableValueOption[];\n  isMulti?: boolean;\n  includeAll?: boolean;\n  defaultToAll?: boolean;\n  allValue?: string;\n  placeholder?: string;\n  /**\n   * For multi value variables, this option controls how many values to show before they are collapsed into +N.\n   * Defaults to 5\n   */\n  maxVisibleValues?: number;\n  noValueOnClear?: boolean;\n  isReadOnly?: boolean;\n}\n\nexport interface VariableGetOptionsArgs {\n  searchFilter?: string;\n}\n\nexport abstract class MultiValueVariable<TState extends MultiValueVariableState = MultiValueVariableState>\n  extends SceneObjectBase<TState>\n  implements SceneVariable<TState>\n{\n  protected _urlSync: SceneObjectUrlSyncHandler = new MultiValueUrlSyncHandler(this);\n\n  /**\n   * Set to true to skip next value validation to maintain the current value even it it's not among the options (ie valid values)\n   */\n  public skipNextValidation?: boolean;\n\n  /**\n   * The source of value options.\n   */\n  public abstract getValueOptions(args: VariableGetOptionsArgs): Observable<VariableValueOption[]>;\n\n  /**\n   * This function is called on when SceneVariableSet is activated or when a dependency changes.\n   */\n  public validateAndUpdate(): Observable<ValidateAndUpdateResult> {\n    return this.getValueOptions({}).pipe(\n      map((options) => {\n        this.updateValueGivenNewOptions(options);\n        return {};\n      })\n    );\n  }\n\n  public onCancel(): void {\n    this.setStateHelper({ loading: false });\n    const sceneVarSet = this.parent as SceneVariableSet;\n    sceneVarSet?.cancel(this);\n  }\n\n  /**\n   * Check if current value is valid given new options. If not update the value.\n   */\n  private updateValueGivenNewOptions(options: VariableValueOption[]) {\n    // Remember current value and text\n    const { value: currentValue, text: currentText, options: oldOptions } = this.state;\n\n    const stateUpdate = this.getStateUpdateGivenNewOptions(options, currentValue, currentText);\n\n    this.interceptStateUpdateAfterValidation(stateUpdate);\n\n    // Perform state change\n    this.setStateHelper(stateUpdate);\n\n    // Publish value changed event only if value changed\n    if (stateUpdate.value !== currentValue || stateUpdate.text !== currentText || (this.hasAllValue() && !isEqual(options, oldOptions))) {\n      this.publishEvent(new SceneVariableValueChangedEvent(this), true);\n    }\n  }\n\n  private getStateUpdateGivenNewOptions(\n    options: VariableValueOption[],\n    currentValue: VariableValue,\n    currentText: VariableValue\n  ): Partial<MultiValueVariableState> {\n    const stateUpdate: Partial<MultiValueVariableState> = {\n      options,\n      loading: false,\n      value: currentValue,\n      text: currentText,\n    };\n\n    if (options.length === 0) {\n      if (this.state.defaultToAll || this.state.includeAll) {\n        stateUpdate.value = ALL_VARIABLE_VALUE;\n        stateUpdate.text = ALL_VARIABLE_TEXT;\n      } else if (this.state.isMulti) {\n        stateUpdate.value = [];\n        stateUpdate.text = [];\n      } else {\n        stateUpdate.value = '';\n        stateUpdate.text = '';\n      }\n\n      return stateUpdate;\n    }\n\n    if (this.hasAllValue()) {\n      if (!this.state.includeAll) {\n        stateUpdate.value = options[0].value;\n        stateUpdate.text = options[0].label;\n        // If multi switch to arrays\n        if (this.state.isMulti) {\n          stateUpdate.value = [stateUpdate.value];\n          stateUpdate.text = [stateUpdate.text];\n        }\n      }\n      return stateUpdate;\n    }\n\n    if (this.state.isMulti) {\n      // If we are a multi valued variable validate the current values are among the options\n      const currentValues = Array.isArray(currentValue) ? currentValue : [currentValue];\n      const validValues = currentValues.filter((v) => options.find((o) => o.value === v));\n      const validTexts = validValues.map((v) => options.find((o) => o.value === v)!.label);\n\n      // If no valid values pick the first option\n      if (validValues.length === 0) {\n        const defaultState = this.getDefaultMultiState(options);\n        stateUpdate.value = defaultState.value;\n        stateUpdate.text = defaultState.text;\n      } else {\n        // We have valid values, if it's different from current valid values update current values\n        if (!isEqual(validValues, currentValue)) {\n          stateUpdate.value = validValues;\n        }\n        if (!isEqual(validTexts, currentText)) {\n          stateUpdate.text = validTexts;\n        }\n      }\n      return stateUpdate;\n    }\n\n    // Single value variable validation\n\n    // Try find by value then text\n    let matchingOption = findOptionMatchingCurrent(currentValue, currentText, options);\n    if (matchingOption) {\n      // When updating the initial state from URL the text property is set the same as value\n      // Here we can correct the text value state\n      stateUpdate.text = matchingOption.label;\n      stateUpdate.value = matchingOption.value;\n    } else {\n      // Current value is found in options\n      if (this.state.defaultToAll) {\n        stateUpdate.value = ALL_VARIABLE_VALUE;\n        stateUpdate.text = ALL_VARIABLE_TEXT;\n      } else {\n        // Current value is not valid. Set to first of the available options\n        stateUpdate.value = options[0].value;\n        stateUpdate.text = options[0].label;\n      }\n    }\n\n    return stateUpdate;\n  }\n\n  /**\n   * Values set by initial URL sync needs to survive the next validation and update.\n   * This function can intercept and make sure those values are preserved.\n   */\n  protected interceptStateUpdateAfterValidation(stateUpdate: Partial<MultiValueVariableState>): void {\n    // If the validation wants to fix the all value (All ==> $__all) then we should let that pass\n    const isAllValueFix = stateUpdate.value === ALL_VARIABLE_VALUE && this.state.text === ALL_VARIABLE_TEXT;\n\n    if (this.skipNextValidation && stateUpdate.value !== this.state.value && stateUpdate.text !== this.state.text && !isAllValueFix) {\n      stateUpdate.value = this.state.value;\n      stateUpdate.text = this.state.text;\n    }\n\n    this.skipNextValidation = false;\n  }\n\n  public getValue(): VariableValue {\n    if (this.hasAllValue()) {\n      if (this.state.allValue) {\n        return new CustomAllValue(this.state.allValue, this);\n      }\n\n      return this.state.options.map((x) => x.value);\n    }\n\n    return this.state.value;\n  }\n\n  public getValueText(): string {\n    if (this.hasAllValue()) {\n      return ALL_VARIABLE_TEXT;\n    }\n\n    if (Array.isArray(this.state.text)) {\n      return this.state.text.join(' + ');\n    }\n\n    return String(this.state.text);\n  }\n\n  public hasAllValue() {\n    const value = this.state.value;\n    return value === ALL_VARIABLE_VALUE || (Array.isArray(value) && value[0] === ALL_VARIABLE_VALUE);\n  }\n\n  public getDefaultMultiState(options: VariableValueOption[]) {\n    if (this.state.defaultToAll) {\n      return { value: [ALL_VARIABLE_VALUE], text: [ALL_VARIABLE_TEXT] };\n    } else if (options.length > 0) {\n      return { value: [options[0].value], text: [options[0].label] };\n    } else {\n      return { value: [], text: [] };\n    }\n  }\n\n  /**\n   * Change the value and publish SceneVariableValueChangedEvent event.\n   */\n  public changeValueTo(value: VariableValue, text?: VariableValue) {\n    // Ignore if there is no change\n    if (value === this.state.value && text === this.state.text) {\n      return;\n    }\n\n    if (!text) {\n      if (Array.isArray(value)) {\n        text = value.map((v) => this.findLabelTextForValue(v));\n      } else {\n        text = this.findLabelTextForValue(value);\n      }\n    }\n\n    if (Array.isArray(value)) {\n      // If we are a multi valued variable is cleared (empty array) we need to set the default empty state\n      if (value.length === 0) {\n        const state = this.getDefaultMultiState(this.state.options);\n        value = state.value;\n        text = state.text;\n      }\n\n      // If last value is the All value then replace all with it\n      if (value[value.length - 1] === ALL_VARIABLE_VALUE) {\n        value = [ALL_VARIABLE_VALUE];\n        text = [ALL_VARIABLE_TEXT];\n      }\n      // If the first value is the ALL value and we have other values, then remove the All value\n      else if (value[0] === ALL_VARIABLE_VALUE && value.length > 1) {\n        value.shift();\n        if (Array.isArray(text)) {\n          text.shift();\n        }\n      }\n    }\n\n    // Do nothing if value and text are the same\n    if (isEqual(value, this.state.value) && isEqual(text, this.state.text)) {\n      return;\n    }\n\n    this.setStateHelper({ value, text, loading: false });\n    this.publishEvent(new SceneVariableValueChangedEvent(this), true);\n  }\n\n  private findLabelTextForValue(value: VariableValueSingle): VariableValueSingle {\n    if (value === ALL_VARIABLE_VALUE) {\n      return ALL_VARIABLE_TEXT;\n    }\n\n    const option = this.state.options.find((x) => x.value === value);\n    if (option) {\n      return option.label;\n    }\n\n    const optionByLabel = this.state.options.find((x) => x.label === value);\n    if (optionByLabel) {\n      return optionByLabel.label;\n    }\n\n    return value;\n  }\n\n  /**\n   * This helper function is to counter the contravariance of setState\n   */\n  private setStateHelper(state: Partial<MultiValueVariableState>) {\n    setBaseClassState<MultiValueVariableState>(this, state);\n  }\n\n  public getOptionsForSelect(): VariableValueOption[] {\n    let options = this.state.options;\n\n    if (this.state.includeAll) {\n      options = [{ value: ALL_VARIABLE_VALUE, label: ALL_VARIABLE_TEXT }, ...options];\n    }\n\n    if (!Array.isArray(this.state.value)) {\n      const current = options.find((x) => x.value === this.state.value);\n      if (!current) {\n        options = [{ value: this.state.value, label: String(this.state.text) }, ...options];\n      }\n    }\n\n    return options;\n  }\n\n  public refreshOptions() {\n    this.getValueOptions({}).subscribe((options) => {\n        this.updateValueGivenNewOptions(options);\n    });\n  }\n\n  /**\n   * Can be used by subclasses to do custom handling of option search based on search input\n   */\n  public onSearchChange?(searchFilter: string): void;\n}\n\n/**\n * Looks for matching option, first by value but as a fallback by text (label).\n */\nfunction findOptionMatchingCurrent(\n  currentValue: VariableValue,\n  currentText: VariableValue,\n  options: VariableValueOption[]\n) {\n  let textMatch: VariableValueOption | undefined;\n\n  for (const item of options) {\n    if (item.value === currentValue) {\n      return item;\n    }\n\n    // No early return here as want to continue to look a value match\n    if (item.label === currentText) {\n      textMatch = item;\n    }\n  }\n\n  return textMatch;\n}\n\nexport class MultiValueUrlSyncHandler<TState extends MultiValueVariableState = MultiValueVariableState>\n  implements SceneObjectUrlSyncHandler\n{\n  public constructor(private _sceneObject: MultiValueVariable<TState>) {}\n\n  private getKey(): string {\n    return `var-${this._sceneObject.state.name}`;\n  }\n\n  public getKeys(): string[] {\n    if (this._sceneObject.state.skipUrlSync) {\n      return [];\n    }\n\n    return [this.getKey()];\n  }\n\n  public getUrlState(): SceneObjectUrlValues {\n    if (this._sceneObject.state.skipUrlSync) {\n      return {};\n    }\n\n    let urlValue: string | string[] | null = null;\n    let value = this._sceneObject.state.value;\n\n    if (Array.isArray(value)) {\n      urlValue = value.map(String);\n    } else if ((this, this._sceneObject.state.isMulti)) {\n      // If we are inMulti mode we must return an array here as otherwise UrlSyncManager will not pass all values (in an array) in updateFromUrl\n      urlValue = [String(value)];\n    } else {\n      urlValue = String(value);\n    }\n\n    return { [this.getKey()]: urlValue };\n  }\n\n  public updateFromUrl(values: SceneObjectUrlValues): void {\n    let urlValue = values[this.getKey()];\n\n    if (urlValue != null) {\n      // This is to be backwards compatible with old url all value\n      if (this._sceneObject.state.includeAll) {\n        urlValue = handleLegacyUrlAllValue(urlValue);\n      }\n\n      // For edge cases where data links include variables with custom all value.\n      // We want the variable to maintain the \"All\" meta value not the actual custom vall value. (Fixes https://github.com/grafana/grafana/issues/28635)\n      if (this._sceneObject.state.allValue && this._sceneObject.state.allValue === urlValue) {\n        urlValue = ALL_VARIABLE_VALUE;\n      }\n\n      /**\n       * Initial URL Sync happens before scene objects are activated.\n       * We need to skip validation in this case to make sure values set via URL are maintained.\n       */\n      if (!this._sceneObject.isActive) {\n        this._sceneObject.skipNextValidation = true;\n      }\n\n      this._sceneObject.changeValueTo(urlValue);\n    }\n  }\n}\n\nfunction handleLegacyUrlAllValue(value: string | string[]) {\n  if (isArray(value) && value[0] === ALL_VARIABLE_TEXT) {\n    return [ALL_VARIABLE_VALUE];\n  } else if (value === ALL_VARIABLE_TEXT) {\n    return ALL_VARIABLE_VALUE;\n  }\n\n  return value;\n}\n\n/**\n * Variable getValue can return this to skip any subsequent formatting.\n * This is useful for custom all values that should not be escaped/formatted.\n */\nexport class CustomAllValue implements CustomVariableValue {\n  public constructor(private _value: string, private _variable: SceneVariable) {}\n\n  public formatter(formatNameOrFn?: string | VariableCustomFormatterFn): string {\n    if (formatNameOrFn === VariableFormatID.Text) {\n      return ALL_VARIABLE_TEXT;\n    }\n\n    if (formatNameOrFn === VariableFormatID.PercentEncode) {\n      return formatRegistry.get(VariableFormatID.PercentEncode).formatter(this._value, [], this._variable);\n    }\n\n    if (formatNameOrFn === VariableFormatID.QueryParam) {\n      return formatRegistry.get(VariableFormatID.QueryParam).formatter(ALL_VARIABLE_TEXT, [], this._variable);\n    }\n\n    return this._value;\n  }\n}\n","import { SceneObject } from '../../core/types';\nimport { isCustomVariableValue, SceneVariable } from '../types';\nimport { formatRegistry, FormatVariable } from '../interpolation/formatRegistry';\nimport { SkipFormattingValue } from './types';\nimport { VariableFormatID } from '@grafana/schema';\nimport { MultiValueVariable } from '../variants/MultiValueVariable';\nimport { ALL_VARIABLE_VALUE } from '../constants';\n\nexport class AllVariablesMacro implements FormatVariable {\n  public state: { name: string; type: string };\n  private _sceneObject: SceneObject;\n\n  public constructor(name: string, sceneObject: SceneObject) {\n    this.state = { name, type: 'url_variable' };\n    this._sceneObject = sceneObject;\n  }\n\n  public getValue(): SkipFormattingValue {\n    const allVars = collectAllVariables(this._sceneObject);\n    const format = formatRegistry.get(VariableFormatID.QueryParam);\n    const params: string[] = [];\n\n    for (const name of Object.keys(allVars)) {\n      const variable = allVars[name];\n\n      if (variable instanceof MultiValueVariable && variable.hasAllValue() && !variable.state.allValue) {\n        params.push(format.formatter(ALL_VARIABLE_VALUE, [], variable))\n        continue;\n      }\n\n      const value = variable.getValue();\n\n      if (!value) {\n        continue;\n      }\n\n      if (isCustomVariableValue(value)) {\n        params.push(value.formatter(VariableFormatID.QueryParam));\n      } else {\n        params.push(format.formatter(value, [], variable));\n      }\n    }\n\n    return new SkipFormattingValue(params.join('&'));\n  }\n\n  public getValueText?(): string {\n    return '';\n  }\n}\n\nfunction collectAllVariables(\n  sceneObject: SceneObject,\n  record: Record<string, SceneVariable> = {}\n): Record<string, SceneVariable> {\n  if (sceneObject.state.$variables) {\n    for (const variable of sceneObject.state.$variables.state.variables) {\n      if (variable.state.skipUrlSync) {\n        continue;\n      }\n\n      if (!record[variable.state.name]) {\n        record[variable.state.name] = variable;\n      }\n    }\n  }\n\n  if (sceneObject.parent) {\n    collectAllVariables(sceneObject.parent, record);\n  }\n\n  return record;\n}\n","import { Field, DataFrame, getFieldDisplayName, formatLabels } from '@grafana/data';\n\n/**\n * This object is created often, and only used when tmplates exist.  Using a proxy lets us delay\n * calculations of the more complex structures (label names) until they are actually used\n */\nexport function getTemplateProxyForField(field: Field, frame?: DataFrame, frames?: DataFrame[]): any {\n  return new Proxy(\n    {}, // This object shows up in test snapshots\n    {\n      get: (obj, key) => {\n        if (key === 'name') {\n          return field.name;\n        }\n\n        if (key === 'displayName') {\n          return getFieldDisplayName(field, frame, frames);\n        }\n\n        if (key === 'labels' || key === 'formattedLabels') {\n          // formattedLabels deprecated\n          if (!field.labels) {\n            return '';\n          }\n          return {\n            ...field.labels,\n            __values: Object.values(field.labels).sort().join(', '),\n            toString: () => {\n              return formatLabels(field.labels!, '', true);\n            },\n          };\n        }\n        return undefined;\n      },\n    }\n  );\n}\n","import {\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  ScopedVars,\n  DataContextScopedVar,\n  getFieldDisplayValuesProxy,\n  getFrameDisplayName,\n} from '@grafana/data';\nimport { SceneObject } from '../../core/types';\nimport { getFieldAccessor } from '../interpolation/fieldAccessorCache';\nimport { FormatVariable } from '../interpolation/formatRegistry';\nimport { VariableValue } from '../types';\nimport { getTemplateProxyForField } from './templateProxies';\n\n/**\n * This macro handles the ${__value.*} interpolation\n * match represents the regex match and is the full expression, example `${varname.fieldpath}`\n * Macros can return the match when they identify that there required data context is not provided.\n * This leaves the expression intact so that it can be interpolated later when the data context is available.\n */\nexport class ValueMacro implements FormatVariable {\n  public state: { name: string; type: string };\n\n  public constructor(name: string, sceneObject: SceneObject, private _match: string, private _scopedVars?: ScopedVars) {\n    this.state = { name, type: '__value' };\n  }\n\n  public getValue(fieldPath?: string): VariableValue {\n    const dataContext: DataContextScopedVar | undefined = this._scopedVars?.__dataContext;\n    if (!dataContext) {\n      return this._match;\n    }\n\n    const { frame, rowIndex, field, calculatedValue } = dataContext.value;\n\n    if (calculatedValue) {\n      switch (fieldPath) {\n        case 'numeric':\n          return calculatedValue.numeric;\n        case 'raw':\n          return calculatedValue.numeric;\n        case 'time':\n          return '';\n        case 'text':\n        default:\n          return formattedValueToString(calculatedValue);\n      }\n    }\n\n    if (rowIndex == null) {\n      return this._match;\n    }\n\n    if (fieldPath === 'time') {\n      const timeField = frame.fields.find((f) => f.type === FieldType.time);\n      return timeField ? timeField.values.get(rowIndex) : undefined;\n    }\n\n    if (!field) {\n      return this._match;\n    }\n\n    const value = field.values.get(rowIndex);\n    if (fieldPath === 'raw') {\n      return value;\n    }\n\n    const displayProcessor = field.display ?? fallbackDisplayProcessor;\n    const result = displayProcessor(value);\n\n    switch (fieldPath) {\n      case 'numeric':\n        return result.numeric;\n      case 'text':\n      default:\n        return formattedValueToString(result);\n    }\n  }\n\n  public getValueText?(): string {\n    return '';\n  }\n}\n\nconst fallbackDisplayProcessor = getDisplayProcessor();\n\n/**\n * This macro handles the ${__data.*} interpolation. This is a bit poorly named as most of the\n * expressions that this macro evaluates are really \"row\" based values enabling you to access\n * values in other fields on the same row.\n */\nexport class DataMacro implements FormatVariable {\n  public state: { name: string; type: string };\n\n  public constructor(name: string, sceneObject: SceneObject, private _match: string, private _scopedVars?: ScopedVars) {\n    this.state = { name, type: '__data' };\n  }\n\n  public getValue(fieldPath?: string): VariableValue {\n    const dataContext = this._scopedVars?.__dataContext;\n    if (!dataContext || !fieldPath) {\n      return this._match;\n    }\n\n    const { frame, rowIndex } = dataContext.value;\n\n    if (rowIndex === undefined || fieldPath === undefined) {\n      return this._match;\n    }\n\n    const obj = {\n      name: frame.name,\n      refId: frame.refId,\n      fields: getFieldDisplayValuesProxy({ frame, rowIndex }),\n    };\n\n    return getFieldAccessor(fieldPath)(obj) ?? '';\n  }\n\n  public getValueText?(): string {\n    return '';\n  }\n}\n\n/**\n * This macro handles the ${__series.name} interpolation.\n */\nexport class SeriesMacro implements FormatVariable {\n  public state: { name: string; type: string };\n\n  public constructor(name: string, sceneObject: SceneObject, private _match: string, private _scopedVars?: ScopedVars) {\n    this.state = { name, type: '__series' };\n  }\n\n  public getValue(fieldPath?: string): VariableValue {\n    const dataContext = this._scopedVars?.__dataContext;\n    if (!dataContext || !fieldPath) {\n      return this._match;\n    }\n\n    if (fieldPath !== 'name') {\n      return this._match;\n    }\n\n    const { frame, frameIndex } = dataContext.value;\n    return getFrameDisplayName(frame, frameIndex);\n  }\n\n  public getValueText?(): string {\n    return '';\n  }\n}\n\n/**\n * This macro handles the ${__field.*} interpolation. These do not require a data context.\n * And can be easily used in field config options like displayName.\n */\nexport class FieldMacro implements FormatVariable {\n  public state: { name: string; type: string };\n\n  public constructor(name: string, sceneObject: SceneObject, private _match: string, private _scopedVars?: ScopedVars) {\n    this.state = { name, type: '__field' };\n  }\n\n  public getValue(fieldPath?: string): VariableValue {\n    const dataContext = this._scopedVars?.__dataContext;\n    if (!dataContext || !fieldPath) {\n      return this._match;\n    }\n\n    if (fieldPath === undefined || fieldPath === '') {\n      return this._match;\n    }\n\n    const { frame, field, data } = dataContext.value;\n    const obj = getTemplateProxyForField(field, frame, data);\n\n    return getFieldAccessor(fieldPath)(obj) ?? '';\n  }\n\n  public getValueText?(): string {\n    return '';\n  }\n}\n","import { config, locationService } from '@grafana/runtime';\nimport { SceneObject } from '../../core/types';\nimport { FormatVariable } from '../interpolation/formatRegistry';\nimport { CustomVariableValue } from '../types';\n\nexport class UrlMacro implements FormatVariable {\n  public state: { name: string; type: string };\n\n  public constructor(name: string, _: SceneObject) {\n    this.state = { name: name, type: 'url_macro' };\n  }\n\n  public getValue(fieldPath?: string) {\n    const location = locationService.getLocation();\n    const subUrl = config.appSubUrl ?? '';\n\n    switch (fieldPath ?? '') {\n      case 'params':\n        return new UrlStateFormatter(location.search);\n      case 'path':\n        return subUrl + location.pathname;\n      case '':\n      default:\n        return subUrl + location.pathname + location.search;\n    }\n  }\n\n  public getValueText?(): string {\n    return '';\n  }\n}\n\nclass UrlStateFormatter implements CustomVariableValue {\n  public constructor(private _urlQueryParams: string) {}\n\n  public formatter(options: string): string {\n    if (!options) {\n      return this._urlQueryParams;\n    }\n\n    const params = options.split(':');\n    if (params[0] === 'exclude' && params.length > 1) {\n      const allParams = new URLSearchParams(this._urlQueryParams);\n      for (const param of params[1].split(',')) {\n        allParams.delete(param);\n      }\n\n      return `?${allParams}`;\n    }\n\n    if (params[0] === 'include' && params.length > 1) {\n      const allParams = new URLSearchParams(this._urlQueryParams);\n      const includeOnly = params[1].split(',');\n\n      for (const param of allParams.keys()) {\n        if (!includeOnly.includes(param)) {\n          allParams.delete(param);\n        }\n      }\n\n      return `?${allParams}`;\n    }\n\n    return this._urlQueryParams;\n  }\n}\n","import { SceneObject } from '../../core/types';\nimport { FormatVariable } from '../interpolation/formatRegistry';\nimport { config } from '@grafana/runtime';\n\n/**\n * Handles expressions like ${__user.login}\n */\nexport class UserMacro implements FormatVariable {\n  public state: { name: string; type: string };\n\n  public constructor(name: string, _: SceneObject) {\n    this.state = { name: name, type: 'user_macro' };\n  }\n\n  public getValue(fieldPath?: string): string {\n    const user = config.bootData.user;\n\n    switch (fieldPath) {\n      case 'login':\n        return user.login;\n      case 'email':\n        return user.email;\n      case 'id':\n      default:\n        return String(user.id);\n    }\n  }\n\n  public getValueText?(): string {\n    return '';\n  }\n}\n\n/**\n * Handles expressions like ${__org.name}\n */\nexport class OrgMacro implements FormatVariable {\n  public state: { name: string; type: string };\n\n  public constructor(name: string, _: SceneObject) {\n    this.state = { name: name, type: 'org_macro' };\n  }\n\n  public getValue(fieldPath?: string): string {\n    const user = config.bootData.user;\n\n    switch (fieldPath) {\n      case 'name':\n        return user.orgName;\n      case 'id':\n      default:\n        return String(user.orgId);\n    }\n  }\n\n  public getValueText?(): string {\n    return '';\n  }\n}\n","import { DataLinkBuiltInVars } from '@grafana/data';\nimport { MacroVariableConstructor } from './types';\nimport { IntervalMacro, TimeFromAndToMacro, TimezoneMacro, UrlTimeRangeMacro } from './timeMacros';\nimport { AllVariablesMacro } from './AllVariablesMacro';\nimport { DataMacro, FieldMacro, SeriesMacro, ValueMacro } from './dataMacros';\nimport { UrlMacro } from './urlMacros';\nimport { OrgMacro, UserMacro } from './contextMacros';\n\nexport const macrosIndex = new Map<string, MacroVariableConstructor>([\n  [DataLinkBuiltInVars.includeVars, AllVariablesMacro],\n  [DataLinkBuiltInVars.keepTime, UrlTimeRangeMacro],\n  ['__value', ValueMacro],\n  ['__data', DataMacro],\n  ['__series', SeriesMacro],\n  ['__field', FieldMacro],\n  ['__url', UrlMacro],\n  ['__from', TimeFromAndToMacro],\n  ['__to', TimeFromAndToMacro],\n  ['__timezone', TimezoneMacro],\n  ['__user', UserMacro],\n  ['__org', OrgMacro],\n  ['__interval', IntervalMacro],\n  ['__interval_ms', IntervalMacro],\n]);\n\n/**\n * Allows you to register a variable expression macro that can then be used in strings with syntax ${<macro_name>.<fieldPath>}\n * Call this on app activation and unregister the macro on deactivation.\n * @returns a function that unregisters the macro\n */\nexport function registerVariableMacro(name: string, macro: MacroVariableConstructor): () => void {\n  if (macrosIndex.get(name)) {\n    throw new Error(`Macro already registered ${name}`);\n  }\n\n  macrosIndex.set(name, macro);\n\n  return () => {\n    macrosIndex.delete(name);\n  };\n}\n","import { ScopedVars } from '@grafana/data';\nimport { VariableInterpolation } from '@grafana/runtime';\nimport { VariableType, VariableFormatID } from '@grafana/schema';\n\nimport { SceneObject } from '../../core/types';\nimport { InterpolationFormatParameter, isCustomVariableValue, VariableValue } from '../types';\n\nimport { getSceneVariableForScopedVar } from './ScopedVarsVariable';\nimport { formatRegistry, FormatVariable } from './formatRegistry';\nimport { VARIABLE_REGEX } from '../constants';\nimport { lookupVariable } from '../lookupVariable';\nimport { macrosIndex } from '../macros';\n\n/**\n * This function will try to parse and replace any variable expression found in the target string. The sceneObject will be used as the source of variables. It will\n * use the scene graph and walk up the parent tree until it finds the closest variable.\n *\n * ScopedVars should not really be needed much in the new scene architecture as they can be added to the local scene node instead of passed in interpolate function.\n * It is supported here for backward compatibility and some edge cases where adding scoped vars to local scene node is not practical.\n */\nexport function sceneInterpolator(\n  sceneObject: SceneObject,\n  target: string | undefined | null,\n  scopedVars?: ScopedVars,\n  format?: InterpolationFormatParameter,\n  interpolations?: VariableInterpolation[]\n): string {\n  if (!target || typeof target !== 'string') {\n    return target ?? '';\n  }\n\n  VARIABLE_REGEX.lastIndex = 0;\n\n  return target.replace(VARIABLE_REGEX, (match, var1, var2, fmt2, var3, fieldPath, fmt3) => {\n    const variableName = var1 || var2 || var3;\n    const fmt = fmt2 || fmt3 || format;\n    const variable = lookupFormatVariable(variableName, match, scopedVars, sceneObject);\n\n    if (!variable) {\n      if (interpolations) {\n        // Set `value` equal to `match` as documented in the `VariableInterpolation` interface.\n        interpolations.push({ match, variableName, fieldPath, format: fmt, value: match, found: false });\n      }\n      return match;\n    }\n\n    const value = formatValue(sceneObject, variable, variable.getValue(fieldPath), fmt);\n\n    if (interpolations) {\n      interpolations.push({ match, variableName, fieldPath, format: fmt, value, found: value !== match });\n    }\n\n    return value;\n  });\n}\n\nfunction lookupFormatVariable(\n  name: string,\n  match: string,\n  scopedVars: ScopedVars | undefined,\n  sceneObject: SceneObject\n): FormatVariable | null {\n  if (scopedVars && scopedVars.hasOwnProperty(name)) {\n    const scopedVar = scopedVars[name];\n\n    if (scopedVar) {\n      return getSceneVariableForScopedVar(name, scopedVar);\n    }\n  }\n\n  const variable = lookupVariable(name, sceneObject);\n  if (variable) {\n    return variable;\n  }\n\n  const Macro = macrosIndex.get(name);\n  if (Macro) {\n    return new Macro(name, sceneObject, match, scopedVars);\n  }\n\n  return null;\n}\n\nfunction formatValue(\n  context: SceneObject,\n  variable: FormatVariable,\n  value: VariableValue | undefined | null,\n  formatNameOrFn?: InterpolationFormatParameter\n): string {\n  if (value === null || value === undefined) {\n    return '';\n  }\n\n  // Variable can return a custom value that handles formatting\n  // This is useful for customAllValue and macros that return values that are already formatted or need special formatting\n  if (isCustomVariableValue(value)) {\n    return sceneInterpolator(context, value.formatter(formatNameOrFn));\n  }\n\n  // if it's an object transform value to string\n  if (!Array.isArray(value) && typeof value === 'object') {\n    value = `${value}`;\n  }\n\n  if (typeof formatNameOrFn === 'function') {\n    return formatNameOrFn(value, {\n      name: variable.state.name,\n      type: variable.state.type as VariableType,\n      multi: variable.state.isMulti,\n      includeAll: variable.state.includeAll,\n    });\n  }\n\n  let args: string[] = [];\n\n  if (!formatNameOrFn) {\n    formatNameOrFn = VariableFormatID.Glob;\n  } else {\n    // some formats have arguments that come after ':' character\n    args = formatNameOrFn.split(':');\n    if (args.length > 1) {\n      formatNameOrFn = args[0];\n      args = args.slice(1);\n    } else {\n      args = [];\n    }\n  }\n\n  let formatter = formatRegistry.getIfExists(formatNameOrFn);\n\n  if (!formatter) {\n    console.error(`Variable format ${formatNameOrFn} not found. Using glob format as fallback.`);\n    formatter = formatRegistry.get(VariableFormatID.Glob);\n  }\n\n  return formatter.formatter(value, args, variable);\n}\n","import React from 'react';\nimport { MonoTypeOperatorFunction, Observable, Unsubscribable } from 'rxjs';\n\nimport {\n  BusEvent,\n  BusEventHandler,\n  BusEventType,\n  DataFrame,\n  DataQueryRequest,\n  DataSourceGetTagKeysOptions,\n  DataSourceGetTagValuesOptions,\n  DataTransformContext,\n  PanelData,\n  TimeRange,\n} from '@grafana/data';\nimport { DataQuery, DataTopic, TimeZone } from '@grafana/schema';\n\nimport { SceneVariableDependencyConfigLike, SceneVariables } from '../variables/types';\nimport { SceneObjectRef } from './SceneObjectRef';\n\nexport interface SceneObjectState {\n  key?: string;\n  $timeRange?: SceneTimeRangeLike;\n  $data?: SceneDataProvider;\n  $variables?: SceneVariables;\n  /**\n   * @experimental\n   * Can be used to add extra behaviors to a scene object.\n   * These are activated when the their parent scene object is activated.\n   */\n  $behaviors?: Array<SceneObject | SceneStatelessBehavior>;\n}\n\nexport interface SceneLayoutChildOptions {\n  width?: number | string;\n  height?: number | string;\n  xSizing?: 'fill' | 'content';\n  ySizing?: 'fill' | 'content';\n  x?: number;\n  y?: number;\n  minWidth?: number | string;\n  minHeight?: number | string;\n  isDraggable?: boolean;\n  isResizable?: boolean;\n}\n\nexport interface SceneComponentProps<T> {\n  model: T;\n}\n\nexport type SceneComponent<TModel> = (props: SceneComponentProps<TModel>) => React.ReactElement | null;\n\nexport interface SceneDataState extends SceneObjectState {\n  data?: PanelData;\n}\n\nexport interface SceneObject<TState extends SceneObjectState = SceneObjectState> {\n  /** The current state */\n  readonly state: TState;\n\n  /** True when there is a React component mounted for this Object */\n  readonly isActive: boolean;\n\n  /** SceneObject parent */\n  readonly parent?: SceneObject;\n\n  /** This abtractions declares what variables the scene object depends on and how to handle when they change value. **/\n  readonly variableDependency?: SceneVariableDependencyConfigLike;\n\n  /** This abstraction declares URL sync dependencies of a scene object. **/\n  readonly urlSync?: SceneObjectUrlSyncHandler;\n\n  /** Subscribe to state changes */\n  subscribeToState(handler: SceneStateChangedHandler<TState>): Unsubscribable;\n\n  /** Subscribe to a scene event */\n  subscribeToEvent<T extends BusEvent>(typeFilter: BusEventType<T>, handler: BusEventHandler<T>): Unsubscribable;\n\n  /** Publish an event and optionally bubble it up the scene */\n  publishEvent(event: BusEvent, bubble?: boolean): void;\n\n  /** Utility hook that wraps useObservable. Used by React components to subscribes to state changes */\n  useState(): TState;\n\n  /** How to modify state */\n  setState(state: Partial<TState>): void;\n\n  /**\n   * Called when the Component is mounted. This will also activate any $data, $variables or $timeRange scene object on this level.\n   * Don't override this in your custom SceneObjects, instead use addActivationHandler from the constructor.\n   **/\n  activate(): CancelActivationHandler;\n\n  /** Get the scene root */\n  getRoot(): SceneObject;\n\n  /** Returns a deep clone this object and all its children */\n  clone(state?: Partial<TState>): this;\n\n  /** A React component to use for rendering the object */\n  Component(props: SceneComponentProps<SceneObject<TState>>): React.ReactElement | null;\n\n  /** Force a re-render, should only be needed when variable values change */\n  forceRender(): void;\n\n  /** Returns a SceneObjectRef that will resolve to this object */\n  getRef(): SceneObjectRef<this>;\n\n  /**\n   * Allows external code to register code that is executed on activate and deactivate. This allow you\n   * to wire up scene objects that need to respond to state changes in other objects from the outside.\n   **/\n  addActivationHandler(handler: SceneActivationHandler): void;\n\n  /**\n   * Loop through state and call callback for each direct child scene object.\n   * Checks 1 level deep properties and arrays. So a scene object hidden in a nested plain object will not be detected.\n   */\n  forEachChild(callback: (child: SceneObject) => void): void;\n}\n\nexport type SceneActivationHandler = () => SceneDeactivationHandler | void;\nexport type SceneDeactivationHandler = () => void;\n\n/**\n * Function returned by activate() that when called will deactivate the object if it's the last activator\n **/\nexport type CancelActivationHandler = () => void;\n\nexport interface SceneLayoutState extends SceneObjectState {\n  children: SceneObject[];\n}\n\nexport interface SceneLayout<T extends SceneLayoutState = SceneLayoutState> extends SceneObject<T> {\n  isDraggable(): boolean;\n  getDragClass?(): string;\n  getDragClassCancel?(): string;\n}\n\nexport interface SceneTimeRangeState extends SceneObjectState {\n  from: string;\n  to: string;\n  fiscalYearStartMonth?: number;\n  value: TimeRange;\n  timeZone?: TimeZone;\n  /** weekStart will change the global date locale so having multiple different weekStart values is not supported  */\n  weekStart?: string;\n  /**\n   * @internal\n   * To enable feature parity with the old time range picker, not sure if it will be kept.\n   * Override the now time by entering a time delay. Use this option to accommodate known delays in data aggregation to avoid null values.\n   * */\n  UNSAFE_nowDelay?: string;\n\n  refreshOnActivate?: {\n    /**\n     * When set, the time range will invalidate relative ranges after the specified interval has elapsed\n     */\n    afterMs?: number;\n    /**\n     * When set, the time range will invalidate relative ranges after the specified percentage of the current interval has elapsed.\n     * If both invalidate values are set, the smaller value will be used for the given interval.\n     */\n    percent?: number;\n  };\n}\n\nexport interface SceneTimeRangeLike extends SceneObject<SceneTimeRangeState> {\n  onTimeZoneChange(timeZone: TimeZone): void;\n  onTimeRangeChange(timeRange: TimeRange): void;\n  onRefresh(): void;\n  getTimeZone(): TimeZone;\n}\n\nexport function isSceneObject(obj: any): obj is SceneObject {\n  return obj.useState !== undefined;\n}\n\nexport interface SceneObjectWithUrlSync extends SceneObject {\n  getUrlState(): SceneObjectUrlValues;\n  updateFromUrl(values: SceneObjectUrlValues): void;\n  shouldCreateHistoryStep?(values: SceneObjectUrlValues): boolean;\n}\n\nexport interface SceneObjectUrlSyncHandler {\n  getKeys(): string[];\n  getUrlState(): SceneObjectUrlValues;\n  updateFromUrl(values: SceneObjectUrlValues): void;\n  shouldCreateHistoryStep?(values: SceneObjectUrlValues): boolean;\n}\n\nexport interface DataRequestEnricher {\n  // Return partial data query request that will be merged with the original request provided by SceneQueryRunner\n  enrichDataRequest(source: SceneObject): Partial<DataQueryRequest> | null;\n}\n\nexport interface FiltersRequestEnricher {\n  // Return partial getTagKeys or getTagValues query request that will be merged with the original request provided by ad hoc or group by variable\n  enrichFiltersRequest(\n    source: SceneObject\n  ): Partial<DataSourceGetTagKeysOptions | DataSourceGetTagValuesOptions> | null;\n}\n\nexport function isDataRequestEnricher(obj: any): obj is DataRequestEnricher {\n  return 'enrichDataRequest' in obj;\n}\n\nexport function isFiltersRequestEnricher(obj: any): obj is FiltersRequestEnricher {\n  return 'enrichFiltersRequest' in obj;\n}\n\nexport type SceneObjectUrlValue = string | string[] | undefined | null;\nexport type SceneObjectUrlValues = Record<string, SceneObjectUrlValue>;\n\nexport type CustomTransformOperator = (context: DataTransformContext) => MonoTypeOperatorFunction<DataFrame[]>;\nexport type CustomTransformerDefinition =\n  | { operator: CustomTransformOperator; topic: DataTopic }\n  | CustomTransformOperator;\nexport type SceneStateChangedHandler<TState> = (newState: TState, prevState: TState) => void;\n\nexport type DeepPartial<T> = {\n  [K in keyof T]?: T[K] extends object ? DeepPartial<T[K]> : T[K];\n};\n\nexport interface SceneDataProviderResult {\n  data: PanelData;\n  origin: SceneDataProvider;\n}\n\nexport interface SceneDataProvider<T extends SceneObjectState = SceneDataState> extends SceneObject<T> {\n  setContainerWidth?: (width: number) => void;\n  isDataReadyToDisplay?: () => boolean;\n  cancelQuery?: () => void;\n  getResultsStream(): Observable<SceneDataProviderResult>;\n}\n\nexport interface SceneDataLayerProviderState extends SceneDataState {\n  name: string;\n  description?: string;\n  isEnabled?: boolean;\n  isHidden?: boolean;\n}\n\nexport interface SceneDataLayerProvider extends SceneDataProvider<SceneDataLayerProviderState> {\n  isDataLayer: true;\n}\n\nexport function isDataLayer(obj: SceneObject): obj is SceneDataLayerProvider {\n  return 'isDataLayer' in obj;\n}\n\nexport interface DataLayerFilter {\n  panelId: number;\n}\n\nexport interface SceneStatelessBehavior<T extends SceneObject = any> {\n  (sceneObject: T): CancelActivationHandler | void;\n}\n\nexport type ControlsLayout = 'horizontal' | 'vertical';\n\nexport interface UseStateHookOptions {\n  /**\n   * For some edge cases other scene objects want to subscribe to scene object state for objects\n   * that are not active, or whose main React Component can be un-mounted. Set this to true\n   * to keep the scene object active even if the React component is unmounted.\n   *\n   * Normally you would not need this but this can be useful in some edge cases.\n   *\n   * @experimental\n   */\n  shouldActivateOrKeepAlive?: boolean;\n}\n\nexport interface SceneDataQuery extends DataQuery {\n  [key: string]: any;\n\n  // Opt this query out of time window comparison\n  timeRangeCompare?: boolean;\n}\n\nexport interface SceneUrlSyncOptions {\n  /**\n   * This will update the url to contain all scene url state\n   * when the scene is initialized. Important for browser history \"back\" actions.\n   */\n  updateUrlOnInit?: boolean;\n  /**\n   * This is only supported by some objects if they implement\n   * shouldCreateHistoryStep where they can control what changes\n   * url changes should add a new browser history entry.\n   */\n  createBrowserHistorySteps?: boolean;\n}\n","import { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneObject, SceneObjectState, SceneStatelessBehavior } from '../core/types';\nimport { DataQueryRequest } from '@grafana/data';\nimport { LoadingState } from '@grafana/schema';\n\nexport interface SceneQueryStateControllerState extends SceneObjectState {\n  isRunning: boolean;\n}\n\nexport interface SceneQueryControllerLike extends SceneObject<SceneQueryStateControllerState> {\n  isQueryController: true;\n  cancelAll(): void;\n\n  queryStarted(entry: SceneQueryControllerEntry): void;\n  queryCompleted(entry: SceneQueryControllerEntry): void;\n}\n\nexport function isQueryController(s: SceneObject | SceneStatelessBehavior): s is SceneQueryControllerLike {\n  return 'isQueryController' in s;\n}\n\nexport interface QueryResultWithState {\n  state: LoadingState;\n}\n\nexport interface SceneQueryControllerEntry {\n  request?: DataQueryRequest;\n  type: SceneQueryControllerEntryType;\n  origin: SceneObject;\n  cancel?: () => void;\n}\n\nexport type SceneQueryControllerEntryType = 'data' | 'annotations' | 'variable' | 'alerts';\n\nexport class SceneQueryController\n  extends SceneObjectBase<SceneQueryStateControllerState>\n  implements SceneQueryControllerLike\n{\n  public isQueryController: true = true;\n\n  #running = new Set<SceneQueryControllerEntry>();\n\n  public constructor() {\n    super({ isRunning: false });\n\n    // Clear running state on deactivate\n    this.addActivationHandler(() => {\n      return () => this.#running.clear();\n    });\n  }\n\n  public queryStarted(entry: SceneQueryControllerEntry) {\n    this.#running.add(entry);\n\n    this.changeRunningQueryCount(1);\n\n    if (!this.state.isRunning) {\n      this.setState({ isRunning: true });\n    }\n  }\n\n  public queryCompleted(entry: SceneQueryControllerEntry) {\n    if (!this.#running.has(entry)) {\n      return;\n    }\n\n    this.#running.delete(entry);\n\n    this.changeRunningQueryCount(-1);\n\n    if (this.#running.size === 0) {\n      this.setState({ isRunning: false });\n    }\n  }\n\n  private changeRunningQueryCount(dir: 1 | -1) {\n    /**\n     * Used by grafana-image-renderer to know when all queries are completed.\n     */\n    (window as any).__grafanaRunningQueryCount = ((window as any).__grafanaRunningQueryCount ?? 0) + dir;\n  }\n\n  public cancelAll() {\n    for (const entry of this.#running.values()) {\n      entry.cancel?.();\n    }\n  }\n}\n","export function writeSceneLog(logger: string, message: string, ...rest: unknown[]) {\n  let loggingEnabled = false;\n\n  if (typeof window !== 'undefined') {\n    loggingEnabled = localStorage.getItem('grafana.debug.scenes') === 'true';\n  }\n\n  if (loggingEnabled) {\n    console.log(`${logger}: `, message, ...rest);\n  }\n}\n","import { DataSourceApi, ScopedVars } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { DataSourceRef } from '@grafana/schema';\nimport { runtimeDataSources } from '../querying/RuntimeDataSource';\n\nexport async function getDataSource(\n  datasource: DataSourceRef | undefined | null,\n  scopedVars: ScopedVars\n): Promise<DataSourceApi> {\n  if (datasource?.uid) {\n    const runtimeDataSource = runtimeDataSources.get(datasource.uid);\n    if (runtimeDataSource) {\n      return runtimeDataSource;\n    }\n  }\n\n  if (datasource && (datasource as any).query) {\n    return datasource as DataSourceApi;\n  }\n\n  return await getDataSourceSrv().get(datasource as string, scopedVars);\n}\n","import { sceneGraph } from '../core/sceneGraph';\nimport { SceneObject } from '../core/types';\nimport { SceneVariable, VariableValue } from './types';\nimport { isVariableValueEqual } from './utils';\n\n/**\n * Useful for remembering variable values to know if they have changed\n **/\nexport class VariableValueRecorder {\n  private _values = new Map<string, VariableValue | undefined | null>();\n\n  public recordCurrentDependencyValuesForSceneObject(sceneObject: SceneObject) {\n    this.clearValues();\n\n    if (!sceneObject.variableDependency) {\n      return;\n    }\n\n    for (const variableName of sceneObject.variableDependency.getNames()) {\n      const variable = sceneGraph.lookupVariable(variableName, sceneObject);\n      if (variable) {\n        this._values.set(variable.state.name, variable.getValue());\n      }\n    }\n  }\n\n  public cloneAndRecordCurrentValuesForSceneObject(sceneObject: SceneObject) {\n    const clone = new VariableValueRecorder();\n    clone.recordCurrentDependencyValuesForSceneObject(sceneObject);\n    return clone;\n  }\n\n  public clearValues() {\n    this._values.clear();\n  }\n\n  public hasValues(): boolean {\n    return !!this._values;\n  }\n\n  public recordCurrentValue(variable: SceneVariable) {\n    this._values.set(variable.state.name, variable.getValue());\n  }\n\n  public hasRecordedValue(variable: SceneVariable): boolean {\n    return this._values.has(variable.state.name);\n  }\n\n  public hasValueChanged(variable: SceneVariable): boolean {\n    if (this._values.has(variable.state.name)) {\n      const value = this._values.get(variable.state.name);\n      if (!isVariableValueEqual(value, variable.getValue())) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public hasDependenciesChanged(sceneObject: SceneObject): boolean {\n    if (!this._values) {\n      return false;\n    }\n\n    if (!sceneObject.variableDependency) {\n      return false;\n    }\n\n    for (const variableName of sceneObject.variableDependency.getNames()) {\n      const variable = sceneGraph.lookupVariable(variableName, sceneObject);\n      if (!variable) {\n        continue;\n      }\n\n      const name = variable.state.name;\n\n      if (variable && this._values.has(name)) {\n        const value = this._values.get(name);\n        if (!isVariableValueEqual(value, variable.getValue())) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n","import { DataQueryRequest, PanelData } from '@grafana/data';\nimport { Observable } from 'rxjs';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneDataQuery, SceneObjectState } from '../core/types';\n\n// A processor function called by the query runner with responses\n// to any extra requests.\n//\n// A processor function should accept two arguments: the data returned by the\n// _primary_ query, and the data returned by the `ExtraQueryProvider`'s\n// _secondary_ query. It should return a new `PanelData` representing the processed output.\n// It should _not_ modify the primary PanelData.\n//\n// Examples of valid processing include alignment of data between primary and secondary\n// (see the `timeShiftAlignmentProcessor` returned by `SceneTimeRangeCompare`), or doing\n// some more advanced processing such as fitting a time series model on the secondary data.\n//\n// See the docs for `extraQueryProcessingOperator` for more information.\nexport type ExtraQueryDataProcessor = (primary: PanelData, secondary: PanelData) => Observable<PanelData>;\n\n// An extra request that should be run by a query runner, and an optional\n// processor that should be called with the response data.\nexport interface ExtraQueryDescriptor {\n  // The extra request to add.\n  req: DataQueryRequest;\n  // An optional function used to process the data before passing it\n  // to any transformations or visualizations.\n  processor?: ExtraQueryDataProcessor;\n}\n\n// Indicates that this type wants to add extra requests, along with\n// optional processing functions, to a query runner.\nexport interface ExtraQueryProvider<T extends SceneObjectState> extends SceneObjectBase<T> {\n  // Get any extra requests and their required processors.\n  getExtraQueries(request: DataQueryRequest): ExtraQueryDescriptor[];\n  // Determine whether a query should be rerun.\n  //\n  // When the provider's state changes this function will be passed both the previous and the\n  // next state. The implementation can use this to determine whether the change should trigger\n  // a rerun of the query or not.\n  shouldRerun(prev: T, next: T, queries: SceneDataQuery[]): boolean;\n}\n\nexport function isExtraQueryProvider(obj: any): obj is ExtraQueryProvider<any> {\n  return typeof obj === 'object' && 'getExtraQueries' in obj;\n}\n","import { PanelData } from '@grafana/data';\nimport { forkJoin, of, map, mergeMap, Observable } from 'rxjs';\nimport { ExtraQueryDataProcessor } from './ExtraQueryProvider';\n\n// Passthrough processor for use with ExtraQuerys.\nexport const passthroughProcessor: ExtraQueryDataProcessor = (_, secondary) => of(secondary);\n\n// Factory function which takes a map from request ID to processor functions and\n// returns an rxjs operator which operates on an array of panel data responses.\n//\n// Each secondary response is transformed according to the processor function\n// identified by it's request ID. The processor function is passed the primary\n// response and the secondary response to be processed.\n//\n// The output is a single frame with the primary series and all processed\n// secondary series combined.\nexport const extraQueryProcessingOperator = (processors: Map<string, ExtraQueryDataProcessor>) =>\n  (data: Observable<[PanelData, ...PanelData[]]>) => {\n    return data.pipe(\n      mergeMap(([primary, ...secondaries]) => {\n        const processedSecondaries = secondaries.flatMap((s) => {\n          return processors.get(s.request!.requestId)?.(primary, s) ?? of(s);\n        });\n        return forkJoin([of(primary), ...processedSecondaries]);\n      }),\n      map(([primary, ...processedSecondaries]) => ({\n        ...primary,\n        series: [...primary.series, ...processedSecondaries.flatMap((s) => s.series)],\n        annotations: [...(primary.annotations ?? []), ...processedSecondaries.flatMap((s) => s.annotations ?? [])],\n      }))\n    );\n  }\n","import { DataFrame, Field } from '@grafana/data';\nimport { DataLayerFilter } from '../../../core/types';\n\n// Provided SceneDataLayerProviderResult is an array of DataFrames.\nexport function filterAnnotations(data: DataFrame[], filters: DataLayerFilter) {\n  if (!Array.isArray(data) || data.length === 0) {\n    return data;\n  }\n\n  const rows = Array.from({ length: data.length }, () => new Set<number>());\n\n  let frameIdx = 0;\n  for (const frame of data) {\n    for (let index = 0; index < frame.length; index++) {\n      if (rows[frameIdx].has(index)) {\n        continue;\n      }\n      let matching = true;\n\n      // Let's call those standard fields that annotations data frame has.\n      // panelId is a standard field, but it's not always present. It's added to annotations that were added to a particular panel.\n      const panelIdField = frame.fields.find((f) => f.name === 'panelId');\n      // Source field contains annotation definition, with type and filters included.\n      const sourceField = frame.fields.find((f) => f.name === 'source');\n\n      if (sourceField) {\n        // Here we are filtering Grafana annotations that were added to a particular panel.\n        if (panelIdField && sourceField.values[index].type === 'dashboard') {\n          matching = panelIdField.values[index] === filters.panelId;\n        }\n\n        const sourceFilter = sourceField.values[index].filter;\n\n        // Here we are filtering based on annotation filter definition.\n        // Those fitlers are: Show annotation in selected panels, Exclude annotation from selected panels.\n        if (sourceFilter) {\n          const includes = (sourceFilter.ids ?? []).includes(filters.panelId);\n          if (sourceFilter.exclude) {\n            if (includes) {\n              matching = false;\n            }\n          } else if (!includes) {\n            matching = false;\n          }\n        }\n      }\n\n      if (matching) {\n        rows[frameIdx].add(index);\n      }\n    }\n    frameIdx++;\n  }\n\n  const processed: DataFrame[] = [];\n\n  frameIdx = 0;\n  for (const frame of data) {\n    const frameLength = rows[frameIdx].size;\n    const fields: Field[] = [];\n\n    for (const field of frame.fields) {\n      const buffer = [];\n\n      for (let index = 0; index < frame.length; index++) {\n        if (rows[frameIdx].has(index)) {\n          buffer.push(field.values[index]);\n          continue;\n        }\n      }\n\n      fields.push({\n        ...field,\n        values: buffer,\n      });\n    }\n\n    processed.push({\n      ...frame,\n      fields: fields,\n      length: frameLength,\n    });\n    frameIdx++;\n  }\n  return processed;\n}\n","import { DataQueryRequest } from '@grafana/data';\nimport { isDataRequestEnricher, SceneObject } from '../core/types';\n\nexport function getEnrichedDataRequest(sourceRunner: SceneObject): Partial<DataQueryRequest> | null {\n  const root = sourceRunner.getRoot();\n\n  if (isDataRequestEnricher(root)) {\n    return root.enrichDataRequest(sourceRunner);\n  }\n\n  return null;\n}\n","import { getDataSourceSrv, getTemplateSrv } from '@grafana/runtime';\nimport { AdHocVariableFilter } from '@grafana/data';\nimport { AdHocFiltersVariable } from './AdHocFiltersVariable';\n\nlet originalGetAdhocFilters: any = undefined;\nlet allActiveFilterSets = new Set<AdHocFiltersVariable>();\n\nexport function patchGetAdhocFilters(filterVar: AdHocFiltersVariable) {\n  filterVar.addActivationHandler(() => {\n    allActiveFilterSets.add(filterVar);\n    return () => allActiveFilterSets.delete(filterVar);\n  });\n\n  if (originalGetAdhocFilters) {\n    return;\n  }\n\n  const templateSrv: any = getTemplateSrv();\n  if (!templateSrv?.getAdhocFilters) {\n    console.log('Failed to patch getAdhocFilters');\n    return;\n  }\n\n  originalGetAdhocFilters = templateSrv.getAdhocFilters;\n\n  templateSrv.getAdhocFilters = function getAdhocFiltersScenePatch(dsName: string): AdHocVariableFilter[] {\n    if (allActiveFilterSets.size === 0) {\n      return originalGetAdhocFilters.call(templateSrv);\n    }\n\n    const ds = getDataSourceSrv().getInstanceSettings(dsName);\n    if (!ds) {\n      return [];\n    }\n\n    for (const filter of allActiveFilterSets.values()) {\n      if (filter.state.datasource?.uid === ds.uid) {\n        return filter.state.filters;\n      }\n    }\n\n    return [];\n  }.bind(templateSrv);\n}\n\nexport function findActiveAdHocFilterVariableByUid(dsUid: string | undefined): AdHocFiltersVariable | undefined {\n  for (const filter of allActiveFilterSets.values()) {\n    if (filter.state.datasource?.uid === dsUid) {\n      return filter;\n    }\n  }\n\n  return undefined;\n}\n","import { Observable } from 'rxjs';\nimport { LoadingState } from '@grafana/schema';\nimport { sceneGraph } from '../core/sceneGraph';\nimport { QueryResultWithState, SceneQueryControllerEntry } from '../behaviors/SceneQueryController';\n\n/**\n * Will look for a scene object with a behavior that is a SceneQueryController and register the query with it.\n */\nexport function registerQueryWithController<T extends QueryResultWithState>(entry: SceneQueryControllerEntry) {\n  return (queryStream: Observable<T>) => {\n    const queryControler = sceneGraph.getQueryController(entry.origin);\n    if (!queryControler) {\n      return queryStream;\n    }\n\n    return new Observable<T>((observer) => {\n      if (!entry.cancel) {\n        entry.cancel = () => observer.complete();\n      }\n\n      queryControler.queryStarted(entry);\n      let markedAsCompleted = false;\n\n      const sub = queryStream.subscribe({\n        next: (v) => {\n          if (!markedAsCompleted && v.state !== LoadingState.Loading) {\n            markedAsCompleted = true;\n            queryControler.queryCompleted(entry);\n          }\n\n          observer.next(v);\n        },\n        error: (e) => observer.error(e),\n        complete: () => {\n          observer.complete();\n        },\n      });\n\n      return () => {\n        sub.unsubscribe();\n\n        if (!markedAsCompleted) {\n          queryControler.queryCompleted(entry);\n        }\n      };\n    });\n  };\n}\n","import { GroupByVariable } from './GroupByVariable';\n\nexport const allActiveGroupByVariables = new Set<GroupByVariable>();\n\nexport function findActiveGroupByVariablesByUid(dsUid: string | undefined): GroupByVariable | undefined {\n  for (const groupByVariable of allActiveGroupByVariables.values()) {\n    if (groupByVariable.state.datasource?.uid === dsUid) {\n      return groupByVariable;\n    }\n  }\n\n  return undefined;\n}\n","import { VariableValueOption } from '../types';\nimport uFuzzy from '@leeoniya/ufuzzy';\nimport { ALL_VARIABLE_TEXT, ALL_VARIABLE_VALUE } from '../constants';\n\nexport function getOptionSearcher(\n  options: VariableValueOption[],\n  includeAll: boolean | undefined,\n) {\n  const ufuzzy = new uFuzzy();\n  let allOptions = options;\n  const haystack: string[] = [];\n  const limit = 10000;\n\n  if (includeAll) {\n    allOptions = [{ value: ALL_VARIABLE_VALUE, label: ALL_VARIABLE_TEXT }, ...allOptions];\n  }\n\n  return (search: string) => {\n    if (search === '') {\n      if (allOptions.length > limit) {\n        return allOptions.slice(0, limit);\n      } else {\n        return allOptions;\n      }\n    }\n\n    if (haystack.length === 0) {\n      for (let i = 0; i < allOptions.length; i++) {\n        haystack.push(allOptions[i].label);\n      }\n    }\n\n    const [idxs, info, order] = ufuzzy.search(haystack, search);\n    const filteredOptions: VariableValueOption[] = [];\n\n    if (idxs) {\n      for (let i = 0; i < idxs.length; i++) {\n        if (info && order) {\n          const idx = order[i];\n          filteredOptions.push(allOptions[idxs[idx]]);\n        } else {\n          filteredOptions.push(allOptions[idxs[i]]);\n        }\n\n        if (filteredOptions.length > limit) {\n          return filteredOptions;\n        }\n      }\n\n      return filteredOptions;\n    }\n\n    if (allOptions.length > limit) {\n      return allOptions.slice(0, limit);\n    }\n\n    return allOptions;\n  };\n}\n","import { isArray } from 'lodash';\nimport React, { RefCallback, useEffect, useMemo, useState } from 'react';\n\n//@ts-ignore\nimport { Checkbox, InputActionMeta, MultiSelect, Select, ToggleAllState, getSelectStyles, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport { SceneComponentProps } from '../../core/types';\nimport { MultiValueVariable } from '../variants/MultiValueVariable';\nimport { VariableValue, VariableValueSingle } from '../types';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { getOptionSearcher } from './getOptionSearcher';\n\nconst filterNoOp = () => true;\n\nconst filterAll = (v: SelectableValue<VariableValueSingle>) => v.value !== '$__all'\n\nconst determineToggleAllState = (\n  selectedValues: Array<SelectableValue<VariableValueSingle>>,\n  options: Array<SelectableValue<VariableValueSingle>>\n) => {\n  if (selectedValues.length === options.filter(filterAll).length) {\n    return ToggleAllState.allSelected;\n  } else if (\n    selectedValues.length === 0 ||\n    (selectedValues.length === 1 && selectedValues[0] && selectedValues[0].value === '$__all')\n  ) {\n    return ToggleAllState.noneSelected;\n  } else {\n    return ToggleAllState.indeterminate;\n  }\n};\n\nexport function toSelectableValue<T>(value: T, label?: string): SelectableValue<T> {\n  return {\n    value,\n    label: label ?? String(value),\n  };\n}\n\nexport function VariableValueSelect({ model }: SceneComponentProps<MultiValueVariable>) {\n  const { value, text, key, options, includeAll, isReadOnly } = model.useState();\n  const [inputValue, setInputValue] = useState('');\n  const [hasCustomValue, setHasCustomValue] = useState(false);\n  const selectValue = toSelectableValue(value, String(text));\n\n  const optionSearcher = useMemo(() => getOptionSearcher(options, includeAll), [options, includeAll]);\n\n  const onInputChange = (value: string, { action }: InputActionMeta) => {\n    if (action === 'input-change') {\n      setInputValue(value);\n      if (model.onSearchChange) {\n        model.onSearchChange!(value);\n      }\n      return value;\n    }\n\n    return value;\n  };\n\n  const filteredOptions = optionSearcher(inputValue);\n\n  const onOpenMenu = () => {\n    if (hasCustomValue) {\n      setInputValue(String(text));\n    }\n  };\n\n  const onCloseMenu = () => {\n    setInputValue('');\n  };\n\n  return (\n    <Select<VariableValue>\n      id={key}\n      isValidNewOption={(inputValue) => inputValue.trim().length > 0}\n      placeholder=\"Select value\"\n      width=\"auto\"\n      disabled={isReadOnly}\n      value={selectValue}\n      inputValue={inputValue}\n      allowCustomValue\n      virtualized\n      filterOption={filterNoOp}\n      tabSelectsValue={false}\n      onInputChange={onInputChange}\n      onOpenMenu={onOpenMenu}\n      onCloseMenu={onCloseMenu}\n      options={filteredOptions}\n      data-testid={selectors.pages.Dashboard.SubMenu.submenuItemValueDropDownValueLinkTexts(`${value}`)}\n      onChange={(newValue) => {\n        model.changeValueTo(newValue.value!, newValue.label!);\n\n        if (hasCustomValue !== newValue.__isNew__) {\n          setHasCustomValue(newValue.__isNew__);\n        }\n      }}\n    />\n  );\n}\n\nexport function VariableValueSelectMulti({ model }: SceneComponentProps<MultiValueVariable>) {\n  const { value, options, key, maxVisibleValues, noValueOnClear, includeAll, isReadOnly } = model.useState();\n  const arrayValue = useMemo(() => (isArray(value) ? value : [value]), [value]);\n  // To not trigger queries on every selection we store this state locally here and only update the variable onBlur\n  const [uncommittedValue, setUncommittedValue] = useState(arrayValue);\n  const [inputValue, setInputValue] = useState('');\n\n  const optionSearcher = useMemo(() => getOptionSearcher(options, includeAll), [options, includeAll]);\n\n  // Detect value changes outside\n  useEffect(() => {\n    setUncommittedValue(arrayValue);\n  }, [arrayValue]);\n\n  const onInputChange = (value: string, { action }: InputActionMeta) => {\n    if (action === 'input-change') {\n      setInputValue(value);\n      if (model.onSearchChange) {\n        model.onSearchChange!(value);\n      }\n      return value;\n    }\n\n    if (action === 'input-blur') {\n      setInputValue('');\n      return '';\n    }\n\n    return inputValue;\n  };\n\n  const placeholder = options.length > 0 ? 'Select value' : '';\n  const filteredOptions = optionSearcher(inputValue);\n\n  return (\n    <MultiSelect<VariableValueSingle>\n      id={key}\n      placeholder={placeholder}\n      width=\"auto\"\n      inputValue={inputValue}\n      disabled={isReadOnly}\n      value={uncommittedValue}\n      noMultiValueWrap={true}\n      maxVisibleValues={maxVisibleValues ?? 5}\n      tabSelectsValue={false}\n      virtualized\n      allowCustomValue\n      //@ts-ignore\n      toggleAllOptions={{\n        enabled: true,\n        optionsFilter: filterAll,\n        determineToggleAllState: determineToggleAllState,\n      }}\n      options={filteredOptions}\n      closeMenuOnSelect={false}\n      components={{ Option: OptionWithCheckbox }}\n      isClearable={true}\n      hideSelectedOptions={false}\n      onInputChange={onInputChange}\n      onBlur={() => {\n        model.changeValueTo(uncommittedValue);\n      }}\n      filterOption={filterNoOp}\n      data-testid={selectors.pages.Dashboard.SubMenu.submenuItemValueDropDownValueLinkTexts(`${uncommittedValue}`)}\n      onChange={(newValue, action) => {\n        if (action.action === 'clear' && noValueOnClear) {\n          model.changeValueTo([]);\n        }\n        setUncommittedValue(newValue.map((x) => x.value!));\n      }}\n    />\n  );\n}\n\ninterface SelectMenuOptionProps<T> {\n  isDisabled: boolean;\n  isFocused: boolean;\n  isSelected: boolean;\n  innerProps: JSX.IntrinsicElements['div'];\n  innerRef: RefCallback<HTMLDivElement>;\n  renderOptionLabel?: (value: SelectableValue<T>) => JSX.Element;\n  data: SelectableValue<T>;\n  indeterminate: boolean; \n}\n\nexport const OptionWithCheckbox = ({\n  children,\n  data,\n  innerProps,\n  innerRef,\n  isFocused,\n  isSelected,\n  indeterminate,\n  renderOptionLabel,\n}: React.PropsWithChildren<SelectMenuOptionProps<unknown>>) => {\n  // We are removing onMouseMove and onMouseOver from innerProps because they cause the whole\n  // list to re-render everytime the user hovers over an option. This is a performance issue.\n  // See https://github.com/JedWatson/react-select/issues/3128#issuecomment-451936743\n  const { onMouseMove, onMouseOver, ...rest } = innerProps;\n  const theme = useTheme2();\n  const selectStyles = getSelectStyles(theme);\n  const optionStyles = useStyles2(getOptionStyles);\n\n  return (\n    <div\n      ref={innerRef}\n      className={cx(selectStyles.option, isFocused && selectStyles.optionFocused)}\n      {...rest}\n      // TODO: use below selector once we update grafana dependencies to ^11.1.0\n      // data-testid={selectors.components.Select.option}\n      data-testid=\"data-testid Select option\"\n      title={data.title}\n    >\n      <div className={optionStyles.checkbox}>\n        <Checkbox indeterminate={indeterminate} value={isSelected} />\n      </div>\n      <div\n        className={selectStyles.optionBody}\n        data-testid={selectors.pages.Dashboard.SubMenu.submenuItemValueDropDownOptionTexts(\n          data.label ?? String(data.value)\n        )}\n      >\n        <span>{children}</span>\n      </div>\n    </div>\n  );\n};\n\nOptionWithCheckbox.displayName = 'SelectMenuOptions';\n\nconst getOptionStyles = (theme: GrafanaTheme2) => ({\n  checkbox: css({\n    marginRight: theme.spacing(2),\n  }),\n});\n\nexport function renderSelectForVariable(model: MultiValueVariable) {\n  if (model.state.isMulti) {\n    return <VariableValueSelectMulti model={model} />;\n  } else {\n    return <VariableValueSelect model={model} />;\n  }\n}\n","import { SceneObjectUrlSyncHandler, SceneObjectUrlValues } from '../../core/types';\nimport { GroupByVariable } from './GroupByVariable';\nimport { toUrlCommaDelimitedString, unescapeUrlDelimiters } from '../utils';\nimport { VariableValue } from '../types';\n\nexport class GroupByVariableUrlSyncHandler implements SceneObjectUrlSyncHandler {\n  public constructor(private _sceneObject: GroupByVariable) {}\n\n  private getKey(): string {\n    return `var-${this._sceneObject.state.name}`;\n  }\n\n  public getKeys(): string[] {\n    if (this._sceneObject.state.skipUrlSync) {\n      return [];\n    }\n\n    return [this.getKey()];\n  }\n\n  public getUrlState(): SceneObjectUrlValues {\n    if (this._sceneObject.state.skipUrlSync) {\n      return {};\n    }\n\n    return { [this.getKey()]: toUrlValues(this._sceneObject.state.value, this._sceneObject.state.text) };\n  }\n\n  public updateFromUrl(values: SceneObjectUrlValues): void {\n    let urlValue = values[this.getKey()];\n\n    if (urlValue != null) {\n      /**\n       * Initial URL Sync happens before scene objects are activated.\n       * We need to skip validation in this case to make sure values set via URL are maintained.\n       */\n      if (!this._sceneObject.isActive) {\n        this._sceneObject.skipNextValidation = true;\n      }\n\n      const { values, texts } = fromUrlValues(urlValue);\n\n      this._sceneObject.changeValueTo(values, texts);\n    }\n  }\n}\n\nfunction toUrlValues(values: VariableValue, texts: VariableValue): string[] {\n  values = Array.isArray(values) ? values : [values];\n  texts = Array.isArray(texts) ? texts : [texts];\n\n  return values.map((value, idx) => {\n    if (value === undefined || value === null) {\n      return '';\n    }\n\n    value = String(value);\n\n    let text = texts[idx];\n    text = text === undefined || text === null ? value : String(text);\n\n    return toUrlCommaDelimitedString(value, text);\n  });\n}\n\nfunction fromUrlValues(urlValues: string | string[]): { values: string[]; texts: string[] } {\n  urlValues = Array.isArray(urlValues) ? urlValues : [urlValues];\n\n  return urlValues.reduce<{ values: string[]; texts: string[] }>(\n    (acc, urlValue) => {\n      const [value, label] = (urlValue ?? '').split(',');\n\n      acc.values.push(unescapeUrlDelimiters(value));\n      acc.texts.push(unescapeUrlDelimiters(label ?? value));\n\n      return acc;\n    },\n    {\n      values: [],\n      texts: [],\n    }\n  );\n}\n","import { DataSourceGetTagKeysOptions, DataSourceGetTagValuesOptions } from '@grafana/data';\nimport { isFiltersRequestEnricher, SceneObject } from '../core/types';\n\nexport function getEnrichedFiltersRequest(\n  sourceRunner: SceneObject\n): Partial<DataSourceGetTagKeysOptions | DataSourceGetTagValuesOptions> | null {\n  const root = sourceRunner.getRoot();\n\n  if (isFiltersRequestEnricher(root)) {\n    return root.enrichFiltersRequest(sourceRunner);\n  }\n\n  return null;\n}\n","import { ScopedVar } from '@grafana/data';\nimport { SceneObject } from '../core/types';\n\nexport class SafeSerializableSceneObject implements ScopedVar {\n  #value: SceneObject;\n\n  public text = '__sceneObject';\n\n  public constructor(value: SceneObject) {\n    this.#value = value;\n  }\n\n  public toString() {\n    return undefined;\n  }\n\n  public valueOf = () => {\n    return this.#value;\n  };\n\n  public get value() {\n    return this;\n  }\n}\n","import { config } from '@grafana/runtime';\nimport { SceneObject } from '../core/types';\nimport { SafeSerializableSceneObject } from './SafeSerializableSceneObject';\nimport { ScopedVar } from '@grafana/data';\n\nexport function shouldWrapInSafeSerializableSceneObject(grafanaVersion: string): boolean {\n  const pattern = /^(\\d+)\\.(\\d+)\\.(\\d+)/;\n  const match = grafanaVersion.match(pattern);\n\n  if (!match) {\n    return false;\n  }\n\n  const major = parseInt(match[1], 10);\n  const minor = parseInt(match[2], 10);\n  const patch = parseInt(match[3], 10);\n\n  if (major === 11) {\n    return (minor === 0 && patch >= 4) || (minor === 1 && patch >= 2) || minor > 1;\n  }\n\n  if (major === 10) {\n    return (minor === 4 && patch >= 8) || minor >= 5;\n  }\n\n  return major > 11; // Assuming versions greater than 11 are also supported.\n}\n\nexport function wrapInSafeSerializableSceneObject(sceneObject: SceneObject): ScopedVar {\n  const version = config.buildInfo.version;\n\n  if (shouldWrapInSafeSerializableSceneObject(version)) {\n    return new SafeSerializableSceneObject(sceneObject);\n  }\n\n  return { value: sceneObject, text: '__sceneObject' };\n}\n","import React, { useEffect, useMemo, useState } from 'react';\n// @ts-expect-error Remove when 11.1.x is released\nimport { AdHocVariableFilter, DataSourceApi, GetTagResponse, MetricFindValue, SelectableValue } from '@grafana/data';\nimport { allActiveGroupByVariables } from './findActiveGroupByVariablesByUid';\nimport { DataSourceRef, VariableType } from '@grafana/schema';\nimport { SceneComponentProps, ControlsLayout, SceneObjectUrlSyncHandler } from '../../core/types';\nimport { sceneGraph } from '../../core/sceneGraph';\nimport { ValidateAndUpdateResult, VariableValueOption, VariableValueSingle } from '../types';\nimport { MultiValueVariable, MultiValueVariableState, VariableGetOptionsArgs } from '../variants/MultiValueVariable';\nimport { from, lastValueFrom, map, mergeMap, Observable, of, take, tap } from 'rxjs';\nimport { getDataSource } from '../../utils/getDataSource';\nimport { InputActionMeta, MultiSelect } from '@grafana/ui';\nimport { isArray } from 'lodash';\nimport { dataFromResponse, getQueriesForVariables, handleOptionGroups, responseHasError } from '../utils';\nimport { OptionWithCheckbox } from '../components/VariableValueSelect';\nimport { GroupByVariableUrlSyncHandler } from './GroupByVariableUrlSyncHandler';\nimport { getOptionSearcher } from '../components/getOptionSearcher';\nimport { getEnrichedFiltersRequest } from '../getEnrichedFiltersRequest';\nimport { wrapInSafeSerializableSceneObject } from '../../utils/wrapInSafeSerializableSceneObject';\n\nexport interface GroupByVariableState extends MultiValueVariableState {\n  /** Defaults to \"Group\" */\n  name: string;\n  /** The visible keys to group on */\n  // TODO review this type and name (naming is hard)\n  defaultOptions?: MetricFindValue[];\n  /** Base filters to always apply when looking up keys */\n  baseFilters?: AdHocVariableFilter[];\n  /** Datasource to use for getTagKeys and also controls which scene queries the group by should apply to */\n  datasource: DataSourceRef | null;\n  /** Controls if the group by can be changed */\n  readOnly?: boolean;\n  /**\n   * @experimental\n   * Controls the layout and design of the label.\n   * Vertical layout does not yet support operator selector.\n   */\n  layout?: ControlsLayout;\n  /**\n   * Defaults to same-datasource which means group by will automatically be applied to all queries with the same data source as this GroupBySet.\n   * In manual mode no queries are re-run on changes, and you have to manually apply the filter to whatever queries you want.\n   */\n  applyMode?: 'auto' | 'manual';\n  /**\n   * Filter out the keys that do not match the regex.\n   */\n  tagKeyRegexFilter?: RegExp;\n  /**\n   * Extension hook for customizing the key lookup.\n   * Return replace: true if you want to override the default lookup\n   * Return replace: false if you want to combine the results with the default lookup\n   */\n  getTagKeysProvider?: getTagKeysProvider;\n}\n\nexport type getTagKeysProvider = (\n  set: GroupByVariable,\n  currentKey: string | null\n) => Promise<{ replace?: boolean; values: MetricFindValue[] | GetTagResponse }>;\n\nexport class GroupByVariable extends MultiValueVariable<GroupByVariableState> {\n  static Component = GroupByVariableRenderer;\n  isLazy = true;\n\n  protected _urlSync: SceneObjectUrlSyncHandler = new GroupByVariableUrlSyncHandler(this);\n\n  public validateAndUpdate(): Observable<ValidateAndUpdateResult> {\n    return this.getValueOptions({}).pipe(\n      map((options) => {\n        this._updateValueGivenNewOptions(options);\n        return {};\n      })\n    );\n  }\n\n  private _updateValueGivenNewOptions(options: VariableValueOption[]) {\n    const { value: currentValue, text: currentText } = this.state;\n\n    const stateUpdate: Partial<MultiValueVariableState> = {\n      options,\n      loading: false,\n      value: currentValue ?? [],\n      text: currentText ?? [],\n    };\n\n    this.setState(stateUpdate);\n  }\n\n  public getValueOptions(args: VariableGetOptionsArgs): Observable<VariableValueOption[]> {\n    // When default dimensions are provided, return the static list\n    if (this.state.defaultOptions) {\n      return of(\n        this.state.defaultOptions.map((o) => ({\n          label: o.text,\n          value: String(o.value),\n          // @ts-expect-error Remove when we update to @grafana/data > 11.1.0\n          group: o.group,\n        }))\n      );\n    }\n\n    this.setState({ loading: true, error: null });\n\n    return from(\n      getDataSource(this.state.datasource, {\n        __sceneObject: wrapInSafeSerializableSceneObject(this),\n      })\n    ).pipe(\n      mergeMap((ds) => {\n        return from(this._getKeys(ds)).pipe(\n          tap((response) => {\n            if (responseHasError(response)) {\n              this.setState({ error: response.error.message });\n            }\n          }),\n          map((response) => dataFromResponse(response)),\n          take(1),\n          mergeMap((data) => {\n            // @ts-expect-error Remove when 11.1.x is released\n            const a: VariableValueOption[] = data.map((i) => {\n              return {\n                label: i.text,\n                value: i.value ? String(i.value) : i.text,\n                group: i.group,\n              };\n            });\n            return of(a);\n          })\n        );\n      })\n    );\n  }\n\n  public constructor(initialState: Partial<GroupByVariableState>) {\n    super({\n      isMulti: true,\n      name: '',\n      value: [],\n      text: [],\n      options: [],\n      datasource: null,\n      baseFilters: [],\n      applyMode: 'auto',\n      layout: 'horizontal',\n      type: 'groupby' as VariableType,\n      ...initialState,\n      noValueOnClear: true,\n    });\n\n    this.addActivationHandler(() => {\n      allActiveGroupByVariables.add(this);\n\n      return () => allActiveGroupByVariables.delete(this);\n    });\n  }\n\n  /**\n   * Get possible keys given current filters. Do not call from plugins directly\n   */\n  public _getKeys = async (ds: DataSourceApi) => {\n    // TODO:  provide current dimensions?\n    const override = await this.state.getTagKeysProvider?.(this, null);\n\n    if (override && override.replace) {\n      return override.values;\n    }\n\n    if (this.state.defaultOptions) {\n      return this.state.defaultOptions.concat(dataFromResponse(override?.values ?? []));\n    }\n\n    if (!ds.getTagKeys) {\n      return [];\n    }\n\n    const queries = getQueriesForVariables(this);\n\n    const otherFilters = this.state.baseFilters || [];\n    const timeRange = sceneGraph.getTimeRange(this).state.value;\n    const response = await ds.getTagKeys({\n      filters: otherFilters,\n      queries,\n      timeRange,\n      ...getEnrichedFiltersRequest(this),\n    });\n    if (responseHasError(response)) {\n      // @ts-expect-error Remove when 11.1.x is released\n      this.setState({ error: response.error.message });\n    }\n\n    let keys = dataFromResponse(response);\n    if (override) {\n      keys = keys.concat(dataFromResponse(override.values));\n    }\n\n    const tagKeyRegexFilter = this.state.tagKeyRegexFilter;\n    if (tagKeyRegexFilter) {\n      // @ts-expect-error Remove when 11.1.x is released\n      keys = keys.filter((f) => f.text.match(tagKeyRegexFilter));\n    }\n\n    return keys;\n  };\n\n  /**\n   * Allows clearing the value of the variable to an empty value. Overrides default behavior of a MultiValueVariable\n   */\n  public getDefaultMultiState(options: VariableValueOption[]): { value: VariableValueSingle[]; text: string[] } {\n    return { value: [], text: [] };\n  }\n}\nexport function GroupByVariableRenderer({ model }: SceneComponentProps<MultiValueVariable>) {\n  const { value, text, key, maxVisibleValues, noValueOnClear, options, includeAll } = model.useState();\n\n  const values = useMemo<Array<SelectableValue<VariableValueSingle>>>(() => {\n    const arrayValue = isArray(value) ? value : [value];\n    const arrayText = isArray(text) ? text : [text];\n\n    return arrayValue.map((value, idx) => ({\n      value,\n      label: String(arrayText[idx] ?? value),\n    }));\n  }, [value, text]);\n\n  const [isFetchingOptions, setIsFetchingOptions] = useState(false);\n  const [isOptionsOpen, setIsOptionsOpen] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n\n  // To not trigger queries on every selection we store this state locally here and only update the variable onBlur\n  const [uncommittedValue, setUncommittedValue] = useState(values);\n\n  const optionSearcher = useMemo(() => getOptionSearcher(options, includeAll), [options, includeAll]);\n\n  // Detect value changes outside\n  useEffect(() => {\n    setUncommittedValue(values);\n  }, [values]);\n\n  const onInputChange = (value: string, { action }: InputActionMeta) => {\n    if (action === 'input-change') {\n      setInputValue(value);\n      if (model.onSearchChange) {\n        model.onSearchChange!(value);\n      }\n      return value;\n    }\n\n    if (action === 'input-blur') {\n      setInputValue('');\n      return '';\n    }\n\n    return inputValue;\n  };\n\n  const filteredOptions = useMemo(\n    () => handleOptionGroups(optionSearcher(inputValue).map(toSelectableValue)),\n    [optionSearcher, inputValue]\n  );\n\n  return (\n    <MultiSelect<VariableValueSingle>\n      data-testid={`GroupBySelect-${key}`}\n      id={key}\n      placeholder={'Select value'}\n      width=\"auto\"\n      inputValue={inputValue}\n      value={uncommittedValue}\n      noMultiValueWrap={true}\n      maxVisibleValues={maxVisibleValues ?? 5}\n      tabSelectsValue={false}\n      virtualized\n      options={filteredOptions}\n      filterOption={filterNoOp}\n      closeMenuOnSelect={false}\n      isOpen={isOptionsOpen}\n      isClearable={true}\n      hideSelectedOptions={false}\n      isLoading={isFetchingOptions}\n      components={{ Option: OptionWithCheckbox }}\n      onInputChange={onInputChange}\n      onBlur={() => {\n        model.changeValueTo(\n          uncommittedValue.map((x) => x.value!),\n          uncommittedValue.map((x) => x.label!)\n        );\n      }}\n      onChange={(newValue, action) => {\n        if (action.action === 'clear' && noValueOnClear) {\n          model.changeValueTo([]);\n        }\n        setUncommittedValue(newValue);\n      }}\n      onOpenMenu={async () => {\n        setIsFetchingOptions(true);\n        await lastValueFrom(model.validateAndUpdate());\n        setIsFetchingOptions(false);\n        setIsOptionsOpen(true);\n      }}\n      onCloseMenu={() => {\n        setIsOptionsOpen(false);\n      }}\n    />\n  );\n}\n\nconst filterNoOp = () => true;\n\nfunction toSelectableValue(input: VariableValueOption): SelectableValue<VariableValueSingle> {\n  const { label, value, group } = input;\n  const result: SelectableValue<VariableValueSingle> = {\n    label,\n    value,\n  };\n\n  if (group) {\n    result.group = group;\n  }\n\n  return result;\n}\n","import { Icon, Tooltip } from '@grafana/ui';\nimport React, { useCallback } from 'react';\nimport { LoadingIndicatorProps as SelectLoadingIndicatorProps } from 'react-select';\n\nexport const SelectLoadingIndicator = ({\n  innerProps,\n  ...props\n}: SelectLoadingIndicatorProps & { selectProps: { onCancel: () => void } }) => {\n  const { onCancel } = props.selectProps;\n  const onMouseDown = useCallback(\n    (event: React.MouseEvent) => {\n      event.preventDefault();\n      event.stopPropagation();\n      onCancel();\n    },\n    [onCancel]\n  );\n\n  return <LoadingIndicator onCancel={onMouseDown} />;\n};\n\ninterface LoadingIndicatorProps {\n  onCancel: (event: React.MouseEvent) => void;\n}\n\nexport function LoadingIndicator(props: LoadingIndicatorProps) {\n  return (\n    <Tooltip content=\"Cancel query\">\n      <Icon\n        className=\"spin-clockwise\"\n        name=\"sync\"\n        size=\"xs\"\n        role=\"button\"\n        onMouseDown={(e) => {\n          props.onCancel(e);\n        }}\n      />\n    </Tooltip>\n  );\n}\n","import React from 'react';\nimport { Icon, IconButton, Tooltip, useStyles2, useTheme2 } from '@grafana/ui';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { GrafanaTheme2, IconName } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { LoadingIndicator } from './LoadingIndicator';\nimport { ControlsLayout } from '../core/types';\n\ninterface ControlsLabelProps {\n  label: string;\n  htmlFor?: string;\n  description?: string;\n  isLoading?: boolean;\n  error?: string;\n  icon?: IconName;\n  layout?: ControlsLayout;\n  onCancel?: () => void;\n  onRemove?: () => void;\n}\n\nexport function ControlsLabel(props: ControlsLabelProps) {\n  const styles = useStyles2(getStyles);\n  const theme = useTheme2();\n  const isVertical = props.layout === 'vertical';\n\n  const loadingIndicator = Boolean(props.isLoading) ? (\n    <div\n      style={{ marginLeft: theme.spacing(1), marginTop: '-1px' }}\n      aria-label={selectors.components.LoadingIndicator.icon}\n    >\n      <LoadingIndicator\n        onCancel={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n          props.onCancel?.();\n        }}\n      />\n    </div>\n  ) : null;\n\n  let errorIndicator = null;\n  if (props.error) {\n    errorIndicator = (\n      <Tooltip content={props.error} placement={'bottom'}>\n        <Icon className={styles.errorIcon} name=\"exclamation-triangle\" />\n      </Tooltip>\n    );\n  }\n\n  let descriptionIndicator = null;\n  if (props.description) {\n    descriptionIndicator = (\n      <Tooltip content={props.description} placement={isVertical ? 'top' : 'bottom'}>\n        <Icon className={styles.normalIcon} name=\"info-circle\" />\n      </Tooltip>\n    );\n  }\n\n  const testId =\n    typeof props.label === 'string' ? selectors.pages.Dashboard.SubMenu.submenuItemLabels(props.label) : '';\n  let labelElement: JSX.Element;\n\n  // The vertical layout has different css class and order of elements (label always first)\n\n  if (isVertical) {\n    labelElement = (\n      <label className={styles.verticalLabel} data-testid={testId} htmlFor={props.htmlFor}>\n        {props.label}\n        {descriptionIndicator}\n        {errorIndicator}\n        {props.icon && <Icon name={props.icon} className={styles.normalIcon} />}\n        {loadingIndicator}\n        {props.onRemove && (\n          <IconButton variant=\"secondary\" size=\"xs\" name=\"times\" onClick={props.onRemove} tooltip={'Remove'} />\n        )}\n      </label>\n    );\n  } else {\n    labelElement = (\n      <label className={styles.horizontalLabel} data-testid={testId} htmlFor={props.htmlFor}>\n        {errorIndicator}\n        {props.icon && <Icon name={props.icon} className={styles.normalIcon} />}\n        {props.label}\n        {descriptionIndicator}\n        {loadingIndicator}\n      </label>\n    );\n  }\n\n  return labelElement;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  horizontalLabel: css({\n    background: theme.isDark ? theme.colors.background.primary : theme.colors.background.secondary,\n    display: `flex`,\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    fontWeight: theme.typography.fontWeightMedium,\n    fontSize: theme.typography.bodySmall.fontSize,\n    height: theme.spacing(theme.components.height.md),\n    lineHeight: theme.spacing(theme.components.height.md),\n    borderRadius: theme.shape.borderRadius(1),\n    border: `1px solid ${theme.components.input.borderColor}`,\n    position: 'relative',\n    // To make the border line up with the input border\n    right: -1,\n    whiteSpace: 'nowrap',\n    gap: theme.spacing(0.5),\n  }),\n  verticalLabel: css({\n    display: `flex`,\n    alignItems: 'center',\n    fontWeight: theme.typography.fontWeightMedium,\n    fontSize: theme.typography.bodySmall.fontSize,\n    lineHeight: theme.typography.bodySmall.lineHeight,\n    whiteSpace: 'nowrap',\n    marginBottom: theme.spacing(0.5),\n    gap: theme.spacing(1),\n  }),\n  errorIcon: css({\n    color: theme.colors.error.text,\n  }),\n  normalIcon: css({\n    color: theme.colors.text.secondary,\n  }),\n});\n","import uFuzzy from '@leeoniya/ufuzzy';\nimport { SelectableValue } from '@grafana/data';\n\nexport function getAdhocOptionSearcher(\n  options: SelectableValue[],\n) {\n  const ufuzzy = new uFuzzy();\n  const haystack: string[] = [];\n  const limit = 10000;\n\n  return (search: string) => {\n    if (search === '') {\n      if (options.length > limit) {\n        return options.slice(0, limit);\n      } else {\n        return options;\n      }\n    }\n\n    if (haystack.length === 0) {\n      for (let i = 0; i < options.length; i++) {\n        haystack.push(options[i].label ?? String(options[i].value));\n      }\n    }\n\n    const [idxs, info, order] = ufuzzy.search(haystack, search);\n    const filteredOptions: SelectableValue[] = [];\n\n    if (idxs) {\n      for (let i = 0; i < idxs.length; i++) {\n        if (info && order) {\n          const idx = order[i];\n          filteredOptions.push(options[idxs[idx]]);\n        } else {\n          filteredOptions.push(options[idxs[i]]);\n        }\n\n        if (filteredOptions.length > limit) {\n          return filteredOptions;\n        }\n      }\n\n      return filteredOptions;\n    }\n\n    if (options.length > limit) {\n      return options.slice(0, limit);\n    }\n\n    return options;\n  };\n}\n","import React, { useMemo, useState } from 'react';\n\nimport { AdHocFiltersVariable, AdHocFilterWithLabels, isMultiValueOperator } from './AdHocFiltersVariable';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Button, Field, InputActionMeta, Select, useStyles2 } from '@grafana/ui';\nimport { css, cx } from '@emotion/css';\nimport { ControlsLabel } from '../../utils/ControlsLabel';\nimport { getAdhocOptionSearcher } from './getAdhocOptionSearcher';\nimport { handleOptionGroups } from '../utils';\nimport { OptionWithCheckbox } from '../components/VariableValueSelect';\n\ninterface Props {\n  filter: AdHocFilterWithLabels;\n  model: AdHocFiltersVariable;\n}\n\nfunction keyLabelToOption(key: string, label?: string): SelectableValue | null {\n  return key !== ''\n    ? {\n        value: key,\n        label: label || key,\n      }\n    : null;\n}\n\nconst filterNoOp = () => true;\n\nexport function AdHocFilterRenderer({ filter, model }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const [keys, setKeys] = useState<SelectableValue[]>([]);\n  const [values, setValues] = useState<SelectableValue[]>([]);\n  const [isKeysLoading, setIsKeysLoading] = useState(false);\n  const [isValuesLoading, setIsValuesLoading] = useState(false);\n  const [isKeysOpen, setIsKeysOpen] = useState(false);\n  const [isValuesOpen, setIsValuesOpen] = useState(false);\n  const [isOperatorOpen, setIsOperatorOpen] = useState(false);\n  const [valueInputValue, setValueInputValue] = useState('');\n  const [valueHasCustomValue, setValueHasCustomValue] = useState(false);\n  // To not trigger queries on every selection we store this state locally here and only update the variable onBlur\n  // TODO remove expect-error when we're on the latest version of @grafana/data\n  // @ts-expect-error\n  const [uncommittedValue, setUncommittedValue] = useState<SelectableValue>(filter.values ? filter.values.map((value, index) => keyLabelToOption(value, filter.valueLabels?.[index])) : []);\n  const isMultiValue = isMultiValueOperator(filter.operator);\n\n  const keyValue = keyLabelToOption(filter.key, filter.keyLabel);\n  const valueValue = keyLabelToOption(filter.value, filter.valueLabels?.[0]);\n\n  const optionSearcher = useMemo(() => getAdhocOptionSearcher(values), [values]);\n\n  const onValueInputChange = (value: string, { action }: InputActionMeta) => {\n    if (action === 'input-change') {\n      setValueInputValue(value);\n    }\n    return value;\n  };\n\n  const onOperatorChange = (v: SelectableValue) => {\n    const existingOperator = filter.operator;\n    const newOperator = v.value;\n\n    const update: Partial<AdHocFilterWithLabels> = { operator: newOperator };\n    // clear value if operator has changed from multi to single\n    if (isMultiValueOperator(existingOperator) && !isMultiValueOperator(newOperator)) {\n      update.value = '';\n      update.valueLabels = [''];\n      // TODO remove expect-error when we're on the latest version of @grafana/data\n      // @ts-expect-error\n      update.values = undefined;\n      setUncommittedValue([]);\n    // set values if operator has changed from single to multi\n    } else if (!isMultiValueOperator(existingOperator) && isMultiValueOperator(newOperator) && filter.value) {\n      // TODO remove expect-error when we're on the latest version of @grafana/data\n      // @ts-expect-error\n      update.values = [filter.value];\n      setUncommittedValue([{\n        value: filter.value,\n        label: filter.valueLabels?.[0] ?? filter.value,\n      }]);\n    }\n    model._updateFilter(filter, update);\n  }\n\n  const filteredValueOptions = useMemo(\n    () => handleOptionGroups(optionSearcher(valueInputValue)),\n    [optionSearcher, valueInputValue]\n  );\n\n  const multiValueProps = {\n    isMulti: true,\n    value: uncommittedValue,\n    components: {\n      Option: OptionWithCheckbox,\n    },\n    hideSelectedOptions: false,\n    closeMenuOnSelect: false,\n    openMenuOnFocus: false,\n    onChange: (v: SelectableValue) => {\n      setUncommittedValue(v);\n      // clear input value when creating a new custom multi value\n      if (v.some((value: SelectableValue) => value.__isNew__)) {\n        setValueInputValue('');\n      }\n    },\n    onBlur: () => {\n      model._updateFilter(filter, {\n        value: uncommittedValue[0]?.value ?? '',\n        // TODO remove expect-error when we're on the latest version of @grafana/data\n        // @ts-expect-error\n        values: uncommittedValue.map((option: SelectableValue<string>) => option.value),\n        valueLabels: uncommittedValue.map((option: SelectableValue<string>) => option.label),\n      });\n    }\n  }\n\n  const valueSelect = (\n    <Select\n      virtualized\n      allowCustomValue\n      isValidNewOption={(inputValue) => inputValue.trim().length > 0}\n      allowCreateWhileLoading\n      formatCreateLabel={(inputValue) => `Use custom value: ${inputValue}`}\n      disabled={model.state.readOnly}\n      className={cx(styles.value, isValuesOpen ? styles.widthWhenOpen : undefined)}\n      width=\"auto\"\n      value={valueValue}\n      filterOption={filterNoOp}\n      placeholder={'Select value'}\n      options={filteredValueOptions}\n      inputValue={valueInputValue}\n      onInputChange={onValueInputChange}\n      onChange={(v) => {\n        model._updateFilter(filter, {\n          value: v.value,\n          valueLabels: v.label ? [v.label] : [v.value]\n        });\n\n        if (valueHasCustomValue !== v.__isNew__) {\n          setValueHasCustomValue(v.__isNew__);\n        }\n      }}\n      // there's a bug in react-select where the menu doesn't recalculate its position when the options are loaded asynchronously\n      // see https://github.com/grafana/grafana/issues/63558\n      // instead, we explicitly control the menu visibility and prevent showing it until the options have fully loaded\n      isOpen={isValuesOpen && !isValuesLoading}\n      isLoading={isValuesLoading}\n      openMenuOnFocus={true}\n      onOpenMenu={async () => {\n        setIsValuesLoading(true);\n        setIsValuesOpen(true);\n        const values = await model._getValuesFor(filter);\n        setIsValuesLoading(false);\n        setValues(values);\n        if (valueHasCustomValue) {\n          setValueInputValue(valueValue?.label ?? '');\n        }\n      }}\n      onCloseMenu={() => {\n        setIsValuesOpen(false);\n        setValueInputValue('');\n      }}\n      {...(isMultiValue && multiValueProps)}\n    />\n  );\n\n  const keySelect = (\n    <Select\n      // By changing the key, we reset the Select component,\n      // to ensure that the loaded values are shown after they are loaded\n      key={`${isValuesLoading ? 'loading' : 'loaded'}`}\n      disabled={model.state.readOnly}\n      className={cx(styles.key, isKeysOpen ? styles.widthWhenOpen : undefined)}\n      width=\"auto\"\n      allowCustomValue={true}\n      value={keyValue}\n      placeholder={'Select label'}\n      options={handleOptionGroups(keys)}\n      onChange={(v) => {\n        model._updateFilter(filter, {\n          key: v.value,\n          keyLabel: v.label,\n          // clear value if key has changed\n          value: '',\n          valueLabels: [''],\n          // TODO remove expect-error when we're on the latest version of @grafana/data\n          // @ts-expect-error\n          values: undefined\n        })\n        setUncommittedValue([]);\n      }}\n      autoFocus={filter.key === ''}\n      // there's a bug in react-select where the menu doesn't recalculate its position when the options are loaded asynchronously\n      // see https://github.com/grafana/grafana/issues/63558\n      // instead, we explicitly control the menu visibility and prevent showing it until the options have fully loaded\n      isOpen={isKeysOpen && !isKeysLoading}\n      isLoading={isKeysLoading}\n      onOpenMenu={async () => {\n        setIsKeysOpen(true);\n        setIsKeysLoading(true);\n        const keys = await model._getKeys(filter.key);\n        setIsKeysLoading(false);\n        setKeys(keys);\n      }}\n      onCloseMenu={() => {\n        setIsKeysOpen(false);\n      }}\n      onBlur={() => {\n        if (filter.key === '') {\n          model._removeFilter(filter);\n        }\n      }}\n      openMenuOnFocus={true}\n    />\n  );\n\n  const operatorSelect = (\n    <Select\n      className={cx(styles.operator, {\n        [styles.widthWhenOpen]: isOperatorOpen,\n      })}\n      value={filter.operator}\n      disabled={model.state.readOnly}\n      options={model._getOperators()}\n      onChange={onOperatorChange}\n      onOpenMenu={() => {\n        setIsOperatorOpen(true)\n      }}\n      onCloseMenu={() => {\n        setIsOperatorOpen(false)\n      }}\n    />\n  );\n\n  if (model.state.layout === 'vertical') {\n    if (filter.key) {\n      const label = (\n        <ControlsLabel layout=\"vertical\" label={filter.key ?? ''} onRemove={() => model._removeFilter(filter)} />\n      );\n\n      return (\n        <Field label={label} data-testid={`AdHocFilter-${filter.key}`} className={styles.field}>\n          <div className={styles.wrapper}>\n            {operatorSelect}\n            {valueSelect}\n          </div>\n        </Field>\n      );\n    } else {\n      return (\n        <Field label={'Select label'} data-testid={`AdHocFilter-${filter.key}`} className={styles.field}>\n          {keySelect}\n        </Field>\n      );\n    }\n  }\n\n  return (\n    <div className={styles.wrapper} data-testid={`AdHocFilter-${filter.key}`}>\n      {keySelect}\n      {operatorSelect}\n      {valueSelect}\n      <Button\n        variant=\"secondary\"\n        aria-label=\"Remove filter\"\n        title=\"Remove filter\"\n        className={styles.removeButton}\n        icon=\"times\"\n        data-testid={`AdHocFilter-remove-${filter.key ?? ''}`}\n        onClick={() => model._removeFilter(filter)}\n      />\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css({\n    marginBottom: 0,\n  }),\n  wrapper: css({\n    display: 'flex',\n    '> *': {\n      '&:not(:first-child)': {\n        // Negative margin hides the double-border on adjacent selects\n        marginLeft: -1,\n      },\n\n      '&:first-child': {\n        borderTopRightRadius: 0,\n        borderBottomRightRadius: 0,\n      },\n\n      '&:last-child': {\n        borderTopLeftRadius: 0,\n        borderBottomLeftRadius: 0,\n      },\n\n      '&:not(:first-child):not(:last-child)': {\n        borderRadius: 0,\n      },\n\n      // Fix focus state zIndex issues\n      position: 'relative',\n      zIndex: 0,\n\n      // Adjacent borders are overlapping, so raise children up when hovering etc\n      // so all that child's borders are visible.\n      '&:hover': {\n        zIndex: 1,\n      },\n\n      '&:focus-within': {\n        zIndex: 2,\n      },\n    },\n  }),\n  widthWhenOpen: css({\n    minWidth: theme.spacing(16),\n  }),\n  value: css({\n    flexBasis: 'content',\n    flexShrink: 1,\n    minWidth: '90px',\n  }),\n  key: css({\n    flexBasis: 'content',\n    minWidth: '90px',\n    flexShrink: 1,\n  }),\n  operator: css({\n    flexShrink: 0,\n    flexBasis: 'content',\n  }),\n  removeButton: css({\n    paddingLeft: theme.spacing(3 / 2),\n    paddingRight: theme.spacing(3 / 2),\n    borderLeft: 'none',\n    width: theme.spacing(3),\n    marginRight: theme.spacing(1),\n    boxSizing: 'border-box',\n    // To not have button background and last select border intersect\n    position: 'relative',\n    left: '1px',\n  }),\n});\n","import React from 'react';\n\nimport { AdHocFilterRenderer } from './AdHocFilterRenderer';\nimport { AdHocFiltersVariable } from './AdHocFiltersVariable';\nimport { Button } from '@grafana/ui';\n\ninterface Props {\n  model: AdHocFiltersVariable;\n  addFilterButtonText?: string;\n}\n\nexport function AdHocFilterBuilder({ model, addFilterButtonText }: Props) {\n  const { _wip } = model.useState();\n\n  if (!_wip) {\n    return (\n      <Button\n        variant=\"secondary\"\n        icon=\"plus\"\n        title={'Add filter'}\n        aria-label=\"Add filter\"\n        data-testid={`AdHocFilter-add`}\n        onClick={() => model._addWip()}\n      >{addFilterButtonText}</Button>\n    );\n  }\n\n  return <AdHocFilterRenderer filter={_wip} model={model} />;\n}\n","import { SceneObjectUrlSyncHandler, SceneObjectUrlValue, SceneObjectUrlValues } from '../../core/types';\nimport { AdHocFiltersVariable, AdHocFilterWithLabels, isFilterComplete, isMultiValueOperator } from './AdHocFiltersVariable';\nimport { escapeUrlPipeDelimiters, toUrlCommaDelimitedString, unescapeUrlDelimiters } from '../utils';\n\nexport class AdHocFiltersVariableUrlSyncHandler implements SceneObjectUrlSyncHandler {\n  public constructor(private _variable: AdHocFiltersVariable) {}\n\n  private getKey(): string {\n    return `var-${this._variable.state.name}`;\n  }\n\n  public getKeys(): string[] {\n    return [this.getKey()];\n  }\n\n  public getUrlState(): SceneObjectUrlValues {\n    const filters = this._variable.state.filters;\n\n    if (filters.length === 0) {\n      return { [this.getKey()]: [''] };\n    }\n\n    const value = filters.filter(isFilterComplete).map((filter) => toArray(filter).map(escapeUrlPipeDelimiters).join('|'));\n    return { [this.getKey()]: value };\n  }\n\n  public updateFromUrl(values: SceneObjectUrlValues): void {\n    const urlValue = values[this.getKey()];\n\n    if (urlValue == null) {\n      return;\n    }\n\n    const filters = deserializeUrlToFilters(urlValue);\n    this._variable.setState({ filters });\n  }\n}\n\nfunction deserializeUrlToFilters(value: SceneObjectUrlValue): AdHocFilterWithLabels[] {\n  if (Array.isArray(value)) {\n    const values = value;\n    return values.map(toFilter).filter(isFilter);\n  }\n\n  const filter = toFilter(value);\n  return filter === null ? [] : [filter];\n}\n\nfunction toArray(filter: AdHocFilterWithLabels): string[] {\n  const result = [\n    toUrlCommaDelimitedString(filter.key, filter.keyLabel),\n    filter.operator,\n  ];\n  if (isMultiValueOperator(filter.operator)) {\n    // TODO remove expect-error when we're on the latest version of @grafana/data\n    // @ts-expect-error\n    filter.values.forEach((value, index) => {\n      result.push(toUrlCommaDelimitedString(value, filter.valueLabels?.[index]));\n    });\n  } else {\n    result.push(toUrlCommaDelimitedString(filter.value, filter.valueLabels?.[0]));\n  }\n  return result;\n}\n\nfunction toFilter(urlValue: string | number | boolean | undefined | null): AdHocFilterWithLabels | null {\n  if (typeof urlValue !== 'string' || urlValue.length === 0) {\n    return null;\n  }\n\n  const [key, keyLabel, operator, _operatorLabel, ...values] = urlValue\n    .split('|')\n    .reduce<string[]>((acc, v) => {\n      const [key, label] = v.split(',');\n\n      acc.push(key, label ?? key);\n\n      return acc;\n    }, [])\n    .map(unescapeUrlDelimiters);\n\n  return {\n    key,\n    keyLabel,\n    operator,\n    value: values[0],\n    // TODO remove expect-error when we're on the latest version of @grafana/data\n    // @ts-expect-error\n    values: isMultiValueOperator(operator) ? values.filter((_, index) => index % 2 === 0) : undefined,\n    valueLabels: values.filter((_, index) => index % 2 === 1),\n    condition: '',\n  };\n}\n\nfunction isFilter(filter: AdHocFilterWithLabels | null): filter is AdHocFilterWithLabels {\n  return filter !== null && typeof filter.key === 'string' && typeof filter.value === 'string';\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Checkbox, useStyles2 } from '@grafana/ui';\nimport React, { forwardRef, useId } from 'react';\n\ninterface DropdownItemProps {\n  children: React.ReactNode;\n  active?: boolean;\n  addGroupBottomBorder?: boolean;\n  isMultiValueEdit?: boolean;\n  checked?: boolean;\n}\n\nexport const DropdownItem = forwardRef<HTMLDivElement, DropdownItemProps & React.HTMLProps<HTMLDivElement>>(\n  function DropdownItem({ children, active, addGroupBottomBorder, isMultiValueEdit, checked, ...rest }, ref) {\n    const styles = useStyles2(getStyles);\n    const id = useId();\n    return (\n      <div\n        ref={ref}\n        role=\"option\"\n        id={id}\n        aria-selected={active}\n        className={cx(styles.option, active && styles.optionFocused, addGroupBottomBorder && styles.groupBottomBorder)}\n        {...rest}\n      >\n        <div className={styles.optionBody} data-testid={`data-testid ad hoc filter option value ${children}`}>\n          <span>\n            {isMultiValueEdit ? <Checkbox tabIndex={-1} checked={checked} className={styles.checkbox} /> : null}\n            {children}\n          </span>\n        </div>\n      </div>\n    );\n  }\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  option: css({\n    label: 'grafana-select-option',\n    top: 0,\n    left: 0,\n    width: '100%',\n    position: 'absolute',\n    padding: theme.spacing(1),\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'row',\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n    cursor: 'pointer',\n    '&:hover': {\n      background: theme.colors.action.hover,\n      '@media (forced-colors: active), (prefers-contrast: more)': {\n        border: `1px solid ${theme.colors.primary.border}`,\n      },\n    },\n  }),\n  optionFocused: css({\n    label: 'grafana-select-option-focused',\n    background: theme.colors.action.focus,\n    '@media (forced-colors: active), (prefers-contrast: more)': {\n      border: `1px solid ${theme.colors.primary.border}`,\n    },\n  }),\n  optionBody: css({\n    label: 'grafana-select-option-body',\n    display: 'flex',\n    fontWeight: theme.typography.fontWeightMedium,\n    flexDirection: 'column',\n    flexGrow: 1,\n  }),\n  groupBottomBorder: css({\n    borderBottom: `1px solid ${theme.colors.border.weak}`,\n  }),\n  checkbox: css({\n    paddingRight: theme.spacing(0.5),\n  }),\n  multiValueApplyWrapper: css({\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    display: 'flex',\n    backgroundColor: theme.colors.background.primary,\n    color: theme.colors.text.primary,\n    boxShadow: theme.shadows.z2,\n    overflowY: 'auto',\n    zIndex: theme.zIndex.dropdown,\n    gap: theme.spacing(1.5),\n    padding: `${theme.spacing(1.5)} ${theme.spacing(1)}`,\n  }),\n});\n\nexport const LoadingOptionsPlaceholder = () => {\n  return <DropdownItem onClick={(e) => e.stopPropagation()}>Loading options...</DropdownItem>;\n};\n\nexport const NoOptionsPlaceholder = () => {\n  return <DropdownItem onClick={(e) => e.stopPropagation()}>No options found</DropdownItem>;\n};\n\nexport const OptionsErrorPlaceholder = ({ handleFetchOptions }: { handleFetchOptions: () => void }) => {\n  return (\n    <DropdownItem onClick={handleFetchOptions}>An error has occurred fetching labels. Click to retry</DropdownItem>\n  );\n};\n\ninterface MultiValueApplyButtonProps {\n  onApply: () => void;\n  floatingElement: HTMLElement | null;\n  maxOptionWidth: number;\n  menuHeight: number;\n}\n\nexport const MultiValueApplyButton = ({ onApply, floatingElement, maxOptionWidth, menuHeight }: MultiValueApplyButtonProps) => {\n  const styles = useStyles2(getStyles);\n\n  const floatingElementRect = floatingElement?.getBoundingClientRect();\n  return (\n    <div\n      className={styles.multiValueApplyWrapper}\n      style={{\n        width: `${maxOptionWidth}px`,\n        transform: `translate(${floatingElementRect?.left}px,${floatingElementRect ? floatingElementRect.top + menuHeight : 0}px)`,\n      }}\n    >\n      <Button onClick={onApply} size=\"sm\" tabIndex={-1}>\n        Apply\n      </Button>\n    </div>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\nimport uFuzzy from '@leeoniya/ufuzzy';\nimport { AdHocInputType } from './AdHocFiltersCombobox';\nimport { AdHocFilterWithLabels, isMultiValueOperator } from '../AdHocFiltersVariable';\n\nconst VIRTUAL_LIST_WIDTH_ESTIMATE_MULTIPLIER = 8;\nconst VIRTUAL_LIST_DESCRIPTION_WIDTH_ESTIMATE_MULTIPLIER = 6;\nconst VIRTUAL_LIST_PADDING = 8;\nexport const VIRTUAL_LIST_OVERSCAN = 5;\nexport const VIRTUAL_LIST_ITEM_HEIGHT = 38;\nexport const VIRTUAL_LIST_ITEM_HEIGHT_WITH_DESCRIPTION = 60;\nexport const ERROR_STATE_DROPDOWN_WIDTH = 366;\n\nexport function fuzzySearchOptions(options: Array<SelectableValue<string>>) {\n  const ufuzzy = new uFuzzy();\n  const haystack: string[] = [];\n  const limit = 10000;\n\n  return (search: string, filterInputType: AdHocInputType) => {\n    if (search === '') {\n      if (options.length > limit) {\n        return options.slice(0, limit);\n      } else {\n        return options;\n      }\n    }\n\n    if (filterInputType === 'operator') {\n      const filteredOperators = [];\n      for (let i = 0; i < options.length; i++) {\n        if ((options[i].label || options[i].value)?.includes(search)) {\n          filteredOperators.push(options[i]);\n          if (filteredOperators.length > limit) {\n            return filteredOperators;\n          }\n        }\n      }\n      return filteredOperators;\n    }\n\n    if (haystack.length === 0) {\n      for (let i = 0; i < options.length; i++) {\n        haystack.push(options[i].label || options[i].value!);\n      }\n    }\n    const [idxs, info, order] = ufuzzy.search(haystack, search);\n    const filteredOptions: Array<SelectableValue<string>> = [];\n\n    if (idxs) {\n      for (let i = 0; i < idxs.length; i++) {\n        if (info && order) {\n          const idx = order[i];\n          filteredOptions.push(options[idxs[idx]]);\n        } else {\n          filteredOptions.push(options[idxs[i]]);\n        }\n\n        if (filteredOptions.length > limit) {\n          return filteredOptions;\n        }\n      }\n      return filteredOptions;\n    }\n\n    if (options.length > limit) {\n      return options.slice(0, limit);\n    }\n\n    return options;\n  };\n}\nexport const flattenOptionGroups = (options: Array<SelectableValue<string>>) =>\n  options.flatMap<SelectableValue<string>>((option) => (option.options ? [option, ...option.options] : [option]));\n\nexport const setupDropdownAccessibility = (\n  options: Array<SelectableValue<string>>,\n  listRef: React.MutableRefObject<Array<HTMLElement | null>>,\n  disabledIndicesRef: React.MutableRefObject<number[]>\n) => {\n  let maxOptionWidth = 182;\n  const listRefArr = [];\n  const disabledIndices = [];\n\n  for (let i = 0; i < options.length; i++) {\n    // listRefArr should be filled with nulls for amount of dropdown items so that\n    //    useNavigationList sets activeIndex correctly when navigating with arrow keys\n    listRefArr.push(null);\n\n    // disabledIndices are used to skip unselectable group items in dropdown when\n    //    navigating with arrow keys\n    if (options[i]?.options) {\n      disabledIndices.push(i);\n    }\n    let label = options[i].label ?? options[i].value ?? '';\n    let multiplierToUse = VIRTUAL_LIST_WIDTH_ESTIMATE_MULTIPLIER;\n    if (\n      label.length * VIRTUAL_LIST_WIDTH_ESTIMATE_MULTIPLIER <\n      (options[i].description?.length || 0) * VIRTUAL_LIST_DESCRIPTION_WIDTH_ESTIMATE_MULTIPLIER\n    ) {\n      label = options[i].description!;\n      multiplierToUse = VIRTUAL_LIST_DESCRIPTION_WIDTH_ESTIMATE_MULTIPLIER;\n    }\n\n    // rough widthEstimate\n    const widthEstimate =\n      (options[i].isCustom ? label.length + 18 : label.length) * multiplierToUse + VIRTUAL_LIST_PADDING * 2;\n    if (widthEstimate > maxOptionWidth) {\n      maxOptionWidth = widthEstimate;\n    }\n  }\n\n  listRef.current = [...listRefArr];\n  disabledIndicesRef.current = [...disabledIndices];\n  return maxOptionWidth;\n};\n\nconst nextInputTypeMap = {\n  key: 'operator',\n  operator: 'value',\n  value: 'key',\n} as const;\n\nexport const switchToNextInputType = (\n  filterInputType: AdHocInputType,\n  setInputType: React.Dispatch<React.SetStateAction<AdHocInputType>>,\n  handleChangeViewMode: (() => void) | undefined,\n  element: HTMLInputElement | null\n) =>\n  switchInputType(\n    nextInputTypeMap[filterInputType],\n    setInputType,\n    filterInputType === 'value' ? handleChangeViewMode : undefined,\n    element\n  );\n\nexport const switchInputType = (\n  filterInputType: AdHocInputType,\n  setInputType: React.Dispatch<React.SetStateAction<AdHocInputType>>,\n  handleChangeViewMode?: () => void,\n  element?: HTMLInputElement | null\n) => {\n  setInputType(filterInputType);\n\n  handleChangeViewMode?.();\n\n  setTimeout(() => element?.focus());\n};\n\nexport const generateFilterUpdatePayload = ({\n  filterInputType,\n  item,\n  filter,\n  setFilterMultiValues,\n}: {\n  filterInputType: AdHocInputType;\n  item: SelectableValue<string>;\n  filter: AdHocFilterWithLabels;\n  setFilterMultiValues: (value: React.SetStateAction<Array<SelectableValue<string>>>) => void;\n}): Partial<AdHocFilterWithLabels> => {\n  if (filterInputType === 'key') {\n    return {\n      key: item.value,\n      keyLabel: item.label ? item.label : item.value,\n    };\n  }\n  if (filterInputType === 'value') {\n    return {\n      value: item.value,\n      valueLabels: [item.label ? item.label : item.value!],\n    };\n  }\n\n  if (filterInputType === 'operator') {\n    // handle values/valueLabels when switching from multi to single value operator\n    if (isMultiValueOperator(filter.operator) && !isMultiValueOperator(item.value!)) {\n      // reset local multi values state\n      setFilterMultiValues([]);\n      // update operator and reset values and valueLabels\n      return {\n        operator: item.value,\n        // TODO remove when we're on the latest version of @grafana/data\n        //@ts-expect-error\n        valueLabels: [filter.valueLabels?.[0] || filter.values?.[0] || filter.value],\n        //@ts-expect-error\n        values: undefined,\n      };\n    }\n\n    // handle values/valueLabels when switching from single to multi value operator\n    if (isMultiValueOperator(item.value!) && !isMultiValueOperator(filter.operator)) {\n      // TODO remove when we're on the latest version of @grafana/data\n      //@ts-expect-error\n      const valueLabels = [filter.valueLabels?.[0] || filter.values?.[0] || filter.value];\n      const values = [filter.value];\n\n      // populate local multi values state\n      if (values[0]) {\n        setFilterMultiValues([\n          {\n            value: values[0],\n            label: valueLabels?.[0] ?? values[0],\n          },\n        ]);\n      }\n\n      // update operator and default values and valueLabels\n      return {\n        operator: item.value,\n        valueLabels: valueLabels,\n        //@ts-expect-error\n        values: values,\n      };\n    }\n  }\n\n  // default operator update of same multi/single type\n  return {\n    [filterInputType]: item.value,\n  };\n};\n\nconst INPUT_PLACEHOLDER = 'Filter by label values';\n\nexport const generatePlaceholder = (\n  filter: AdHocFilterWithLabels,\n  filterInputType: AdHocInputType,\n  isMultiValueEdit: boolean,\n  isAlwaysWip?: boolean\n) => {\n  if (filterInputType === 'key') {\n    return INPUT_PLACEHOLDER;\n  }\n  if (filterInputType === 'value') {\n    if (isMultiValueEdit) {\n      return 'Edit values';\n    }\n    return filter.valueLabels?.[0] || '';\n  }\n\n  return filter[filterInputType] && !isAlwaysWip ? `${filter[filterInputType]}` : INPUT_PLACEHOLDER;\n};\n","import {\n  useFloating,\n  autoUpdate,\n  offset,\n  useRole,\n  useDismiss,\n  useListNavigation,\n  UseFloatingOptions,\n  flip,\n  size,\n  UseListNavigationProps,\n  useInteractions,\n} from '@floating-ui/react';\n\ntype useFloatingInteractionsProps = {\n  open: UseFloatingOptions['open'];\n  onOpenChange: UseFloatingOptions['onOpenChange'];\n  activeIndex: UseListNavigationProps['activeIndex'];\n  setActiveIndex: UseListNavigationProps['onNavigate'];\n  outsidePressIdsToIgnore: string[];\n  listRef: React.MutableRefObject<Array<HTMLElement | null>>;\n  disabledIndicesRef: React.MutableRefObject<number[]>;\n};\n\nexport const MAX_MENU_HEIGHT = 300;\n\nexport const useFloatingInteractions = ({\n  open,\n  onOpenChange,\n  activeIndex,\n  setActiveIndex,\n  outsidePressIdsToIgnore,\n  listRef,\n  disabledIndicesRef,\n}: useFloatingInteractionsProps) => {\n  const { refs, floatingStyles, context } = useFloating<HTMLInputElement>({\n    whileElementsMounted: autoUpdate,\n    open,\n    onOpenChange,\n    placement: 'bottom-start',\n    middleware: [\n      offset(10),\n      flip({ padding: 10 }),\n      size({\n        apply({ availableHeight, availableWidth, elements }) {\n          // limit maxHeight and maxWidth of dropdown\n          elements.floating.style.maxHeight = `${Math.min(MAX_MENU_HEIGHT, availableHeight)}px`;\n          elements.floating.style.maxWidth = `${availableWidth}px`;\n        },\n        padding: 10,\n      }),\n    ],\n    strategy: 'fixed',\n  });\n\n  const role = useRole(context, { role: 'listbox' });\n  const dismiss = useDismiss(context, {\n    // if outside click lands on operator pill, then ignore outside click\n    outsidePress: (event) => {\n      if (event.currentTarget instanceof Element) {\n        const target = event.currentTarget;\n        let idToCompare = target.id;\n        if (target.nodeName === 'path') {\n          idToCompare = target.parentElement?.id || '';\n        }\n\n        if (outsidePressIdsToIgnore.includes(idToCompare)) {\n          return false;\n        }\n      }\n      return true;\n    },\n  });\n  const listNav = useListNavigation(context, {\n    listRef,\n    activeIndex,\n    onNavigate: setActiveIndex,\n    virtual: true,\n    loop: true,\n    disabledIndices: disabledIndicesRef.current,\n  });\n\n  const { getReferenceProps, getFloatingProps, getItemProps } = useInteractions([role, dismiss, listNav]);\n\n  return {\n    refs,\n    floatingStyles,\n    context,\n    getReferenceProps,\n    getFloatingProps,\n    getItemProps,\n  };\n};\n","import React, {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useId,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { FloatingFocusManager, FloatingPortal, UseFloatingOptions } from '@floating-ui/react';\nimport { Button, Icon, Spinner, Text, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { AdHocFilterWithLabels, AdHocFiltersVariable, isMultiValueOperator } from '../AdHocFiltersVariable';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport {\n  DropdownItem,\n  LoadingOptionsPlaceholder,\n  MultiValueApplyButton,\n  NoOptionsPlaceholder,\n  OptionsErrorPlaceholder,\n} from './DropdownItem';\nimport {\n  ERROR_STATE_DROPDOWN_WIDTH,\n  flattenOptionGroups,\n  fuzzySearchOptions,\n  generateFilterUpdatePayload,\n  generatePlaceholder,\n  setupDropdownAccessibility,\n  switchInputType,\n  switchToNextInputType,\n  VIRTUAL_LIST_ITEM_HEIGHT,\n  VIRTUAL_LIST_ITEM_HEIGHT_WITH_DESCRIPTION,\n  VIRTUAL_LIST_OVERSCAN,\n} from './utils';\nimport { handleOptionGroups } from '../../utils';\nimport { useFloatingInteractions, MAX_MENU_HEIGHT } from './useFloatingInteractions';\n\ninterface AdHocComboboxProps {\n  filter?: AdHocFilterWithLabels;\n  isAlwaysWip?: boolean;\n  model: AdHocFiltersVariable;\n  handleChangeViewMode?: () => void;\n}\n\nexport type AdHocInputType = 'key' | 'operator' | 'value';\n\nexport const AdHocCombobox = forwardRef(function AdHocCombobox(\n  { filter, model, isAlwaysWip, handleChangeViewMode }: AdHocComboboxProps,\n  parentRef\n) {\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState<Array<SelectableValue<string>>>([]);\n  const [optionsLoading, setOptionsLoading] = useState<boolean>(false);\n  const [optionsError, setOptionsError] = useState<boolean>(false);\n  const [inputValue, setInputValue] = useState('');\n  const [activeIndex, setActiveIndex] = useState<number | null>(null);\n  const [filterInputType, setInputType] = useState<AdHocInputType>(!isAlwaysWip ? 'value' : 'key');\n  const styles = useStyles2(getStyles);\n  // control multi values with local state in order to commit all values at once and avoid _wip reset mid creation\n  const [filterMultiValues, setFilterMultiValues] = useState<Array<SelectableValue<string>>>([]);\n  const [_, setForceRefresh] = useState({});\n\n  const multiValuePillWrapperRef = useRef<HTMLDivElement>(null);\n\n  const hasMultiValueOperator = isMultiValueOperator(filter?.operator || '');\n  const isMultiValueEdit = hasMultiValueOperator && filterInputType === 'value';\n\n  // used to identify operator element and prevent dismiss because it registers as outside click\n  const operatorIdentifier = useId();\n\n  const listRef = useRef<Array<HTMLElement | null>>([]);\n  const disabledIndicesRef = useRef<number[]>([]);\n\n  const optionsSearcher = useMemo(() => fuzzySearchOptions(options), [options]);\n\n  // reset wip filter. Used when navigating away with incomplete wip filer or when selecting wip filter value\n  const handleResetWip = useCallback(() => {\n    if (isAlwaysWip) {\n      model._addWip();\n      setInputType('key');\n      setInputValue('');\n    }\n  }, [model, isAlwaysWip]);\n\n  const handleMultiValueFilterCommit = useCallback(\n    (\n      model: AdHocFiltersVariable,\n      filter: AdHocFilterWithLabels,\n      filterMultiValues: Array<SelectableValue<string>>,\n      preventFocus?: boolean\n    ) => {\n      if (filterMultiValues.length) {\n        const valueLabels: string[] = [];\n        const values: string[] = [];\n        filterMultiValues.forEach((item) => {\n          valueLabels.push(item.label ?? item.value!);\n          values.push(item.value!);\n        });\n        // TODO remove when we're on the latest version of @grafana/data\n        //@ts-expect-error\n        model._updateFilter(filter!, { valueLabels, values, value: values[0] });\n        setFilterMultiValues([]);\n      }\n      if (!preventFocus) {\n        setTimeout(() => refs.domReference.current?.focus());\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const handleLocalMultiValueChange = useCallback((selectedItem: SelectableValue<string>) => {\n    setFilterMultiValues((items) => {\n      if (items.some((item) => item.value === selectedItem.value)) {\n        return items.filter((item) => item.value !== selectedItem.value);\n      }\n      return [...items, selectedItem];\n    });\n  }, []);\n\n  const onOpenChange = useCallback<NonNullable<UseFloatingOptions['onOpenChange']>>(\n    (nextOpen, _, reason) => {\n      setOpen(nextOpen);\n      // change from filter edit mode to filter view mode when clicked\n      //   outside input or dropdown\n\n      if (reason && ['outside-press', 'escape-key'].includes(reason)) {\n        if (isMultiValueEdit) {\n          // commit multi value filter values on escape and click-away\n          handleMultiValueFilterCommit(model, filter!, filterMultiValues);\n        }\n        handleResetWip();\n        handleChangeViewMode?.();\n      }\n    },\n    [\n      filter,\n      filterMultiValues,\n      handleChangeViewMode,\n      handleMultiValueFilterCommit,\n      handleResetWip,\n      isMultiValueEdit,\n      model,\n    ]\n  );\n\n  // generate ids from multi values in order to prevent outside click based on those ids\n  const outsidePressIdsToIgnore = useMemo(() => {\n    return [operatorIdentifier, ...filterMultiValues.map((item, i) => `${item.value}-${i}`)];\n  }, [operatorIdentifier, filterMultiValues]);\n\n  const { refs, floatingStyles, context, getReferenceProps, getFloatingProps, getItemProps } = useFloatingInteractions({\n    open,\n    onOpenChange,\n    activeIndex,\n    setActiveIndex,\n    outsidePressIdsToIgnore,\n    listRef,\n    disabledIndicesRef,\n  });\n\n  // pass ability to focus on input element back to parent\n  //     parentRef is coming from AdHocFiltersComboboxRenderer\n  useImperativeHandle(parentRef, () => () => refs.domReference.current?.focus(), [refs.domReference]);\n\n  function onChange(event: React.ChangeEvent<HTMLInputElement>) {\n    // part of POC for seamless filter parser\n    // filterAutoParser({ event, filterInputType, options, model, filter, setInputValue, setInputType, refs });\n\n    const value = event.target.value;\n    setInputValue(value);\n    setActiveIndex(0);\n  }\n\n  const handleRemoveMultiValue = useCallback(\n    (item: SelectableValue<string>) => {\n      setFilterMultiValues((selected) => selected.filter((option) => option.value !== item.value));\n      setTimeout(() => refs.domReference.current?.focus());\n    },\n    [refs.domReference]\n  );\n\n  // operation order on fetched options:\n  //    fuzzy search -> extract into groups -> flatten group labels and options\n  const filteredDropDownItems = flattenOptionGroups(handleOptionGroups(optionsSearcher(inputValue, filterInputType)));\n\n  // adding custom option this way so that virtualiser is aware of it and can scroll to\n  if (filterInputType !== 'operator' && inputValue) {\n    filteredDropDownItems.push({\n      value: inputValue.trim(),\n      label: inputValue.trim(),\n      isCustom: true,\n    });\n  }\n\n  // calculate width and populate listRef and disabledIndicesRef for arrow key navigation\n  const maxOptionWidth = setupDropdownAccessibility(filteredDropDownItems, listRef, disabledIndicesRef);\n\n  const handleFetchOptions = useCallback(\n    async (inputType: AdHocInputType) => {\n      setOptionsError(false);\n      setOptionsLoading(true);\n      setOptions([]);\n      let options: Array<SelectableValue<string>> = [];\n      try {\n        if (inputType === 'key') {\n          options = await model._getKeys(null);\n        } else if (inputType === 'operator') {\n          options = model._getOperators();\n        } else if (inputType === 'value') {\n          options = await model._getValuesFor(filter!);\n        }\n\n        setOptions(options);\n        if (options[0]?.group) {\n          setActiveIndex(1);\n        }\n      } catch (e) {\n        setOptionsError(true);\n      }\n      setOptionsLoading(false);\n    },\n    [filter, model]\n  );\n\n  const rowVirtualizer = useVirtualizer({\n    count: filteredDropDownItems.length,\n    getScrollElement: () => refs.floating.current,\n    estimateSize: (index) =>\n      filteredDropDownItems[index].description ? VIRTUAL_LIST_ITEM_HEIGHT_WITH_DESCRIPTION : VIRTUAL_LIST_ITEM_HEIGHT,\n    overscan: VIRTUAL_LIST_OVERSCAN,\n  });\n\n  //\n  // Keyboard interactions\n  //\n\n  const handleBackspaceInput = useCallback(\n    (event: React.KeyboardEvent, multiValueEdit: boolean) => {\n      if (event.key === 'Backspace' && !inputValue) {\n        if (multiValueEdit) {\n          setFilterMultiValues((items) => {\n            const updated = [...items];\n            updated.splice(-1, 1);\n\n            return updated;\n          });\n        } else if (filterInputType === 'key') {\n          model._removeLastFilter();\n          handleFetchOptions(filterInputType);\n        }\n      }\n    },\n    [inputValue, filterInputType, model, handleFetchOptions]\n  );\n\n  const handleTabInput = useCallback(\n    (event: React.KeyboardEvent, multiValueEdit?: boolean) => {\n      // change filter to view mode when navigating away with Tab key\n      //  this is needed because useDismiss only reacts to mousedown\n      if (event.key === 'Tab' && !event.shiftKey) {\n        if (multiValueEdit) {\n          // commit multi value filter values on tab away\n          event.preventDefault();\n          handleMultiValueFilterCommit(model, filter!, filterMultiValues);\n          refs.domReference.current?.focus();\n        }\n\n        handleChangeViewMode?.();\n        handleResetWip();\n      }\n    },\n    [\n      filter,\n      filterMultiValues,\n      handleChangeViewMode,\n      handleMultiValueFilterCommit,\n      handleResetWip,\n      model,\n      refs.domReference,\n    ]\n  );\n\n  const handleShiftTabInput = useCallback(\n    (event: React.KeyboardEvent, multiValueEdit?: boolean) => {\n      if (event.key === 'Tab' && event.shiftKey) {\n        if (multiValueEdit) {\n          // commit multi value filter values on shift tab away\n          event.preventDefault();\n          handleMultiValueFilterCommit(model, filter!, filterMultiValues, true);\n        }\n        handleChangeViewMode?.();\n        handleResetWip();\n      }\n    },\n    [filter, filterMultiValues, handleChangeViewMode, handleMultiValueFilterCommit, handleResetWip, model]\n  );\n\n  const handleEnterInput = useCallback(\n    (event: React.KeyboardEvent, multiValueEdit?: boolean) => {\n      if (event.key === 'Enter' && activeIndex != null) {\n        // safeguard for non existing items\n        if (!filteredDropDownItems[activeIndex]) {\n          return;\n        }\n        const selectedItem = filteredDropDownItems[activeIndex];\n\n        if (multiValueEdit) {\n          handleLocalMultiValueChange(selectedItem);\n        } else {\n          model._updateFilter(\n            filter!,\n            generateFilterUpdatePayload({\n              filterInputType,\n              item: selectedItem,\n              filter: filter!,\n              setFilterMultiValues,\n            })\n          );\n\n          switchToNextInputType(filterInputType, setInputType, handleChangeViewMode, refs.domReference.current);\n          setActiveIndex(0);\n        }\n\n        setInputValue('');\n      }\n    },\n    [\n      activeIndex,\n      filter,\n      filterInputType,\n      filteredDropDownItems,\n      handleLocalMultiValueChange,\n      handleChangeViewMode,\n      model,\n      refs.domReference,\n    ]\n  );\n\n  //\n  // Effects\n  //\n\n  useEffect(() => {\n    // fetch options when dropdown is opened.\n    if (open) {\n      handleFetchOptions(filterInputType);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [open, filterInputType]);\n\n  // when not in wip mode this is the point of switching from view to edit mode\n  //    and in this case we default to 'value' input type and focus input\n  useEffect(() => {\n    if (!isAlwaysWip) {\n      setInputType('value');\n      setInputValue('');\n\n      // TODO remove when we're on the latest version of @grafana/data\n      //@ts-expect-error\n      if (hasMultiValueOperator && filter?.values?.length) {\n        // TODO remove when we're on the latest version of @grafana/data\n        //@ts-expect-error\n        const multiValueOptions = (filter.values as string[]).reduce<Array<SelectableValue<string>>>(\n          (acc, value, i) => [\n            ...acc,\n            {\n              label: filter.valueLabels?.[i] || value,\n              value: value,\n            },\n          ],\n          []\n        );\n        // populate filter multi values to local state on pill edit enter\n        setFilterMultiValues(multiValueOptions);\n      }\n\n      refs.domReference.current?.focus();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // this is required only with multi value select in order to update position\n  //    of the multi value apply button\n  useEffect(() => {\n    if (isMultiValueEdit && filterMultiValues) {\n      setTimeout(() => setForceRefresh({}));\n    }\n  }, [filterMultiValues, isMultiValueEdit]);\n\n  useLayoutEffect(() => {\n    // this is needed to scroll virtual list to the position of currently selected\n    //    dropdown item when navigating with arrow up/down keys to end/start of list\n    if (\n      activeIndex !== null &&\n      rowVirtualizer.range &&\n      (activeIndex > rowVirtualizer.range?.endIndex || activeIndex < rowVirtualizer.range?.startIndex)\n    ) {\n      rowVirtualizer.scrollToIndex(activeIndex);\n    }\n  }, [activeIndex, rowVirtualizer]);\n\n  const keyLabel = filter?.keyLabel ?? filter?.key;\n\n  return (\n    <div className={styles.comboboxWrapper}>\n      {filter ? (\n        <div className={styles.pillWrapper}>\n          {/* Filter key pill render */}\n          {filter?.key ? <div className={cx(styles.basePill, styles.keyPill)}>{keyLabel}</div> : null}\n          {/* Filter operator pill render */}\n          {filter?.key && filter?.operator && filterInputType !== 'operator' ? (\n            <div\n              id={operatorIdentifier}\n              className={cx(styles.basePill, styles.operatorPill, operatorIdentifier)}\n              role=\"button\"\n              aria-label=\"Edit filter operator\"\n              tabIndex={0}\n              onClick={(event) => {\n                event.stopPropagation();\n                switchInputType('operator', setInputType, undefined, refs.domReference.current);\n              }}\n              onKeyDown={(event) => {\n                handleShiftTabInput(event, hasMultiValueOperator);\n                if (event.key === 'Enter') {\n                  switchInputType('operator', setInputType, undefined, refs.domReference.current);\n                }\n              }}\n            >\n              {filter.operator}\n            </div>\n          ) : null}\n\n          <div ref={multiValuePillWrapperRef}></div>\n          {isMultiValueEdit\n            ? filterMultiValues.map((item, i) => (\n                <MultiValuePill\n                  key={`${item.value}-${i}`}\n                  item={item}\n                  index={i}\n                  handleRemoveMultiValue={handleRemoveMultiValue}\n                />\n              ))\n            : null}\n        </div>\n      ) : null}\n\n      <input\n        {...getReferenceProps({\n          ref: refs.setReference,\n          onChange,\n          value: inputValue,\n          // dynamic placeholder to display operator and/or value in filter edit mode\n          placeholder: generatePlaceholder(filter!, filterInputType, isMultiValueEdit, isAlwaysWip),\n          'aria-autocomplete': 'list',\n          onKeyDown(event) {\n            if (!open) {\n              setOpen(true);\n              return;\n            }\n\n            if (filterInputType === 'operator') {\n              handleShiftTabInput(event);\n            }\n            handleBackspaceInput(event, isMultiValueEdit);\n            handleTabInput(event, isMultiValueEdit);\n            handleEnterInput(event, isMultiValueEdit);\n          },\n        })}\n        className={cx(styles.inputStyle, { [styles.loadingInputPadding]: !optionsLoading })}\n        onClick={(event) => {\n          event.stopPropagation();\n          setOpen(true);\n        }}\n        onFocus={() => {\n          setActiveIndex(0);\n          setOpen(true);\n        }}\n      />\n      {optionsLoading ? <Spinner className={styles.loadingIndicator} inline={true} /> : null}\n      <FloatingPortal>\n        {open && (\n          <FloatingFocusManager context={context} initialFocus={-1} visuallyHiddenDismiss modal={false}>\n            <>\n              <div\n                style={{\n                  ...floatingStyles,\n                  width: `${optionsError ? ERROR_STATE_DROPDOWN_WIDTH : maxOptionWidth}px`,\n                  transform: isMultiValueEdit\n                    ? `translate(${multiValuePillWrapperRef.current?.getBoundingClientRect().left || 0}px, ${\n                        (refs.domReference.current?.getBoundingClientRect().bottom || 0) + 10\n                      }px )`\n                    : floatingStyles.transform,\n                }}\n                ref={refs.setFloating}\n                className={styles.dropdownWrapper}\n                tabIndex={-1}\n              >\n                <div\n                  style={{\n                    height: `${rowVirtualizer.getTotalSize() || VIRTUAL_LIST_ITEM_HEIGHT}px`, // fallback to 38px for loading/error/no options placeholders\n                  }}\n                  {...getFloatingProps()}\n                  tabIndex={-1}\n                >\n                  {optionsLoading ? (\n                    <LoadingOptionsPlaceholder />\n                  ) : optionsError ? (\n                    <OptionsErrorPlaceholder handleFetchOptions={() => handleFetchOptions(filterInputType)} />\n                  ) : !filteredDropDownItems.length && (filterInputType === 'operator' || !inputValue) ? (\n                    <NoOptionsPlaceholder />\n                  ) : (\n                    rowVirtualizer.getVirtualItems().map((virtualItem) => {\n                      const item = filteredDropDownItems[virtualItem.index];\n                      const index = virtualItem.index;\n\n                      // render group label\n                      if (item.options) {\n                        return (\n                          <div\n                            key={`${item.label}+${index}`}\n                            className={cx(styles.optionGroupLabel, styles.groupTopBorder)}\n                            style={{\n                              height: `${virtualItem.size}px`,\n                              transform: `translateY(${virtualItem.start}px)`,\n                            }}\n                          >\n                            <Text weight=\"bold\" variant=\"bodySmall\" color=\"secondary\">\n                              {item.label!}\n                            </Text>\n                          </div>\n                        );\n                      }\n\n                      const nextItem: SelectableValue<string> | undefined =\n                        filteredDropDownItems[virtualItem.index + 1];\n                      const shouldAddBottomBorder = nextItem && !nextItem.group && !nextItem.options && item.group;\n\n                      return (\n                        // key is included in getItemProps()\n                        // eslint-disable-next-line react/jsx-key\n                        <DropdownItem\n                          {...getItemProps({\n                            key: `${item.value!}-${index}`,\n                            ref(node) {\n                              listRef.current[index] = node;\n                            },\n                            onClick(event) {\n                              if (filterInputType !== 'value') {\n                                event.stopPropagation();\n                              }\n                              if (isMultiValueEdit) {\n                                event.preventDefault();\n                                event.stopPropagation();\n                                handleLocalMultiValueChange(item);\n                                refs.domReference.current?.focus();\n                              } else {\n                                model._updateFilter(\n                                  filter!,\n                                  generateFilterUpdatePayload({\n                                    filterInputType,\n                                    item,\n                                    filter: filter!,\n                                    setFilterMultiValues,\n                                  })\n                                );\n                                setInputValue('');\n\n                                switchToNextInputType(\n                                  filterInputType,\n                                  setInputType,\n                                  handleChangeViewMode,\n                                  refs.domReference.current\n                                );\n                              }\n                            },\n                          })}\n                          active={activeIndex === index}\n                          addGroupBottomBorder={shouldAddBottomBorder}\n                          // virtual item positioning and accessibility\n                          style={{\n                            height: `${virtualItem.size}px`,\n                            transform: `translateY(${virtualItem.start}px)`,\n                          }}\n                          aria-setsize={filteredDropDownItems.length}\n                          aria-posinset={virtualItem.index + 1}\n                          isMultiValueEdit={isMultiValueEdit}\n                          checked={filterMultiValues.some((val) => val.value === item.value)}\n                        >\n                          <span>\n                            {item.isCustom ? 'Use custom value: ' : ''} {item.label ?? item.value}\n                          </span>\n                          {item.description ? <div className={styles.descriptionText}>{item.description}</div> : null}\n                        </DropdownItem>\n                      );\n                    })\n                  )}\n                </div>\n              </div>\n              {isMultiValueEdit && !optionsLoading && !optionsError && filteredDropDownItems.length ? (\n                <MultiValueApplyButton\n                  onApply={() => {\n                    handleMultiValueFilterCommit(model, filter!, filterMultiValues);\n                  }}\n                  floatingElement={refs.floating.current}\n                  maxOptionWidth={maxOptionWidth}\n                  menuHeight={Math.min(rowVirtualizer.getTotalSize(), MAX_MENU_HEIGHT)}\n                />\n              ) : null}\n            </>\n          </FloatingFocusManager>\n        )}\n      </FloatingPortal>\n    </div>\n  );\n});\n\ninterface MultiValuePillProps {\n  item: SelectableValue<string>;\n  handleRemoveMultiValue: (item: SelectableValue<string>) => void;\n  index: number;\n}\nconst MultiValuePill = ({ item, handleRemoveMultiValue, index }: MultiValuePillProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={cx(styles.basePill, styles.valuePill)}>\n      <span> {item.label ?? item.value}</span>\n      <Button\n        onClick={(e) => {\n          e.stopPropagation();\n          e.preventDefault();\n          handleRemoveMultiValue(item);\n        }}\n        onKeyDownCapture={(e) => {\n          if (e.key === 'Enter') {\n            e.preventDefault();\n            e.stopPropagation();\n            handleRemoveMultiValue(item);\n          }\n        }}\n        fill=\"text\"\n        size=\"sm\"\n        variant=\"secondary\"\n        className={styles.removeButton}\n        tooltip={`Remove filter value - ${item.label ?? item.value}`}\n      >\n        <Icon name=\"times\" size=\"md\" id={`${item.value}-${index}`} />\n      </Button>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  comboboxWrapper: css({\n    display: 'flex',\n    flexWrap: 'wrap',\n  }),\n  pillWrapper: css({\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n  }),\n  basePill: css({\n    display: 'flex',\n    alignItems: 'center',\n    background: theme.colors.action.disabledBackground,\n    border: `1px solid ${theme.colors.border.weak}`,\n    padding: theme.spacing(0.125, 1, 0.125, 1),\n    color: theme.colors.text.primary,\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    minHeight: theme.spacing(2.75),\n    ...theme.typography.bodySmall,\n    cursor: 'pointer',\n  }),\n  keyPill: css({\n    fontWeight: theme.typography.fontWeightBold,\n    cursor: 'default',\n  }),\n  operatorPill: css({\n    '&:hover': {\n      background: theme.colors.action.hover,\n    },\n  }),\n  valuePill: css({\n    background: theme.colors.action.selected,\n    padding: theme.spacing(0.125, 0, 0.125, 1),\n  }),\n  dropdownWrapper: css({\n    backgroundColor: theme.colors.background.primary,\n    color: theme.colors.text.primary,\n    boxShadow: theme.shadows.z2,\n    overflowY: 'auto',\n    zIndex: theme.zIndex.dropdown,\n  }),\n  inputStyle: css({\n    paddingBlock: 0,\n    '&:focus': {\n      outline: 'none',\n    },\n  }),\n  loadingIndicator: css({\n    color: theme.colors.text.secondary,\n    marginLeft: theme.spacing(0.5),\n  }),\n  loadingInputPadding: css({\n    paddingRight: theme.spacing(2.5),\n  }),\n  optionGroupLabel: css({\n    padding: theme.spacing(1),\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n  }),\n  groupTopBorder: css({\n    '&:not(:first-child)': {\n      borderTop: `1px solid ${theme.colors.border.weak}`,\n    },\n  }),\n  removeButton: css({\n    marginInline: theme.spacing(0.5),\n    height: '100%',\n    padding: 0,\n    cursor: 'pointer',\n    '&:hover': {\n      color: theme.colors.text.primary,\n    },\n  }),\n  descriptionText: css({\n    ...theme.typography.bodySmall,\n    color: theme.colors.text.secondary,\n    paddingTop: theme.spacing(0.5),\n  }),\n  multiValueApply: css({\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    display: 'flex',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, IconButton, Tooltip } from '@grafana/ui';\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { AdHocCombobox } from './AdHocFiltersCombobox';\nimport { AdHocFilterWithLabels, AdHocFiltersVariable } from '../AdHocFiltersVariable';\n\ninterface Props {\n  filter: AdHocFilterWithLabels;\n  model: AdHocFiltersVariable;\n  readOnly?: boolean;\n  focusOnInputRef?: () => void;\n}\n\nexport function AdHocFilterPill({ filter, model, readOnly, focusOnInputRef }: Props) {\n  const styles = useStyles2(getStyles);\n  const [viewMode, setViewMode] = useState(true);\n  const [shouldFocus, setShouldFocus] = useState(false);\n  const pillWrapperRef = useRef<HTMLDivElement>(null);\n\n  const keyLabel = filter.keyLabel ?? filter.key;\n  // TODO remove when we're on the latest version of @grafana/data\n  //@ts-expect-error\n  const valueLabel = filter.valueLabels?.join(', ') || filter.values?.join(', ') || filter.value;\n\n  const handleChangeViewMode = useCallback(\n    (event?: React.MouseEvent) => {\n      event?.stopPropagation();\n      if (readOnly) {\n        return;\n      }\n\n      setShouldFocus(!viewMode);\n      setViewMode(!viewMode);\n    },\n    [readOnly, viewMode]\n  );\n\n  useEffect(() => {\n    if (shouldFocus) {\n      pillWrapperRef.current?.focus();\n      setShouldFocus(false);\n    }\n  }, [shouldFocus]);\n\n  if (viewMode) {\n    const pillText = (\n      <span className={styles.pillText}>\n        {keyLabel} {filter.operator} {valueLabel}\n      </span>\n    );\n    return (\n      <div\n        className={cx(styles.combinedFilterPill, { [styles.readOnlyCombinedFilter]: readOnly })}\n        onClick={handleChangeViewMode}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter') {\n            handleChangeViewMode();\n          }\n        }}\n        role=\"button\"\n        aria-label={`Edit filter with key ${keyLabel}`}\n        tabIndex={0}\n        ref={pillWrapperRef}\n      >\n        {valueLabel.length < 20 ? (\n          pillText\n        ) : (\n          <Tooltip content={<div className={styles.tooltipText}>{valueLabel}</div>} placement=\"top\">\n            {pillText}\n          </Tooltip>\n        )}\n\n        {!readOnly ? (\n          <IconButton\n            onClick={(e) => {\n              e.stopPropagation();\n              model._removeFilter(filter);\n              setTimeout(() => focusOnInputRef?.());\n            }}\n            onKeyDownCapture={(e) => {\n              if (e.key === 'Enter') {\n                e.preventDefault();\n                e.stopPropagation();\n                model._removeFilter(filter);\n                setTimeout(() => focusOnInputRef?.());\n              }\n            }}\n            name=\"times\"\n            size=\"md\"\n            className={styles.removeButton}\n            tooltip={`Remove filter with key ${keyLabel}`}\n          />\n        ) : null}\n      </div>\n    );\n  }\n\n  return <AdHocCombobox filter={filter} model={model} handleChangeViewMode={handleChangeViewMode} />;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  combinedFilterPill: css({\n    display: 'flex',\n    alignItems: 'center',\n    background: theme.colors.action.selected,\n    borderRadius: theme.shape.radius.default,\n    border: `1px solid ${theme.colors.border.weak}`,\n    padding: theme.spacing(0.125, 0, 0.125, 1),\n    color: theme.colors.text.primary,\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    minHeight: theme.spacing(2.75),\n    ...theme.typography.bodySmall,\n    fontWeight: theme.typography.fontWeightBold,\n    cursor: 'pointer',\n\n    '&:hover': {\n      background: theme.colors.action.hover,\n    },\n  }),\n  readOnlyCombinedFilter: css({\n    paddingRight: theme.spacing(1),\n    cursor: 'text',\n    '&:hover': {\n      background: theme.colors.action.selected,\n    },\n  }),\n  removeButton: css({\n    marginInline: theme.spacing(0.5),\n    cursor: 'pointer',\n    '&:hover': {\n      color: theme.colors.text.primary,\n    },\n  }),\n  pillText: css({\n    maxWidth: '200px',\n    width: '100%',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n  }),\n  tooltipText: css({\n    textAlign: 'center',\n  }),\n});\n","import React, { forwardRef, useLayoutEffect } from 'react';\nimport { AdHocFiltersVariable } from '../AdHocFiltersVariable';\nimport { AdHocCombobox } from './AdHocFiltersCombobox';\n\ninterface Props {\n  model: AdHocFiltersVariable;\n}\n\nexport const AdHocFiltersAlwaysWipCombobox = forwardRef(function AdHocFiltersAlwaysWipCombobox(\n  { model }: Props,\n  // pass ability to focus on input element back to parent\n  //    parentRef is coming from AdHocFiltersComboboxRenderer\n  //    parentRef is mutated through useImperativeHandle in AdHocCombobox\n  parentRef\n) {\n  const { _wip } = model.useState();\n\n  // when combobox is in wip mode then check and add _wip if its missing\n  //    needed on first render and when _wip is reset on filter value commit\n  useLayoutEffect(() => {\n    if (!_wip) {\n      model._addWip();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [_wip]);\n\n  return <AdHocCombobox model={model} filter={_wip} isAlwaysWip ref={parentRef} />;\n});\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport React, { memo, useRef } from 'react';\nimport { AdHocFiltersVariable } from '../AdHocFiltersVariable';\nimport { AdHocFilterPill } from './AdHocFilterPill';\nimport { AdHocFiltersAlwaysWipCombobox } from './AdHocFiltersAlwaysWipCombobox';\n\ninterface Props {\n  model: AdHocFiltersVariable;\n}\n\nexport const AdHocFiltersComboboxRenderer = memo(function AdHocFiltersComboboxRenderer({ model }: Props) {\n  const { filters, readOnly } = model.useState();\n  const styles = useStyles2(getStyles);\n  const focusOnInputRef = useRef<() => void>();\n\n  return (\n    <div\n      className={cx(styles.comboboxWrapper, { [styles.comboboxFocusOutline]: !readOnly })}\n      onClick={() => {\n        focusOnInputRef.current?.();\n      }}\n    >\n      <Icon name=\"filter\" className={styles.filterIcon} size=\"lg\" />\n\n      {filters.map((filter, index) => (\n        <AdHocFilterPill\n          key={index}\n          filter={filter}\n          model={model}\n          readOnly={readOnly}\n          focusOnInputRef={focusOnInputRef.current}\n        />\n      ))}\n\n      {!readOnly ? <AdHocFiltersAlwaysWipCombobox model={model} ref={focusOnInputRef} /> : null}\n    </div>\n  );\n});\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  comboboxWrapper: css({\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    columnGap: theme.spacing(1),\n    rowGap: theme.spacing(0.5),\n    minHeight: theme.spacing(4),\n    backgroundColor: theme.components.input.background,\n    border: `1px solid ${theme.colors.border.strong}`,\n    borderRadius: theme.shape.radius.default,\n    paddingInline: theme.spacing(1),\n    paddingBlock: theme.spacing(0.5),\n    flexGrow: 1,\n  }),\n  comboboxFocusOutline: css({\n    '&:focus-within': {\n      outline: '2px dotted transparent',\n      outlineOffset: '2px',\n      boxShadow: `0 0 0 2px ${theme.colors.background.canvas}, 0 0 0px 4px ${theme.colors.primary.main}`,\n      transitionTimingFunction: `cubic-bezier(0.19, 1, 0.22, 1)`,\n      transitionDuration: '0.2s',\n      transitionProperty: 'outline, outline-offset, box-shadow',\n      zIndex: 2,\n    },\n  }),\n  filterIcon: css({\n    color: theme.colors.text.secondary,\n    alignSelf: 'center',\n  }),\n});\n","import React from 'react';\n// @ts-expect-error Remove when 11.1.x is released\nimport { AdHocVariableFilter, GetTagResponse, GrafanaTheme2, MetricFindValue, SelectableValue } from '@grafana/data';\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneVariable, SceneVariableState, SceneVariableValueChangedEvent, VariableValue } from '../types';\nimport { ControlsLayout, SceneComponentProps } from '../../core/types';\nimport { DataSourceRef } from '@grafana/schema';\nimport { dataFromResponse, getQueriesForVariables, renderPrometheusLabelFilters, responseHasError } from '../utils';\nimport { patchGetAdhocFilters } from './patchGetAdhocFilters';\nimport { useStyles2 } from '@grafana/ui';\nimport { sceneGraph } from '../../core/sceneGraph';\nimport { AdHocFilterBuilder } from './AdHocFilterBuilder';\nimport { AdHocFilterRenderer } from './AdHocFilterRenderer';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { AdHocFiltersVariableUrlSyncHandler } from './AdHocFiltersVariableUrlSyncHandler';\nimport { css } from '@emotion/css';\nimport { getEnrichedFiltersRequest } from '../getEnrichedFiltersRequest';\nimport { AdHocFiltersComboboxRenderer } from './AdHocFiltersCombobox/AdHocFiltersComboboxRenderer';\nimport { wrapInSafeSerializableSceneObject } from '../../utils/wrapInSafeSerializableSceneObject';\n\nexport interface AdHocFilterWithLabels extends AdHocVariableFilter {\n  keyLabel?: string;\n  valueLabels?: string[];\n}\n\nexport type AdHocControlsLayout = ControlsLayout | 'combobox';\n\nexport interface AdHocFiltersVariableState extends SceneVariableState {\n  /** Optional text to display on the 'add filter' button */\n  addFilterButtonText?: string;\n  /** The visible filters */\n  filters: AdHocFilterWithLabels[];\n  /** Base filters to always apply when looking up keys*/\n  baseFilters?: AdHocFilterWithLabels[];\n  /** Datasource to use for getTagKeys and getTagValues and also controls which scene queries the filters should apply to */\n  datasource: DataSourceRef | null;\n  /** Controls if the filters can be changed */\n  readOnly?: boolean;\n  /**\n   * @experimental\n   * Controls the layout and design of the label.\n   */\n  layout?: AdHocControlsLayout;\n  /**\n   * Defaults to automatic which means filters will automatically be applied to all queries with the same data source as this AdHocFilterSet.\n   * In manual mode you either have to use the filters programmatically or as a variable inside query expressions.\n   */\n  applyMode: 'auto' | 'manual';\n  /**\n   * Filter out the keys that do not match the regex.\n   */\n  tagKeyRegexFilter?: RegExp;\n  /**\n   * Extension hook for customizing the key lookup.\n   * Return replace: true if you want to override the default lookup\n   * Return replace: false if you want to combine the results with the default lookup\n   */\n  getTagKeysProvider?: getTagKeysProvider;\n  /**\n   * Extension hook for customizing the value lookup.\n   * Return replace: true if you want to override the default lookup.\n   * Return replace: false if you want to combine the results with the default lookup\n   */\n  getTagValuesProvider?: getTagValuesProvider;\n\n  /**\n   * Optionally provide an array of static keys that override getTagKeys\n   */\n  defaultKeys?: MetricFindValue[];\n\n  /**\n   * This is the expression that the filters resulted in. Defaults to\n   * Prometheus / Loki compatible label filter expression\n   */\n  filterExpression?: string;\n\n  /**\n   * The default builder creates a Prometheus/Loki compatible filter expression,\n   * this can be overridden to create a different expression based on the current filters.\n   */\n  expressionBuilder?: AdHocVariableExpressionBuilderFn;\n\n  /**\n   * Whether the filter supports new multi-value operators like =| and !=|\n   */\n  supportsMultiValueOperators?: boolean;\n\n  /**\n   * When querying the datasource for label names and values to determine keys and values\n   * for this ad hoc filter, consider the queries in the scene and use them as a filter.\n   * This queries filter can be used to ensure that only ad hoc filter options that would\n   * impact the current queries are presented to the user.\n   */\n  useQueriesAsFilterForOptions?: boolean;\n\n  /**\n   * @internal state of the new filter being added\n   */\n  _wip?: AdHocFilterWithLabels;\n}\n\nexport type AdHocVariableExpressionBuilderFn = (filters: AdHocFilterWithLabels[]) => string;\n\nexport type getTagKeysProvider = (\n  variable: AdHocFiltersVariable,\n  currentKey: string | null\n) => Promise<{ replace?: boolean; values: GetTagResponse | MetricFindValue[] }>;\n\nexport type getTagValuesProvider = (\n  variable: AdHocFiltersVariable,\n  filter: AdHocFilterWithLabels\n) => Promise<{ replace?: boolean; values: GetTagResponse | MetricFindValue[] }>;\n\nexport type AdHocFiltersVariableCreateHelperArgs = AdHocFiltersVariableState;\n\nexport type OperatorDefinition = {\n  value: string;\n  description?: string;\n  isMulti?: Boolean;\n};\n\nexport const OPERATORS: OperatorDefinition[] = [\n  {\n    value: '=',\n    description: 'Equals',\n  },\n  {\n    value: '!=',\n    description: 'Not equal',\n  },\n  {\n    value: '=|',\n    description: 'One of. Use to filter on multiple values.',\n    isMulti: true,\n  },\n  {\n    value: '!=|',\n    description: 'Not one of. Use to exclude multiple values.',\n    isMulti: true,\n  },\n  {\n    value: '=~',\n    description: 'Matches regex',\n  },\n  {\n    value: '!~',\n    description: 'Does not match regex',\n  },\n  {\n    value: '<',\n    description: 'Less than',\n  },\n  {\n    value: '>',\n    description: 'Greater than',\n  },\n];\n\nexport class AdHocFiltersVariable\n  extends SceneObjectBase<AdHocFiltersVariableState>\n  implements SceneVariable<AdHocFiltersVariableState>\n{\n  static Component = AdHocFiltersVariableRenderer;\n\n  private _scopedVars = { __sceneObject: wrapInSafeSerializableSceneObject(this) };\n  private _dataSourceSrv = getDataSourceSrv();\n\n  protected _urlSync = new AdHocFiltersVariableUrlSyncHandler(this);\n\n  public constructor(state: Partial<AdHocFiltersVariableState>) {\n    super({\n      type: 'adhoc',\n      name: state.name ?? 'Filters',\n      filters: [],\n      datasource: null,\n      applyMode: 'auto',\n      filterExpression: state.filterExpression ?? renderExpression(state.expressionBuilder, state.filters),\n      ...state,\n    });\n\n    if (this.state.applyMode === 'auto') {\n      patchGetAdhocFilters(this);\n    }\n  }\n\n  public setState(update: Partial<AdHocFiltersVariableState>): void {\n    let filterExpressionChanged = false;\n\n    if (update.filters && update.filters !== this.state.filters && !update.filterExpression) {\n      update.filterExpression = renderExpression(this.state.expressionBuilder, update.filters);\n      filterExpressionChanged = update.filterExpression !== this.state.filterExpression;\n    }\n\n    super.setState(update);\n\n    if (filterExpressionChanged) {\n      this.publishEvent(new SceneVariableValueChangedEvent(this), true);\n    }\n  }\n\n  public getValue(): VariableValue | undefined {\n    return this.state.filterExpression;\n  }\n\n  public _updateFilter(filter: AdHocFilterWithLabels, update: Partial<AdHocFilterWithLabels>) {\n    const { filters, _wip } = this.state;\n\n    if (filter === _wip) {\n      // If we set value we are done with this \"work in progress\" filter and we can add it\n      if ('value' in update && update['value'] !== '') {\n        this.setState({ filters: [...filters, { ..._wip, ...update }], _wip: undefined });\n      } else {\n        this.setState({ _wip: { ...filter, ...update } });\n      }\n      return;\n    }\n\n    const updatedFilters = this.state.filters.map((f) => {\n      return f === filter ? { ...f, ...update } : f;\n    });\n\n    this.setState({ filters: updatedFilters });\n  }\n\n  public _removeFilter(filter: AdHocFilterWithLabels) {\n    if (filter === this.state._wip) {\n      this.setState({ _wip: undefined });\n      return;\n    }\n\n    this.setState({ filters: this.state.filters.filter((f) => f !== filter) });\n  }\n\n  public _removeLastFilter() {\n    const filterToRemove = this.state.filters.at(-1);\n\n    if (filterToRemove) {\n      this._removeFilter(filterToRemove);\n    }\n  }\n\n  /**\n   * Get possible keys given current filters. Do not call from plugins directly\n   */\n  public async _getKeys(currentKey: string | null): Promise<Array<SelectableValue<string>>> {\n    const override = await this.state.getTagKeysProvider?.(this, currentKey);\n\n    if (override && override.replace) {\n      return dataFromResponse(override.values).map(toSelectableValue);\n    }\n\n    if (this.state.defaultKeys) {\n      return this.state.defaultKeys.map(toSelectableValue);\n    }\n\n    const ds = await this._dataSourceSrv.get(this.state.datasource, this._scopedVars);\n    if (!ds || !ds.getTagKeys) {\n      return [];\n    }\n\n    const otherFilters = this.state.filters.filter((f) => f.key !== currentKey).concat(this.state.baseFilters ?? []);\n    const timeRange = sceneGraph.getTimeRange(this).state.value;\n    const queries = this.state.useQueriesAsFilterForOptions ? getQueriesForVariables(this) : undefined;\n    const response = await ds.getTagKeys({\n      filters: otherFilters,\n      queries,\n      timeRange,\n      ...getEnrichedFiltersRequest(this),\n    });\n\n    if (responseHasError(response)) {\n      // @ts-expect-error Remove when 11.1.x is released\n      this.setState({ error: response.error.message });\n    }\n\n    let keys = dataFromResponse(response);\n    if (override) {\n      keys = keys.concat(dataFromResponse(override.values));\n    }\n\n    const tagKeyRegexFilter = this.state.tagKeyRegexFilter;\n    if (tagKeyRegexFilter) {\n      // @ts-expect-error Remove when 11.1.x is released\n      keys = keys.filter((f) => f.text.match(tagKeyRegexFilter));\n    }\n\n    return keys.map(toSelectableValue);\n  }\n\n  /**\n   * Get possible key values for a specific key given current filters. Do not call from plugins directly\n   */\n  public async _getValuesFor(filter: AdHocFilterWithLabels): Promise<Array<SelectableValue<string>>> {\n    const override = await this.state.getTagValuesProvider?.(this, filter);\n\n    if (override && override.replace) {\n      return dataFromResponse(override.values).map(toSelectableValue);\n    }\n\n    const ds = await this._dataSourceSrv.get(this.state.datasource, this._scopedVars);\n\n    if (!ds || !ds.getTagValues) {\n      return [];\n    }\n\n    // Filter out the current filter key from the list of all filters\n    const otherFilters = this.state.filters.filter((f) => f.key !== filter.key).concat(this.state.baseFilters ?? []);\n\n    const timeRange = sceneGraph.getTimeRange(this).state.value;\n    const queries = this.state.useQueriesAsFilterForOptions ? getQueriesForVariables(this) : undefined;\n\n    const response = await ds.getTagValues({\n      key: filter.key,\n      filters: otherFilters,\n      timeRange, // @ts-expect-error TODO: remove this once 11.1.x is released\n      queries,\n      ...getEnrichedFiltersRequest(this),\n    });\n\n    if (responseHasError(response)) {\n      // @ts-expect-error Remove when 11.1.x is released\n      this.setState({ error: response.error.message });\n    }\n\n    let values = dataFromResponse(response);\n    if (override) {\n      values = values.concat(dataFromResponse(override.values));\n    }\n\n    return values.map(toSelectableValue);\n  }\n\n  public _addWip() {\n    this.setState({\n      _wip: { key: '', value: '', operator: '=', condition: '' },\n    });\n  }\n\n  public _getOperators() {\n    const filteredOperators = this.state.supportsMultiValueOperators\n      ? OPERATORS\n      : OPERATORS.filter((operator) => !operator.isMulti);\n    return filteredOperators.map<SelectableValue<string>>(({ value, description }) => ({\n      label: value,\n      value,\n      description,\n    }));\n  }\n}\n\nfunction renderExpression(\n  builder: AdHocVariableExpressionBuilderFn | undefined,\n  filters: AdHocFilterWithLabels[] | undefined\n) {\n  return (builder ?? renderPrometheusLabelFilters)(filters ?? []);\n}\n\nexport function AdHocFiltersVariableRenderer({ model }: SceneComponentProps<AdHocFiltersVariable>) {\n  const { filters, readOnly, addFilterButtonText } = model.useState();\n  const styles = useStyles2(getStyles);\n\n  if (model.state.layout === 'combobox') {\n    return <AdHocFiltersComboboxRenderer model={model} />;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {filters.map((filter, index) => (\n        <React.Fragment key={index}>\n          <AdHocFilterRenderer filter={filter} model={model} />\n        </React.Fragment>\n      ))}\n\n      {!readOnly && <AdHocFilterBuilder model={model} key=\"'builder\" addFilterButtonText={addFilterButtonText} />}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignItems: 'flex-end',\n    columnGap: theme.spacing(2),\n    rowGap: theme.spacing(1),\n  }),\n});\n\nexport function toSelectableValue(input: MetricFindValue): SelectableValue<string> {\n  const { text, value } = input;\n  const result: SelectableValue<string> = {\n    label: text,\n    value: String(value ?? text),\n  };\n\n  if ('group' in input) {\n    result.group = input.group;\n  }\n\n  return result;\n}\n\nexport function isFilterComplete(filter: AdHocFilterWithLabels): boolean {\n  return filter.key !== '' && filter.operator !== '' && filter.value !== '';\n}\n\nexport function isMultiValueOperator(operatorValue: string): boolean {\n  const operator = OPERATORS.find((o) => o.value === operatorValue);\n  if (!operator) {\n    // default to false if operator is not found\n    return false;\n  }\n  return Boolean(operator.isMulti);\n}\n","import { filter, finalize, map, merge, mergeAll } from 'rxjs';\nimport { CancelActivationHandler, SceneDataLayerProvider, SceneDataProviderResult } from '../core/types';\n\nexport class DataLayersMerger {\n  private _resultsMap: Map<string, SceneDataProviderResult> = new Map();\n  private _prevLayers: SceneDataLayerProvider[] = [];\n\n  public getMergedStream(layers: SceneDataLayerProvider[]) {\n    if (areDifferentLayers(layers, this._prevLayers)) {\n      this._resultsMap = new Map();\n      this._prevLayers = layers;\n    }\n\n    const resultStreams = layers.map((l) => l.getResultsStream());\n    const deactivationHandlers: CancelActivationHandler[] = [];\n\n    for (const layer of layers) {\n      deactivationHandlers.push(layer.activate());\n    }\n\n    return merge(resultStreams).pipe(\n      mergeAll(),\n      filter((v) => {\n        return this._resultsMap.get(v.origin.state.key!) !== v;\n      }),\n      map((v) => {\n        // Is there a better, rxjs only way to combine multiple same-data-topic observables?\n        // Indexing by origin state key is to make sure we do not duplicate/overwrite data from the different origins\n        this._resultsMap.set(v.origin.state.key!, v);\n        return this._resultsMap.values();\n      }),\n      finalize(() => {\n        deactivationHandlers.forEach((handler) => handler());\n      })\n    );\n  }\n}\n\nfunction areDifferentLayers(a: SceneDataLayerProvider[], b: SceneDataLayerProvider[]) {\n  if (a.length !== b.length) {\n    return true;\n  }\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","import { cloneDeep, isEqual } from 'lodash';\nimport { forkJoin, ReplaySubject, Unsubscribable } from 'rxjs';\n\nimport { DataQuery, DataSourceRef, LoadingState } from '@grafana/schema';\n\nimport {\n  AlertStateInfo,\n  DataFrame,\n  DataFrameView,\n  DataQueryRequest,\n  DataSourceApi,\n  DataTopic,\n  PanelData,\n  preProcessPanelData,\n  rangeUtil,\n} from '@grafana/data';\n\n// TODO: Remove this ignore annotation when the grafana runtime dependency has been updated\n// @ts-ignore\nimport { getRunRequest, toDataQueryError, isExpressionReference, config } from '@grafana/runtime';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { sceneGraph } from '../core/sceneGraph';\nimport {\n  DataLayerFilter,\n  SceneDataProvider,\n  SceneDataProviderResult,\n  SceneDataQuery,\n  SceneObjectState,\n  SceneTimeRangeLike,\n} from '../core/types';\nimport { getDataSource } from '../utils/getDataSource';\nimport { VariableDependencyConfig } from '../variables/VariableDependencyConfig';\nimport { writeSceneLog } from '../utils/writeSceneLog';\nimport { VariableValueRecorder } from '../variables/VariableValueRecorder';\nimport { emptyPanelData } from '../core/SceneDataNode';\nimport { getClosest } from '../core/sceneGraph/utils';\nimport { isExtraQueryProvider, ExtraQueryDataProcessor, ExtraQueryProvider } from './ExtraQueryProvider';\nimport { passthroughProcessor, extraQueryProcessingOperator } from './extraQueryProcessingOperator';\nimport { filterAnnotations } from './layers/annotations/filterAnnotations';\nimport { getEnrichedDataRequest } from './getEnrichedDataRequest';\nimport { findActiveAdHocFilterVariableByUid } from '../variables/adhoc/patchGetAdhocFilters';\nimport { registerQueryWithController } from './registerQueryWithController';\nimport { findActiveGroupByVariablesByUid } from '../variables/groupby/findActiveGroupByVariablesByUid';\nimport { GroupByVariable } from '../variables/groupby/GroupByVariable';\nimport { AdHocFiltersVariable, isFilterComplete } from '../variables/adhoc/AdHocFiltersVariable';\nimport { SceneVariable } from '../variables/types';\nimport { DataLayersMerger } from './DataLayersMerger';\nimport { interpolate } from '../core/sceneGraph/sceneGraph';\nimport { wrapInSafeSerializableSceneObject } from '../utils/wrapInSafeSerializableSceneObject';\n\nlet counter = 100;\n\nexport function getNextRequestId() {\n  return 'SQR' + counter++;\n}\n\nexport interface QueryRunnerState extends SceneObjectState {\n  data?: PanelData;\n  queries: SceneDataQuery[];\n  datasource?: DataSourceRef;\n  minInterval?: string;\n  maxDataPoints?: number;\n  liveStreaming?: boolean;\n  maxDataPointsFromWidth?: boolean;\n  cacheTimeout?: DataQueryRequest['cacheTimeout'];\n  queryCachingTTL?: DataQueryRequest['queryCachingTTL'];\n  /**\n   * When set to auto (the default) query runner will issue queries on activate (when variable dependencies are ready) or when time range change.\n   * Set to manual to have full manual control over when queries are issued. Try not to set this. This is mainly useful for unit tests, or special edge case workflows.\n   */\n  runQueriesMode?: 'auto' | 'manual';\n  // Filters to be applied to data layer results before combining them with SQR results\n  dataLayerFilter?: DataLayerFilter;\n  // Private runtime state\n  _hasFetchedData?: boolean;\n}\n\nexport interface DataQueryExtended extends DataQuery {\n  [key: string]: any;\n\n  // Opt this query out of time window comparison\n  timeRangeCompare?: boolean;\n}\n\n// The requests that will be run by the query runner.\n//\n// Generally the query runner will run a single primary request.\n// If the scene graph contains implementations of\n// `ExtraQueryProvider`, the requests created by these\n// implementations will be added to the list of secondary requests,\n// and these will be executed at the same time as the primary request.\n//\n// The results of each secondary request will be passed to an associated\n// processor function (along with the results of the primary request),\n// which can transform the results as desired.\ninterface PreparedRequests {\n  // The primary request to run.\n  primary: DataQueryRequest;\n  // A possibly empty list of secondary requests to run alongside\n  // the primary request.\n  secondaries: DataQueryRequest[];\n  // A map from `requestId` of secondary requests to processors\n  // for those requests. Provided by the `ExtraQueryProvider`.\n  processors: Map<string, ExtraQueryDataProcessor>;\n}\n\nexport class SceneQueryRunner extends SceneObjectBase<QueryRunnerState> implements SceneDataProvider {\n  private _querySub?: Unsubscribable;\n  private _dataLayersSub?: Unsubscribable;\n  private _dataLayersMerger = new DataLayersMerger();\n  private _timeSub?: Unsubscribable;\n  private _timeSubRange?: SceneTimeRangeLike;\n  private _containerWidth?: number;\n  private _variableValueRecorder = new VariableValueRecorder();\n  private _results = new ReplaySubject<SceneDataProviderResult>(1);\n  private _scopedVars = { __sceneObject: wrapInSafeSerializableSceneObject(this) };\n  private _layerAnnotations?: DataFrame[];\n  private _resultAnnotations?: DataFrame[];\n\n  private _adhocFiltersVar?: AdHocFiltersVariable;\n  private _groupByVar?: GroupByVariable;\n\n  public getResultsStream() {\n    return this._results;\n  }\n\n  protected _variableDependency: VariableDependencyConfig<QueryRunnerState> = new VariableDependencyConfig(this, {\n    statePaths: ['queries', 'datasource'],\n    onVariableUpdateCompleted: this.onVariableUpdatesCompleted.bind(this),\n    onAnyVariableChanged: this.onAnyVariableChanged.bind(this),\n  });\n\n  public constructor(initialState: QueryRunnerState) {\n    super(initialState);\n\n    this.addActivationHandler(() => this._onActivate());\n  }\n\n  private _onActivate() {\n    if (this.isQueryModeAuto()) {\n      const timeRange = sceneGraph.getTimeRange(this);\n\n      // Add subscriptions to any extra providers so that they rerun queries\n      // when their state changes and they should rerun.\n      const providers = this.getClosestExtraQueryProviders();\n      for (const provider of providers) {\n        this._subs.add(\n          provider.subscribeToState((n, p) => {\n            if (provider.shouldRerun(p, n, this.state.queries)) {\n              this.runQueries();\n            }\n          }),\n        );\n      }\n\n      this.subscribeToTimeRangeChanges(\n        timeRange,\n      );\n\n      if (this.shouldRunQueriesOnActivate()) {\n        this.runQueries();\n      }\n    }\n\n    if (!this._dataLayersSub) {\n      this._handleDataLayers();\n    }\n\n    return () => this._onDeactivate();\n  }\n\n  // This method subscribes to all SceneDataLayers up until the root, and combines the results into data provided from SceneQueryRunner\n  private _handleDataLayers() {\n    const dataLayers = sceneGraph.getDataLayers(this);\n\n    if (dataLayers.length === 0) {\n      return;\n    }\n\n    this._dataLayersSub = this._dataLayersMerger\n      .getMergedStream(dataLayers)\n      .subscribe(this._onLayersReceived.bind(this));\n  }\n\n  private _onLayersReceived(results: Iterable<SceneDataProviderResult>) {\n    const timeRange = sceneGraph.getTimeRange(this);\n    const { dataLayerFilter } = this.state;\n\n    let annotations: DataFrame[] = [];\n    let alertStates: DataFrame[] = [];\n    let alertState: AlertStateInfo | undefined;\n\n    for (const result of results) {\n      for (let frame of result.data.series) {\n        if (frame.meta?.dataTopic === DataTopic.Annotations) {\n          annotations = annotations.concat(frame);\n        }\n        if (frame.meta?.dataTopic === DataTopic.AlertStates) {\n          alertStates = alertStates.concat(frame);\n        }\n      }\n    }\n\n    if (dataLayerFilter?.panelId) {\n      if (annotations.length > 0) {\n        annotations = filterAnnotations(annotations, dataLayerFilter);\n      }\n\n      if (alertStates.length > 0) {\n        for (const frame of alertStates) {\n          const frameView = new DataFrameView<AlertStateInfo>(frame);\n\n          for (const row of frameView) {\n            if (row.panelId === dataLayerFilter.panelId) {\n              alertState = row;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    // Skip unnessary state updates\n    if (\n      allFramesEmpty(annotations) &&\n      allFramesEmpty(this._layerAnnotations) &&\n      isEqual(alertState, this.state.data?.alertState)\n    ) {\n      return;\n    }\n\n    this._layerAnnotations = annotations;\n\n    const baseStateUpdate = this.state.data ? this.state.data : { ...emptyPanelData, timeRange: timeRange.state.value };\n\n    this.setState({\n      data: {\n        ...baseStateUpdate,\n        annotations: [...(this._resultAnnotations ?? []), ...annotations],\n        alertState: alertState ?? this.state.data?.alertState,\n      },\n    });\n  }\n\n  /**\n   * This tries to start a new query whenever a variable completes or is changed.\n   *\n   * We care about variable update completions even when the variable has not changed and even when it is not a direct dependency.\n   * Example: Variables A and B (B depends on A). A update depends on time range. So when time change query runner will\n   * find that variable A is loading which is a dependency on of variable B so will set _isWaitingForVariables to true and\n   * not issue any query.\n   *\n   * When A completes it's loading (with no value change, so B never updates) it will cause a call of this function letting\n   * the query runner know that A has completed, and in case _isWaitingForVariables we try to run the query. The query will\n   * only run if all variables are in a non loading state so in other scenarios where a query depends on many variables this will\n   * be called many times until all dependencies are in a non loading state.   *\n   */\n  private onVariableUpdatesCompleted() {\n    if(this.isQueryModeAuto()){\n      this.runQueries();\n    }\n  }\n\n  /**\n   * Check if value changed is a adhoc filter o group by variable that did not exist when we issued the last query\n   */\n  private onAnyVariableChanged(variable: SceneVariable) {\n    // If this variable has already been detected this variable as a dependency onVariableUpdatesCompleted above will handle value changes\n    if (this._adhocFiltersVar === variable || this._groupByVar === variable || !this.isQueryModeAuto()) {\n      return;\n    }\n\n    if (variable instanceof AdHocFiltersVariable && this._isRelevantAutoVariable(variable)) {\n      this.runQueries();\n    }\n\n    if (variable instanceof GroupByVariable && this._isRelevantAutoVariable(variable)) {\n      this.runQueries();\n    }\n  }\n\n  private _isRelevantAutoVariable(variable: AdHocFiltersVariable | GroupByVariable) {\n    const datasource = this.state.datasource ?? findFirstDatasource(this.state.queries);\n    return variable.state.applyMode === 'auto' && datasource?.uid === variable.state.datasource?.uid;\n  }\n\n  private shouldRunQueriesOnActivate() {\n    if (this._variableValueRecorder.hasDependenciesChanged(this)) {\n      writeSceneLog(\n        'SceneQueryRunner',\n        'Variable dependency changed while inactive, shouldRunQueriesOnActivate returns true'\n      );\n      return true;\n    }\n\n    // If we don't have any data we should run queries\n    if (!this.state.data) {\n      return true;\n    }\n\n    // If time range is stale / different we should run queries\n    if (this._isDataTimeRangeStale(this.state.data)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private _isDataTimeRangeStale(data: PanelData) {\n    const timeRange = sceneGraph.getTimeRange(this);\n\n    const stateTimeRange = timeRange.state.value;\n    const dataTimeRange = data.timeRange;\n\n    if (\n      stateTimeRange.from.unix() === dataTimeRange.from.unix() &&\n      stateTimeRange.to.unix() === dataTimeRange.to.unix()\n    ) {\n      return false;\n    }\n    writeSceneLog('SceneQueryRunner', 'Data time range is stale');\n    return true;\n  }\n\n  private _onDeactivate(): void {\n    if (this._querySub) {\n      this._querySub.unsubscribe();\n      this._querySub = undefined;\n    }\n\n    if (this._dataLayersSub) {\n      this._dataLayersSub.unsubscribe();\n      this._dataLayersSub = undefined;\n    }\n\n    this._timeSub?.unsubscribe();\n    this._timeSub = undefined;\n    this._timeSubRange = undefined;\n    this._adhocFiltersVar = undefined;\n    this._groupByVar = undefined;\n    this._variableValueRecorder.recordCurrentDependencyValuesForSceneObject(this);\n  }\n\n  public setContainerWidth(width: number) {\n    // If we don't have a width we should run queries\n    if (!this._containerWidth && width > 0) {\n      this._containerWidth = width;\n\n      // If we don't have maxDataPoints specifically set and maxDataPointsFromWidth is true\n      if (this.state.maxDataPointsFromWidth && !this.state.maxDataPoints) {\n        // As this is called from render path we need to wait for next tick before running queries\n        setTimeout(() => {\n          if (this.isActive && !this.state._hasFetchedData) {\n            this.runQueries();\n          }\n        }, 0);\n      }\n    } else {\n      // if the updated container width is bigger than 0 let's remember the width until next query issue\n      if (width > 0) {\n        this._containerWidth = width;\n      }\n    }\n  }\n\n  public isDataReadyToDisplay() {\n    return Boolean(this.state._hasFetchedData);\n  }\n\n  private subscribeToTimeRangeChanges(timeRange: SceneTimeRangeLike) {\n    if (this._timeSubRange === timeRange) {\n      // Nothing to do, already subscribed\n      return;\n    }\n\n    if (this._timeSub) {\n      this._timeSub.unsubscribe();\n    }\n\n    this._timeSubRange = timeRange;\n    this._timeSub = timeRange.subscribeToState(() => {\n      this.runWithTimeRange(timeRange);\n    });\n  }\n\n  public runQueries() {\n    const timeRange = sceneGraph.getTimeRange(this);\n    if(this.isQueryModeAuto()){\n      this.subscribeToTimeRangeChanges(timeRange);\n    }\n\n    this.runWithTimeRange(timeRange);\n  }\n\n  private getMaxDataPoints() {\n    if (this.state.maxDataPoints) {\n      return this.state.maxDataPoints;\n    }\n\n    return this.state.maxDataPointsFromWidth ? this._containerWidth ?? 500 : 500;\n  }\n\n  public cancelQuery() {\n    this._querySub?.unsubscribe();\n\n    if (this._dataLayersSub) {\n      this._dataLayersSub.unsubscribe();\n      this._dataLayersSub = undefined;\n    }\n\n    this.setState({\n      data: { ...this.state.data!, state: LoadingState.Done },\n    });\n  }\n\n  private async runWithTimeRange(timeRange: SceneTimeRangeLike) {\n    // If no maxDataPoints specified we might need to wait for container width to be set from the outside\n    if (!this.state.maxDataPoints && this.state.maxDataPointsFromWidth && !this._containerWidth) {\n      return;\n    }\n\n    // If data layers subscription doesn't exist, create one\n    if (!this._dataLayersSub) {\n      this._handleDataLayers();\n    }\n\n    // Cancel any running queries\n    this._querySub?.unsubscribe();\n\n    // Skip executing queries if variable dependency is in loading state\n    if (this._variableDependency.hasDependencyInLoadingState()) {\n      writeSceneLog('SceneQueryRunner', 'Variable dependency is in loading state, skipping query execution');\n      this.setState({ data: { ...(this.state.data ?? emptyPanelData), state: LoadingState.Loading } });\n      return;\n    }\n\n    const { queries } = this.state;\n\n    // Simple path when no queries exist\n    if (!queries?.length) {\n      this._setNoDataState();\n      return;\n    }\n\n    try {\n      const datasource = this.state.datasource ?? findFirstDatasource(queries);\n      const ds = await getDataSource(datasource, this._scopedVars);\n\n      this.findAndSubscribeToAdHocFilters(datasource?.uid);\n\n      const runRequest = getRunRequest();\n      const { primary, secondaries, processors } = this.prepareRequests(timeRange, ds);\n\n      writeSceneLog('SceneQueryRunner', 'Starting runRequest', this.state.key);\n\n      let stream = runRequest(ds, primary);\n\n      if (secondaries.length > 0) {\n        // Submit all secondary requests in parallel.\n        const secondaryStreams = secondaries.map((r) => runRequest(ds, r));\n        // Create the rxjs operator which will combine the primary and secondary responses\n        // by calling the correct processor functions provided by the\n        // extra request providers.\n        const op = extraQueryProcessingOperator(processors);\n        // Combine the primary and secondary streams into a single stream, and apply the operator.\n        stream = forkJoin([stream, ...secondaryStreams]).pipe(op);\n      }\n\n      stream = stream.pipe(\n        registerQueryWithController({\n          type: 'data',\n          request: primary,\n          origin: this,\n          cancel: () => this.cancelQuery(),\n        })\n      );\n\n      this._querySub = stream.subscribe(this.onDataReceived);\n    } catch (err) {\n      console.error('PanelQueryRunner Error', err);\n\n      this.onDataReceived({\n        ...emptyPanelData,\n        ...this.state.data,\n        state: LoadingState.Error,\n        errors: [toDataQueryError(err)],\n      });\n    }\n  }\n\n  public clone(withState?: Partial<QueryRunnerState>) {\n    const clone = super.clone(withState);\n\n    if (this._resultAnnotations) {\n      clone['_resultAnnotations'] = this._resultAnnotations.map((frame) => ({ ...frame }));\n    }\n\n    if (this._layerAnnotations) {\n      clone['_layerAnnotations'] = this._layerAnnotations.map((frame) => ({ ...frame }));\n    }\n\n    clone['_variableValueRecorder'] = this._variableValueRecorder.cloneAndRecordCurrentValuesForSceneObject(this);\n    clone['_containerWidth'] = this._containerWidth;\n    clone['_results'].next({ origin: this, data: this.state.data ?? emptyPanelData });\n\n    return clone;\n  }\n\n  private prepareRequests(timeRange: SceneTimeRangeLike, ds: DataSourceApi): PreparedRequests {\n    const { minInterval, queries } = this.state;\n\n    let request: DataQueryRequest<DataQueryExtended> = {\n      app: 'scenes',\n      requestId: getNextRequestId(),\n      timezone: timeRange.getTimeZone(),\n      range: timeRange.state.value,\n      interval: '1s',\n      intervalMs: 1000,\n      targets: cloneDeep(queries),\n      maxDataPoints: this.getMaxDataPoints(),\n      scopedVars: this._scopedVars,\n      startTime: Date.now(),\n      liveStreaming: this.state.liveStreaming,\n      rangeRaw: {\n        from: timeRange.state.from,\n        to: timeRange.state.to,\n      },\n      cacheTimeout: this.state.cacheTimeout,\n      queryCachingTTL: this.state.queryCachingTTL,\n      // This asks the scene root to provide context properties like app, panel and dashboardUID\n      ...getEnrichedDataRequest(this),\n    };\n\n    if (this._adhocFiltersVar) {\n      // only pass filters that have both key and value\n      // @ts-ignore (Temporary ignore until we update @grafana/data)\n      request.filters = this._adhocFiltersVar.state.filters.filter(isFilterComplete);\n    }\n\n    if (this._groupByVar) {\n      // @ts-ignore (Temporary ignore until we update @grafana/data)\n      request.groupByKeys = this._groupByVar.state.value;\n    }\n\n    request.targets = request.targets.map((query) => {\n      if (\n        !query.datasource ||\n        (query.datasource.uid !== ds.uid &&\n          !ds.meta?.mixed &&\n          isExpressionReference /* TODO: Remove this check when isExpressionReference is properly exported from grafan runtime */ &&\n          !isExpressionReference(query.datasource))\n      ) {\n        query.datasource = ds.getRef();\n      }\n      return query;\n    });\n\n    const lowerIntervalLimit = minInterval ? interpolate(this, minInterval) : ds.interval;\n    const norm = rangeUtil.calculateInterval(timeRange.state.value, request.maxDataPoints!, lowerIntervalLimit);\n\n    // make shallow copy of scoped vars,\n    // and add built in variables interval and interval_ms\n    request.scopedVars = Object.assign({}, request.scopedVars, {\n      __interval: { text: norm.interval, value: norm.interval },\n      __interval_ms: { text: norm.intervalMs.toString(), value: norm.intervalMs },\n    });\n\n    request.interval = norm.interval;\n    request.intervalMs = norm.intervalMs;\n\n    // If there are any extra request providers, we need to add a new request for each\n    // and map the request's ID to the processor function given by the provider, to ensure that\n    // the processor is called with the correct response data.\n    const primaryTimeRange = timeRange.state.value;\n    let secondaryRequests: DataQueryRequest[] = [];\n    let secondaryProcessors = new Map();\n    for (const provider of this.getClosestExtraQueryProviders() ?? []) {\n      for (const { req, processor } of provider.getExtraQueries(request)) {\n        const requestId = getNextRequestId();\n        secondaryRequests.push({ ...req, requestId });\n        secondaryProcessors.set(requestId, processor ?? passthroughProcessor);\n      }\n    }\n    request.range = primaryTimeRange;\n    return { primary: request, secondaries: secondaryRequests, processors: secondaryProcessors };\n  }\n\n  private onDataReceived = (data: PanelData) => {\n    // Will combine annotations from SQR queries (frames with meta.dataTopic === DataTopic.Annotations)\n    const preProcessedData = preProcessPanelData(data, this.state.data);\n\n    // Save query annotations\n    this._resultAnnotations = data.annotations;\n\n    // Will combine annotations & alert state from data layer providers\n    const dataWithLayersApplied = this._combineDataLayers(preProcessedData);\n\n    let hasFetchedData = this.state._hasFetchedData;\n\n    if (!hasFetchedData && preProcessedData.state !== LoadingState.Loading) {\n      hasFetchedData = true;\n    }\n\n    this.setState({ data: dataWithLayersApplied, _hasFetchedData: hasFetchedData });\n    this._results.next({ origin: this, data: dataWithLayersApplied });\n  };\n\n  private _combineDataLayers(data: PanelData) {\n    if (this._layerAnnotations && this._layerAnnotations.length > 0) {\n      data.annotations = (data.annotations || []).concat(this._layerAnnotations);\n    }\n\n    if (this.state.data && this.state.data.alertState) {\n      data.alertState = this.state.data.alertState;\n    }\n\n    return data;\n  }\n\n  private _setNoDataState() {\n    if (this.state.data !== emptyPanelData) {\n      this.setState({ data: emptyPanelData });\n    }\n  }\n\n  /**\n   * Walk up the scene graph and find any ExtraQueryProviders.\n   *\n   * This will return an array of the closest provider of each type.\n   */\n  private getClosestExtraQueryProviders(): Array<ExtraQueryProvider<any>> {\n    // Maintain a map from provider constructor to provider object. The constructor\n    // is used as a unique key for each class, to ensure we have no more than one\n    // type of each type of provider.\n    const found = new Map();\n    if (!this.parent) {\n      return [];\n    }\n    getClosest(this.parent, (s) => {\n      if (isExtraQueryProvider(s) && !found.has(s.constructor)) {\n        found.set(s.constructor, s);\n      }\n      s.forEachChild((child) => {\n        if (isExtraQueryProvider(child) && !found.has(child.constructor)) {\n          found.set(child.constructor, child);\n        }\n      });\n      // Always return null so that the search continues to the top of\n      // the scene graph.\n      return null;\n    });\n    return Array.from(found.values());\n  }\n\n  /**\n   * Walk up scene graph and find the closest filterset with matching data source\n   */\n  private findAndSubscribeToAdHocFilters(uid: string | undefined) {\n    const filtersVar = findActiveAdHocFilterVariableByUid(uid);\n\n    if (this._adhocFiltersVar !== filtersVar) {\n      this._adhocFiltersVar = filtersVar;\n      this._updateExplicitVariableDependencies();\n    }\n\n    const groupByVar = findActiveGroupByVariablesByUid(uid);\n    if (this._groupByVar !== groupByVar) {\n      this._groupByVar = groupByVar;\n      this._updateExplicitVariableDependencies();\n    }\n  }\n\n  private _updateExplicitVariableDependencies() {\n    const explicitDependencies: string[] = [];\n\n    if (this._adhocFiltersVar) {\n      explicitDependencies.push(this._adhocFiltersVar.state.name);\n    }\n\n    if (this._groupByVar) {\n      explicitDependencies.push(this._groupByVar.state.name);\n    }\n\n    this._variableDependency.setVariableNames(explicitDependencies);\n  }\n\n  private isQueryModeAuto(): boolean {\n    return (this.state.runQueriesMode ?? 'auto') === 'auto'\n  }\n}\n\nexport function findFirstDatasource(targets: DataQuery[]): DataSourceRef | undefined {\n  return targets.find((t) => t.datasource !== null)?.datasource ?? undefined;\n}\n\nfunction allFramesEmpty(frames?: DataFrame[]) {\n  if (!frames) {\n    return true;\n  }\n\n  for (let i = 0; i < frames.length; i++) {\n    if (frames[i].length > 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { isEqual } from 'lodash';\nimport { VariableValue } from './types';\n// @ts-expect-error Remove when 11.1.x is released\nimport { AdHocVariableFilter, DataQueryError, GetTagResponse, MetricFindValue, SelectableValue } from '@grafana/data';\nimport { sceneGraph } from '../core/sceneGraph';\nimport { SceneDataQuery, SceneObject, SceneObjectState } from '../core/types';\nimport { SceneQueryRunner } from '../querying/SceneQueryRunner';\nimport { DataSourceRef } from '@grafana/schema';\n\nexport function isVariableValueEqual(a: VariableValue | null | undefined, b: VariableValue | null | undefined) {\n  if (a === b) {\n    return true;\n  }\n\n  return isEqual(a, b);\n}\n\nexport function safeStringifyValue(value: unknown) {\n  // Avoid circular references ignoring those references\n  const getCircularReplacer = () => {\n    const seen = new WeakSet();\n    return (_: string, value: object | null) => {\n      if (typeof value === 'object' && value !== null) {\n        if (seen.has(value)) {\n          return;\n        }\n        seen.add(value);\n      }\n      return value;\n    };\n  };\n\n  try {\n    return JSON.stringify(value, getCircularReplacer());\n  } catch (error) {\n    console.error(error);\n  }\n\n  return '';\n}\n\nexport function renderPrometheusLabelFilters(filters: AdHocVariableFilter[]) {\n  return filters.map((filter) => renderFilter(filter)).join(',');\n}\n\nfunction renderFilter(filter: AdHocVariableFilter) {\n  let value = '';\n  let operator = filter.operator;\n\n  // map \"one of\" operator to regex\n  if (operator === '=|') {\n    operator = '=~'\n    // TODO remove when we're on the latest version of @grafana/data\n    // @ts-expect-error\n    value = filter.values?.map(escapeLabelValueInRegexSelector).join('|');\n  } else if (operator === '!=|') {\n    operator = '!~'\n    // TODO remove when we're on the latest version of @grafana/data\n    // @ts-expect-error\n    value = filter.values?.map(escapeLabelValueInRegexSelector).join('|');\n  } else if (operator === '=~' || operator === '!~') {\n    value = escapeLabelValueInRegexSelector(filter.value);\n  } else {\n    value = escapeLabelValueInExactSelector(filter.value);\n  }\n\n  return `${filter.key}${operator}\"${value}\"`;\n}\n\n// based on the openmetrics-documentation, the 3 symbols we have to handle are:\n// - \\n ... the newline character\n// - \\  ... the backslash character\n// - \"  ... the double-quote character\nexport function escapeLabelValueInExactSelector(labelValue: string): string {\n  return labelValue.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n').replace(/\"/g, '\\\\\"');\n}\n\nexport function escapeLabelValueInRegexSelector(labelValue: string): string {\n  return escapeLabelValueInExactSelector(escapeLokiRegexp(labelValue));\n}\n\nexport function isRegexSelector(selector?: string) {\n  if (selector && (selector.includes('=~') || selector.includes('!~'))) {\n    return true;\n  }\n  return false;\n}\n\n// Loki regular-expressions use the RE2 syntax (https://github.com/google/re2/wiki/Syntax),\n// so every character that matches something in that list has to be escaped.\n// the list of meta characters is: *+?()|\\.[]{}^$\n// we make a javascript regular expression that matches those characters:\nconst RE2_METACHARACTERS = /[*+?()|\\\\.\\[\\]{}^$]/g;\nfunction escapeLokiRegexp(value: string): string {\n  return value.replace(RE2_METACHARACTERS, '\\\\$&');\n}\n\n/**\n * Get all queries in the scene that have the same datasource as provided source object\n */\nexport function getQueriesForVariables(\n  sourceObject: SceneObject<SceneObjectState & { datasource: DataSourceRef | null }>\n) {\n  const runners = sceneGraph.findAllObjects(\n    sourceObject.getRoot(),\n    (o) => o instanceof SceneQueryRunner\n  ) as SceneQueryRunner[];\n\n  const applicableRunners = filterOutInactiveRunnerDuplicates(runners).filter((r) => {\n    return r.state.datasource?.uid === sourceObject.state.datasource?.uid;\n  });\n\n  if (applicableRunners.length === 0) {\n    return [];\n  }\n\n  const result: SceneDataQuery[] = [];\n  applicableRunners.forEach((r) => {\n    result.push(...r.state.queries);\n  });\n\n  return result;\n}\n\n// Filters out inactive runner duplicates, keeping only the ones that are currently active.\n// This is needed for scnearios whan a query runner is cloned and the original is not removed but de-activated.\n// Can happen i.e. when editing a panel in Grafana Core dashboards.\nfunction filterOutInactiveRunnerDuplicates(runners: SceneQueryRunner[]) {\n  // Group items by key\n  const groupedItems: { [key: string]: SceneQueryRunner[] } = {};\n\n  for (const item of runners) {\n    if (item.state.key) {\n      if (!(item.state.key in groupedItems)) {\n        groupedItems[item.state.key] = [];\n      }\n      groupedItems[item.state.key].push(item);\n    }\n  }\n\n  // Filter out inactive items and concatenate active items\n  return Object.values(groupedItems).flatMap((group) => {\n    const activeItems = group.filter((item) => item.isActive);\n    // Keep inactive items if there's only one item with the key\n    if (activeItems.length === 0 && group.length === 1) {\n      return group;\n    }\n    return activeItems;\n  });\n}\n\nexport function escapeUrlPipeDelimiters(value: string | undefined): string {\n  if (value === null || value === undefined) {\n    return '';\n  }\n\n  // Replace the pipe due to using it as a filter separator\n  return (value = /\\|/g[Symbol.replace](value, '__gfp__'));\n}\n\nexport function escapeUrlCommaDelimiters(value: string | undefined): string {\n  if (value === null || value === undefined) {\n    return '';\n  }\n\n  // Replace the comma due to using it as a value/label separator\n  return /,/g[Symbol.replace](value, '__gfc__');\n}\n\nexport function unescapeUrlDelimiters(value: string | undefined): string {\n  if (value === null || value === undefined) {\n    return '';\n  }\n\n  value = /__gfp__/g[Symbol.replace](value, '|');\n  value = /__gfc__/g[Symbol.replace](value, ',');\n\n  return value;\n}\n\nexport function toUrlCommaDelimitedString(key: string, label?: string): string {\n  // Omit for identical key/label or when label is not set at all\n  if (!label || key === label) {\n    return escapeUrlCommaDelimiters(key);\n  }\n\n  return [key, label].map(escapeUrlCommaDelimiters).join(',');\n}\n\nexport function dataFromResponse(response: GetTagResponse | MetricFindValue[]) {\n  return Array.isArray(response) ? response : response.data;\n}\n\nexport function responseHasError(response: GetTagResponse | MetricFindValue[]): response is GetTagResponse & { error: DataQueryError } {\n  return !Array.isArray(response) && Boolean(response.error);\n}\n\n// Collect a flat list of SelectableValues with a `group` property into a hierarchical list with groups\nexport function handleOptionGroups(values: SelectableValue[]): Array<SelectableValue<string>> {\n  const result: Array<SelectableValue<string>> = [];\n  const groupedResults = new Map<string, Array<SelectableValue<string>>>();\n\n  for (const value of values) {\n    const groupLabel = value.group;\n    if (groupLabel) {\n      let group = groupedResults.get(groupLabel);\n\n      if (!group) {\n        group = [];\n        groupedResults.set(groupLabel, group);\n        result.push({ label: groupLabel, options: group });\n      }\n\n      group.push(value);\n    } else {\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n","import { DataLinkBuiltInVars } from '@grafana/data';\nimport { sceneGraph } from '../core/sceneGraph';\nimport { SceneObject, SceneObjectState } from '../core/types';\nimport { writeSceneLog } from '../utils/writeSceneLog';\nimport { VARIABLE_REGEX } from './constants';\n\nimport { SceneVariable, SceneVariableDependencyConfigLike } from './types';\nimport { safeStringifyValue } from './utils';\n\ninterface VariableDependencyConfigOptions<TState extends SceneObjectState> {\n  /**\n   * State paths to scan / extract variable dependencies from. Leave empty to scan all paths.\n   */\n  statePaths?: Array<keyof TState | '*'>;\n\n  /**\n   * Explicit list of variable names to depend on. Leave empty to scan state for dependencies.\n   */\n  variableNames?: string[];\n\n  /**\n   * Optional way to customize how to handle when a dependent variable changes\n   * If not specified the default behavior is to trigger a re-render\n   */\n  onReferencedVariableValueChanged?: (variable: SceneVariable) => void;\n\n  /**\n   * Two scenarios trigger this callback to be called.\n   * 1. When any direct dependency changed value\n   * 2. In case hasDependencyInLoadingState was called and returned true we really care about any variable update. So in this scenario this callback is called\n   *    after any variable update completes. This is to cover scenarios where an object is waiting for indirect dependencies to complete.\n   */\n  onVariableUpdateCompleted?: () => void;\n\n  /**\n   * Optional way to subscribe to all variable value changes, even to variables that are not dependencies.\n   */\n  onAnyVariableChanged?: (variable: SceneVariable) => void;\n}\n\nexport class VariableDependencyConfig<TState extends SceneObjectState> implements SceneVariableDependencyConfigLike {\n  private _state: TState | undefined;\n  private _dependencies = new Set<string>();\n  private _statePaths?: Array<keyof TState | '*'>;\n  private _isWaitingForVariables = false;\n\n  public scanCount = 0;\n\n  public constructor(\n    private _sceneObject: SceneObject<TState>,\n    private _options: VariableDependencyConfigOptions<TState>\n  ) {\n    this._statePaths = _options.statePaths;\n  }\n\n  /**\n   * Used to check for dependency on a specific variable\n   */\n  public hasDependencyOn(name: string): boolean {\n    return this.getNames().has(name);\n  }\n\n  /**\n   * This is called whenever any set of variables have new values. It is up to this implementation to check if it's relevant given the current dependencies.\n   */\n  public variableUpdateCompleted(variable: SceneVariable, hasChanged: boolean) {\n    const deps = this.getNames();\n    let dependencyChanged = false;\n\n    if ((deps.has(variable.state.name) || deps.has(DataLinkBuiltInVars.includeVars)) && hasChanged) {\n      dependencyChanged = true;\n    }\n\n    writeSceneLog(\n      'VariableDependencyConfig',\n      'variableUpdateCompleted',\n      variable.state.name,\n      dependencyChanged,\n      this._isWaitingForVariables\n    );\n\n    if (this._options.onAnyVariableChanged) {\n      this._options.onAnyVariableChanged(variable);\n    }\n\n    // If custom handler called when dependency is changed or when we are waiting for variables\n    if (this._options.onVariableUpdateCompleted && (this._isWaitingForVariables || dependencyChanged)) {\n      this._options.onVariableUpdateCompleted();\n    }\n\n    if (dependencyChanged) {\n      if (this._options.onReferencedVariableValueChanged) {\n        this._options.onReferencedVariableValueChanged(variable);\n      }\n\n      // if no callbacks are specified then just do a forceRender\n      if (!this._options.onReferencedVariableValueChanged && !this._options.onVariableUpdateCompleted) {\n        this._sceneObject.forceRender();\n      }\n    }\n  }\n\n  public hasDependencyInLoadingState() {\n    if (sceneGraph.hasVariableDependencyInLoadingState(this._sceneObject)) {\n      this._isWaitingForVariables = true;\n      return true;\n    }\n\n    this._isWaitingForVariables = false;\n    return false;\n  }\n\n  public getNames(): Set<string> {\n    const prevState = this._state;\n    const newState = (this._state = this._sceneObject.state);\n\n    if (!prevState) {\n      // First time we always scan for dependencies\n      this.scanStateForDependencies(this._state);\n      return this._dependencies;\n    }\n\n    // Second time we only scan if state is a different and if any specific state path has changed\n    if (newState !== prevState) {\n      if (this._statePaths) {\n        for (const path of this._statePaths) {\n          if (path === '*' || newState[path] !== prevState[path]) {\n            this.scanStateForDependencies(newState);\n            break;\n          }\n        }\n      } else {\n        this.scanStateForDependencies(newState);\n      }\n    }\n\n    return this._dependencies;\n  }\n\n  /**\n   * Update variableNames\n   */\n  public setVariableNames(varNames: string[]) {\n    this._options.variableNames = varNames;\n    this.scanStateForDependencies(this._state!);\n  }\n\n  public setPaths(paths: Array<keyof TState | '*'>) {\n    this._statePaths = paths;\n  }\n\n  private scanStateForDependencies(state: TState) {\n    this._dependencies.clear();\n    this.scanCount += 1;\n\n    if (this._options.variableNames) {\n      for (const name of this._options.variableNames) {\n        this._dependencies.add(name);\n      }\n    }\n\n    if (this._statePaths) {\n      for (const path of this._statePaths) {\n        if (path === '*') {\n          this.extractVariablesFrom(state);\n          break;\n        } else {\n          const value = state[path];\n          if (value) {\n            this.extractVariablesFrom(value);\n          }\n        }\n      }\n    }\n  }\n\n  private extractVariablesFrom(value: unknown) {\n    VARIABLE_REGEX.lastIndex = 0;\n\n    const stringToCheck = typeof value !== 'string' ? safeStringifyValue(value) : value;\n\n    const matches = stringToCheck.matchAll(VARIABLE_REGEX);\n    if (!matches) {\n      return;\n    }\n\n    for (const match of matches) {\n      const [, var1, var2, , var3] = match;\n      const variableName = var1 || var2 || var3;\n      this._dependencies.add(variableName);\n    }\n  }\n}\n","import {\n  DataQuery,\n  DataSourceJsonData,\n  DataSourceApi,\n  MetricFindValue,\n  VariableSupportType,\n  StandardVariableQuery,\n  DataQueryRequest,\n  DataQueryResponse,\n  QueryEditorProps,\n} from '@grafana/data';\nimport { TemplateSrv } from '@grafana/runtime';\nimport { ComponentType } from 'react';\n\nimport { Observable } from 'rxjs';\n\n/**\n * Interfaces and guards below are copied from core.\n * Not exposing via grafana/data as these are not intended to be used in context other than variables.\n */\n\ninterface DataSourceWithLegacyVariableSupport<\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n> extends DataSourceApi<TQuery, TOptions> {\n  metricFindQuery(query: any, options?: any): Promise<MetricFindValue[]>;\n  variables: undefined;\n}\n\ninterface DataSourceWithStandardVariableSupport<\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n> extends DataSourceApi<TQuery, TOptions> {\n  variables: {\n    getType(): VariableSupportType;\n    toDataQuery(query: StandardVariableQuery): TQuery;\n    query(request: DataQueryRequest<TQuery>): Observable<DataQueryResponse>;\n  };\n}\n\ninterface DataSourceWithCustomVariableSupport<\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n> extends DataSourceApi<TQuery, TOptions> {\n  variables: {\n    getType(): VariableSupportType;\n    editor: VariableQueryEditorType;\n    query(request: DataQueryRequest<TQuery>): Observable<DataQueryResponse>;\n  };\n}\n\ninterface VariableQueryEditorProps {\n  query: any;\n  onChange: (query: any, definition: string) => void;\n  datasource: any;\n  templateSrv: TemplateSrv;\n}\n\ntype VariableQueryEditorType<\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n> = ComponentType<VariableQueryEditorProps> | ComponentType<QueryEditorProps<any, TQuery, TOptions, any>> | null;\n\nexport const hasLegacyVariableSupport = <\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n>(\n  datasource: DataSourceApi<TQuery, TOptions>\n): datasource is DataSourceWithLegacyVariableSupport<TQuery, TOptions> => {\n  return Boolean(datasource.metricFindQuery) && !Boolean(datasource.variables);\n};\n\nexport const hasStandardVariableSupport = <\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n>(\n  datasource: DataSourceApi<TQuery, TOptions>\n): datasource is DataSourceWithStandardVariableSupport<TQuery, TOptions> => {\n  if (!datasource.variables) {\n    return false;\n  }\n\n  if (datasource.variables.getType() !== VariableSupportType.Standard) {\n    return false;\n  }\n\n  const variableSupport = datasource.variables;\n  return 'toDataQuery' in variableSupport && Boolean(variableSupport.toDataQuery);\n};\n\nexport const hasCustomVariableSupport = <\n  TQuery extends DataQuery = DataQuery,\n  TOptions extends DataSourceJsonData = DataSourceJsonData\n>(\n  datasource: DataSourceApi<TQuery, TOptions>\n): datasource is DataSourceWithCustomVariableSupport<TQuery, TOptions> => {\n  if (!datasource.variables) {\n    return false;\n  }\n\n  if (datasource.variables.getType() !== VariableSupportType.Custom) {\n    return false;\n  }\n\n  const variableSupport = datasource.variables;\n  return (\n    'query' in variableSupport &&\n    'editor' in variableSupport &&\n    Boolean(variableSupport.query) &&\n    Boolean(variableSupport.editor)\n  );\n};\n","import { from, mergeMap, Observable, of } from 'rxjs';\n\nimport {\n  DataQueryRequest,\n  DataSourceApi,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  StandardVariableQuery,\n} from '@grafana/data';\nimport { getRunRequest } from '@grafana/runtime';\n\nimport { hasCustomVariableSupport, hasLegacyVariableSupport, hasStandardVariableSupport } from './guards';\n\nimport { QueryVariable } from './QueryVariable';\nimport { DataQuery } from '@grafana/schema';\n\nexport interface RunnerArgs {\n  searchFilter?: string;\n  variable: QueryVariable;\n}\n\nexport interface QueryRunner {\n  getTarget: (variable: QueryVariable) => DataQuery | string;\n  runRequest: (args: RunnerArgs, request: DataQueryRequest) => Observable<PanelData>;\n}\n\nclass StandardQueryRunner implements QueryRunner {\n  public constructor(private datasource: DataSourceApi, private _runRequest = getRunRequest()) {}\n\n  public getTarget(variable: QueryVariable) {\n    if (hasStandardVariableSupport(this.datasource)) {\n      return this.datasource.variables.toDataQuery(ensureVariableQueryModelIsADataQuery(variable));\n    }\n\n    throw new Error(\"Couldn't create a target with supplied arguments.\");\n  }\n\n  public runRequest(_: RunnerArgs, request: DataQueryRequest) {\n    if (!hasStandardVariableSupport(this.datasource)) {\n      return getEmptyMetricFindValueObservable();\n    }\n\n    if (!this.datasource.variables.query) {\n      return this._runRequest(this.datasource, request);\n    }\n\n    return this._runRequest(this.datasource, request, this.datasource.variables.query.bind(this.datasource.variables));\n  }\n}\n\nclass LegacyQueryRunner implements QueryRunner {\n  public constructor(private datasource: DataSourceApi) {}\n\n  public getTarget(variable: QueryVariable) {\n    if (hasLegacyVariableSupport(this.datasource)) {\n      return variable.state.query;\n    }\n\n    throw new Error(\"Couldn't create a target with supplied arguments.\");\n  }\n\n  public runRequest({ variable, searchFilter }: RunnerArgs, request: DataQueryRequest) {\n    if (!hasLegacyVariableSupport(this.datasource)) {\n      return getEmptyMetricFindValueObservable();\n    }\n\n    return from(\n      this.datasource.metricFindQuery(variable.state.query, {\n        ...request,\n        // variable is used by SQL common data source\n        variable: {\n          name: variable.state.name,\n          type: variable.state.type,\n        },\n        searchFilter,\n      })\n    ).pipe(\n      mergeMap((values) => {\n        if (!values || !values.length) {\n          return getEmptyMetricFindValueObservable();\n        }\n\n        const series: any = values;\n        return of({ series, state: LoadingState.Done, timeRange: request.range });\n      })\n    );\n  }\n}\n\nclass CustomQueryRunner implements QueryRunner {\n  public constructor(private datasource: DataSourceApi, private _runRequest = getRunRequest()) {}\n\n  public getTarget(variable: QueryVariable) {\n    if (hasCustomVariableSupport(this.datasource)) {\n      return variable.state.query;\n    }\n\n    throw new Error(\"Couldn't create a target with supplied arguments.\");\n  }\n\n  public runRequest(_: RunnerArgs, request: DataQueryRequest) {\n    if (!hasCustomVariableSupport(this.datasource)) {\n      return getEmptyMetricFindValueObservable();\n    }\n\n    if (!this.datasource.variables.query) {\n      return this._runRequest(this.datasource, request);\n    }\n    return this._runRequest(this.datasource, request, this.datasource.variables.query.bind(this.datasource.variables));\n  }\n}\n\nfunction getEmptyMetricFindValueObservable(): Observable<PanelData> {\n  return of({ state: LoadingState.Done, series: [], timeRange: getDefaultTimeRange() });\n}\n\nfunction createQueryVariableRunnerFactory(datasource: DataSourceApi): QueryRunner {\n  if (hasStandardVariableSupport(datasource)) {\n    return new StandardQueryRunner(datasource, getRunRequest());\n  }\n\n  if (hasLegacyVariableSupport(datasource)) {\n    return new LegacyQueryRunner(datasource);\n  }\n\n  if (hasCustomVariableSupport(datasource)) {\n    return new CustomQueryRunner(datasource);\n  }\n\n  throw new Error(`Couldn't create a query runner for datasource ${datasource.type}`);\n}\n\nexport let createQueryVariableRunner = createQueryVariableRunnerFactory;\n\n/**\n * Use only in tests\n */\nexport function setCreateQueryVariableRunnerFactory(fn: (datasource: DataSourceApi) => QueryRunner) {\n  createQueryVariableRunner = fn;\n}\n\n/**\n * Fixes old legacy query string models and adds refId if missing\n */\nfunction ensureVariableQueryModelIsADataQuery(variable: QueryVariable): StandardVariableQuery {\n  const query = variable.state.query ?? '';\n\n  // Turn into query object if it's just a string\n  if (typeof query === 'string') {\n    return { query, refId: `variable-${variable.state.name}` };\n  }\n\n  // Add potentially missing refId\n  if (query.refId == null) {\n    return { ...query, refId: `variable-${variable.state.name}` } as StandardVariableQuery;\n  }\n\n  return variable.state.query as StandardVariableQuery;\n}\n","import { isNumber, sortBy, toLower, uniqBy } from 'lodash';\n\nimport { stringToJsRegex, VariableSort } from '@grafana/data';\n\nimport { VariableValueOption } from '../../types';\n\nexport const metricNamesToVariableValues = (variableRegEx: string, sort: VariableSort, metricNames: any[]) => {\n  let regex;\n  let options: VariableValueOption[] = [];\n\n  if (variableRegEx) {\n    regex = stringToJsRegex(variableRegEx);\n  }\n\n  for (let i = 0; i < metricNames.length; i++) {\n    const item = metricNames[i];\n    let text = item.text === undefined || item.text === null ? item.value : item.text;\n    let value = item.value === undefined || item.value === null ? item.text : item.value;\n\n    if (isNumber(value)) {\n      value = value.toString();\n    }\n\n    if (isNumber(text)) {\n      text = text.toString();\n    }\n\n    if (regex) {\n      const matches = getAllMatches(value, regex);\n      if (!matches.length) {\n        continue;\n      }\n\n      const valueGroup = matches.find((m) => m.groups && m.groups.value);\n      const textGroup = matches.find((m) => m.groups && m.groups.text);\n      const firstMatch = matches.find((m) => m.length > 1);\n      const manyMatches = matches.length > 1 && firstMatch;\n\n      if (valueGroup || textGroup) {\n        value = valueGroup?.groups?.value ?? textGroup?.groups?.text;\n        text = textGroup?.groups?.text ?? valueGroup?.groups?.value;\n      } else if (manyMatches) {\n        for (let j = 0; j < matches.length; j++) {\n          const match = matches[j];\n          options.push({ label: match[1], value: match[1] });\n        }\n        continue;\n      } else if (firstMatch) {\n        text = firstMatch[1];\n        value = firstMatch[1];\n      }\n    }\n\n    options.push({ label: text, value: value });\n  }\n\n  options = uniqBy(options, 'value');\n  return sortVariableValues(options, sort);\n};\n\nconst getAllMatches = (str: string, regex: RegExp): RegExpExecArray[] => {\n  const results: RegExpExecArray[] = [];\n  let matches = null;\n\n  regex.lastIndex = 0;\n\n  do {\n    matches = regex.exec(str);\n    if (matches) {\n      results.push(matches);\n    }\n  } while (regex.global && matches && matches[0] !== '' && matches[0] !== undefined);\n\n  return results;\n};\n\nexport const sortVariableValues = (options: any[], sortOrder: VariableSort) => {\n  if (sortOrder === VariableSort.disabled) {\n    return options;\n  }\n\n  // @ts-ignore\n  const sortByNumeric = (opt) => {\n    if (!opt.text) {\n      return -1;\n    }\n    const matches = opt.text.match(/.*?(\\d+).*/);\n    if (!matches || matches.length < 2) {\n      return -1;\n    } else {\n      return parseInt(matches[1], 10);\n    }\n  };\n\n  // @ts-ignore\n  const sortByNaturalSort = (options) => {\n    //@ts-ignore\n    return options.sort((a, b) => {\n      if (!a.text) {\n        return -1;\n      }\n\n      if (!b.text) {\n        return 1;\n      }\n\n      return a.text.localeCompare(b.text, undefined, { numeric: true });\n    });\n  };\n\n  switch (sortOrder) {\n    case VariableSort.alphabeticalAsc:\n      options = sortBy(options, 'label');\n      break;\n    case VariableSort.alphabeticalDesc:\n      options = sortBy(options, 'label').reverse();\n      break;\n    case VariableSort.numericalAsc:\n      options = sortBy(options, sortByNumeric);\n      break;\n    case VariableSort.numericalDesc:\n      options = sortBy(options, sortByNumeric);\n      options = options.reverse();\n      break;\n    case VariableSort.alphabeticalCaseInsensitiveAsc:\n      options = sortBy(options, (opt) => {\n        return toLower(opt.label);\n      });\n      break;\n    case VariableSort.alphabeticalCaseInsensitiveDesc:\n      options = sortBy(options, (opt) => {\n        return toLower(opt.label);\n      });\n      options = options.reverse();\n      break;\n    case VariableSort.naturalAsc || 7:\n      // Sort by natural sort\n      options = sortByNaturalSort(options);\n      break;\n    case VariableSort.naturalDesc || 8:\n      options = sortByNaturalSort(options);\n      options = options.reverse();\n      break;\n    default:\n      break;\n  }\n  return options;\n};\n","import {\n  FieldType,\n  getFieldDisplayName,\n  isDataFrame,\n  MetricFindValue,\n  PanelData,\n  getProcessedDataFrames,\n} from '@grafana/data';\nimport { map, OperatorFunction } from 'rxjs';\n\nexport function toMetricFindValues(): OperatorFunction<PanelData, MetricFindValue[]> {\n  return (source) =>\n    source.pipe(\n      map((panelData) => {\n        const frames = panelData.series;\n        if (!frames || !frames.length) {\n          return [];\n        }\n\n        if (areMetricFindValues(frames)) {\n          return frames;\n        }\n\n        if (frames[0].fields.length === 0) {\n          return [];\n        }\n\n        const processedDataFrames = getProcessedDataFrames(frames);\n        const metrics: MetricFindValue[] = [];\n\n        let valueIndex = -1;\n        let textIndex = -1;\n        let stringIndex = -1;\n        let expandableIndex = -1;\n\n        for (const frame of processedDataFrames) {\n          for (let index = 0; index < frame.fields.length; index++) {\n            const field = frame.fields[index];\n            const fieldName = getFieldDisplayName(field, frame, frames).toLowerCase();\n\n            if (field.type === FieldType.string && stringIndex === -1) {\n              stringIndex = index;\n            }\n\n            if (fieldName === 'text' && field.type === FieldType.string && textIndex === -1) {\n              textIndex = index;\n            }\n\n            if (fieldName === 'value' && field.type === FieldType.string && valueIndex === -1) {\n              valueIndex = index;\n            }\n\n            if (\n              fieldName === 'expandable' &&\n              (field.type === FieldType.boolean || field.type === FieldType.number) &&\n              expandableIndex === -1\n            ) {\n              expandableIndex = index;\n            }\n          }\n        }\n\n        if (stringIndex === -1) {\n          throw new Error(\"Couldn't find any field of type string in the results.\");\n        }\n\n        for (const frame of frames) {\n          for (let index = 0; index < frame.length; index++) {\n            const expandable = expandableIndex !== -1 ? frame.fields[expandableIndex].values.get(index) : undefined;\n            const string = frame.fields[stringIndex].values.get(index);\n            const text = textIndex !== -1 ? frame.fields[textIndex].values.get(index) : null;\n            const value = valueIndex !== -1 ? frame.fields[valueIndex].values.get(index) : null;\n\n            if (valueIndex === -1 && textIndex === -1) {\n              metrics.push({ text: string, value: string, expandable });\n              continue;\n            }\n\n            if (valueIndex === -1 && textIndex !== -1) {\n              metrics.push({ text, value: text, expandable });\n              continue;\n            }\n\n            if (valueIndex !== -1 && textIndex === -1) {\n              metrics.push({ text: value, value, expandable });\n              continue;\n            }\n\n            metrics.push({ text, value, expandable });\n          }\n        }\n\n        return metrics;\n      })\n    );\n}\n\nfunction areMetricFindValues(data: any[]): data is MetricFindValue[] {\n  if (!data) {\n    return false;\n  }\n\n  if (!data.length) {\n    return true;\n  }\n\n  const firstValue: any = data[0];\n\n  if (isDataFrame(firstValue)) {\n    return false;\n  }\n\n  for (const firstValueKey in firstValue) {\n    if (!firstValue.hasOwnProperty(firstValueKey)) {\n      continue;\n    }\n\n    if (\n      firstValue[firstValueKey] !== null &&\n      typeof firstValue[firstValueKey] !== 'string' &&\n      typeof firstValue[firstValueKey] !== 'number'\n    ) {\n      continue;\n    }\n\n    const key = firstValueKey.toLowerCase();\n\n    if (key === 'text' || key === 'value') {\n      return true;\n    }\n  }\n\n  return false;\n}\n","import { Observable, of, filter, take, mergeMap, catchError, throwError, from, lastValueFrom } from 'rxjs';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport {\n  CoreApp,\n  DataQueryRequest,\n  LoadingState,\n  PanelData,\n  ScopedVars,\n  VariableRefresh,\n  VariableSort,\n} from '@grafana/data';\n\nimport { sceneGraph } from '../../../core/sceneGraph';\nimport { SceneComponentProps, SceneDataQuery } from '../../../core/types';\nimport { VariableDependencyConfig } from '../../VariableDependencyConfig';\nimport { renderSelectForVariable } from '../../components/VariableValueSelect';\nimport { VariableValueOption } from '../../types';\nimport { MultiValueVariable, MultiValueVariableState, VariableGetOptionsArgs } from '../MultiValueVariable';\n\nimport { createQueryVariableRunner } from './createQueryVariableRunner';\nimport { metricNamesToVariableValues } from './utils';\nimport { toMetricFindValues } from './toMetricFindValues';\nimport { getDataSource } from '../../../utils/getDataSource';\nimport { safeStringifyValue } from '../../utils';\nimport { DataQuery, DataSourceRef } from '@grafana/schema';\nimport { SEARCH_FILTER_VARIABLE } from '../../constants';\nimport { debounce } from 'lodash';\nimport { registerQueryWithController } from '../../../querying/registerQueryWithController';\nimport { wrapInSafeSerializableSceneObject } from '../../../utils/wrapInSafeSerializableSceneObject';\n\nexport interface QueryVariableState extends MultiValueVariableState {\n  type: 'query';\n  datasource: DataSourceRef | null;\n  query: string | SceneDataQuery;\n  regex: string;\n  refresh: VariableRefresh;\n  sort: VariableSort;\n  /** @internal Only for use inside core dashboards */\n  definition?: string;\n}\n\nexport class QueryVariable extends MultiValueVariable<QueryVariableState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    statePaths: ['regex', 'query', 'datasource'],\n  });\n\n  public constructor(initialState: Partial<QueryVariableState>) {\n    super({\n      type: 'query',\n      name: '',\n      value: '',\n      text: '',\n      options: [],\n      datasource: null,\n      regex: '',\n      query: '',\n      refresh: VariableRefresh.onDashboardLoad,\n      sort: VariableSort.disabled,\n      ...initialState,\n    });\n  }\n\n  public getValueOptions(args: VariableGetOptionsArgs): Observable<VariableValueOption[]> {\n    if (!this.state.query) {\n      return of([]);\n    }\n\n    this.setState({ loading: true, error: null });\n\n    return from(\n      getDataSource(this.state.datasource, {\n        __sceneObject: wrapInSafeSerializableSceneObject(this),\n      })\n    ).pipe(\n      mergeMap((ds) => {\n        const runner = createQueryVariableRunner(ds);\n        const target = runner.getTarget(this);\n        const request = this.getRequest(target, args.searchFilter);\n\n        return runner.runRequest({ variable: this, searchFilter: args.searchFilter }, request).pipe(\n          registerQueryWithController({\n            type: 'variable',\n            request: request,\n            origin: this,\n          }),\n          filter((data) => data.state === LoadingState.Done || data.state === LoadingState.Error), // we only care about done or error for now\n          take(1), // take the first result, using first caused a bug where it in some situations throw an uncaught error because of no results had been received yet\n          mergeMap((data: PanelData) => {\n            if (data.state === LoadingState.Error) {\n              return throwError(() => data.error);\n            }\n            return of(data);\n          }),\n          toMetricFindValues(),\n          mergeMap((values) => {\n            let regex = '';\n            if (this.state.regex) {\n              regex = sceneGraph.interpolate(this, this.state.regex, undefined, 'regex');\n            }\n            return of(metricNamesToVariableValues(regex, this.state.sort, values));\n          }),\n          catchError((error) => {\n            if (error.cancelled) {\n              return of([]);\n            }\n            return throwError(() => error);\n          })\n        );\n      })\n    );\n  }\n\n  private getRequest(target: DataQuery | string, searchFilter?: string) {\n    const scopedVars: ScopedVars = {\n      __sceneObject: wrapInSafeSerializableSceneObject(this),\n    };\n\n    if (searchFilter) {\n      scopedVars.__searchFilter = { value: searchFilter, text: searchFilter };\n    }\n\n    const range = sceneGraph.getTimeRange(this).state.value;\n\n    const request: DataQueryRequest = {\n      app: CoreApp.Dashboard,\n      requestId: uuidv4(),\n      timezone: '',\n      range,\n      interval: '',\n      intervalMs: 0,\n      // @ts-ignore\n      targets: [target],\n      scopedVars,\n      startTime: Date.now(),\n    };\n\n    return request;\n  }\n\n  onSearchChange = (searchFilter: string) => {\n    if (!containsSearchFilter(this.state.query)) {\n      return;\n    }\n\n    this._updateOptionsBasedOnSearchFilter(searchFilter);\n  };\n\n  private _updateOptionsBasedOnSearchFilter = debounce(async (searchFilter: string) => {\n    const result = await lastValueFrom(this.getValueOptions({ searchFilter }));\n    this.setState({ options: result, loading: false });\n  }, 400);\n\n  public static Component = ({ model }: SceneComponentProps<MultiValueVariable>) => {\n    return renderSelectForVariable(model);\n  };\n}\n\nfunction containsSearchFilter(query: string | DataQuery) {\n  const str = safeStringifyValue(query);\n  return str.indexOf(SEARCH_FILTER_VARIABLE) > -1;\n}\n","import { ScopedVars } from '@grafana/data';\nimport { EmptyDataNode, EmptyVariableSet } from '../../variables/interpolation/defaults';\n\nimport { sceneInterpolator } from '../../variables/interpolation/sceneInterpolator';\nimport { VariableCustomFormatterFn, SceneVariables } from '../../variables/types';\n\nimport { isDataLayer, SceneDataLayerProvider, SceneDataProvider, SceneLayout, SceneObject } from '../types';\nimport { lookupVariable } from '../../variables/lookupVariable';\nimport { getClosest } from './utils';\nimport { SceneQueryControllerLike, isQueryController } from '../../behaviors/SceneQueryController';\nimport { VariableInterpolation } from '@grafana/runtime';\nimport { QueryVariable } from '../../variables/variants/query/QueryVariable';\nimport { UrlSyncManagerLike } from '../../services/UrlSyncManager';\n\n/**\n * Get the closest node with variables\n */\nexport function getVariables(sceneObject: SceneObject): SceneVariables {\n  return getClosest(sceneObject, (s) => s.state.$variables) ?? EmptyVariableSet;\n}\n\n/**\n * Will walk up the scene object graph to the closest $data scene object\n */\nexport function getData(sceneObject: SceneObject): SceneDataProvider {\n  return getClosest(sceneObject, (s) => s.state.$data) ?? EmptyDataNode;\n}\n\nfunction isSceneLayout(s: SceneObject): s is SceneLayout {\n  return 'isDraggable' in s;\n}\n\n/**\n * Will walk up the scene object graph to the closest $layout scene object\n */\nexport function getLayout(scene: SceneObject): SceneLayout | null {\n  const parent = getClosest(scene, (s) => (isSceneLayout(s) ? s : undefined));\n  if (parent) {\n    return parent;\n  }\n\n  return null;\n}\n\n/**\n * Interpolates the given string using the current scene object as context.   *\n *\n * Note: the interpolations array will be mutated by adding information about variables that\n * have been interpolated during replacement. Variables that were specified in the target but not found in\n * the list of available variables are also added to the array. See {@link VariableInterpolation} for more details.\n *\n * @param {VariableInterpolation[]} interpolations an optional array that is updated with interpolated variables.\n */\nexport function interpolate(\n  sceneObject: SceneObject,\n  value: string | undefined | null,\n  scopedVars?: ScopedVars,\n  format?: string | VariableCustomFormatterFn,\n  interpolations?: VariableInterpolation[]\n): string {\n  if (value === '' || value == null) {\n    return '';\n  }\n\n  return sceneInterpolator(sceneObject, value, scopedVars, format, interpolations);\n}\n\n/**\n * Checks if the variable is currently loading or waiting to update.\n * It also returns true if a dependency of the variable is loading.\n *\n * For example if C depends on variable B which depends on variable A and A is loading this returns true for variable C and B.\n */\nexport function hasVariableDependencyInLoadingState(sceneObject: SceneObject) {\n  if (!sceneObject.variableDependency) {\n    return false;\n  }\n\n  for (const name of sceneObject.variableDependency.getNames()) {\n    // This is for backwards compability. In the old architecture query variables could reference itself in a query without breaking.\n    if (sceneObject instanceof QueryVariable && sceneObject.state.name === name) {\n      console.warn('Query variable is referencing itself');\n      continue;\n    }\n\n    const variable = lookupVariable(name, sceneObject);\n    if (!variable) {\n      continue;\n    }\n\n    const set = variable.parent as SceneVariables;\n    if (set.isVariableLoadingOrWaitingToUpdate(variable)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction findObjectInternal(\n  scene: SceneObject,\n  check: (obj: SceneObject) => boolean,\n  alreadySearchedChild?: SceneObject,\n  shouldSearchUp?: boolean\n): SceneObject | null {\n  if (check(scene)) {\n    return scene;\n  }\n\n  let found: SceneObject | null = null;\n\n  scene.forEachChild((child) => {\n    if (child === alreadySearchedChild) {\n      return;\n    }\n\n    let maybe = findObjectInternal(child, check);\n    if (maybe) {\n      found = maybe;\n    }\n  });\n\n  if (found) {\n    return found;\n  }\n\n  if (shouldSearchUp && scene.parent) {\n    return findObjectInternal(scene.parent, check, scene, true);\n  }\n\n  return null;\n}\n\n/**\n * Returns a scene object from the scene graph with the requested key.\n *\n * Throws error if no key-matching scene object found.\n */\nexport function findByKey(sceneObject: SceneObject, key: string) {\n  const found = findObject(sceneObject, (sceneToCheck) => {\n    return sceneToCheck.state.key === key;\n  });\n  if (!found) {\n    throw new Error('Unable to find scene with key ' + key);\n  }\n  return found;\n}\n\n/**\n * Returns a scene object from the scene graph with the requested key and type.\n *\n * Throws error if no key-matching scene object found.\n * Throws error if the given type does not match.\n */\nexport function findByKeyAndType<TargetType extends SceneObject>(\n  sceneObject: SceneObject,\n  key: string,\n  targetType: { new (...args: never[]): TargetType }\n) {\n  const found = findObject(sceneObject, (sceneToCheck) => {\n    return sceneToCheck.state.key === key;\n  });\n  if (!found) {\n    throw new Error('Unable to find scene with key ' + key);\n  }\n  if (!(found instanceof targetType)) {\n    throw new Error(`Found scene object with key ${key} does not match type ${targetType.name}`);\n  }\n  return found;\n}\n\n/**\n * This will search the full scene graph, starting with the scene node passed in, then walking up the parent chain. *\n */\nexport function findObject(scene: SceneObject, check: (obj: SceneObject) => boolean): SceneObject | null {\n  return findObjectInternal(scene, check, undefined, true);\n}\n\n/**\n * This will search down the full scene graph, looking for objects that match the provided predicate.\n */\nexport function findAllObjects(scene: SceneObject, check: (obj: SceneObject) => boolean): SceneObject[] {\n  const found: SceneObject[] = [];\n\n  scene.forEachChild((child) => {\n    if (check(child)) {\n      found.push(child);\n    }\n\n    found.push(...findAllObjects(child, check));\n  });\n\n  return found;\n}\n\n/**\n * Will walk up the scene object graph up until the root and collect all SceneDataLayerProvider objects.\n * When localOnly set to true, it will only collect the closest layers.\n */\nexport function getDataLayers(sceneObject: SceneObject, localOnly = false): SceneDataLayerProvider[] {\n  let currentLevel: SceneObject | undefined = sceneObject;\n  let collected: SceneDataLayerProvider[] = [];\n\n  while (currentLevel) {\n    const dataProvider = currentLevel.state.$data;\n    if (!dataProvider) {\n      currentLevel = currentLevel.parent;\n      continue;\n    }\n\n    // Check if data layer exists nested inside another data provider\n    if (isDataLayer(dataProvider)) {\n      collected = collected.concat(dataProvider);\n    } else {\n      if (dataProvider.state.$data && isDataLayer(dataProvider.state.$data)) {\n        collected = collected.concat(dataProvider.state.$data);\n      }\n    }\n\n    if (localOnly && collected.length > 0) {\n      break;\n    }\n\n    currentLevel = currentLevel.parent;\n  }\n\n  return collected;\n}\n\ninterface SceneType<T> extends Function {\n  new (...args: never[]): T;\n}\n\n/**\n * A utility function to find the closest ancestor of a given type. This function expects\n * to find it and will throw an error if it does not.\n */\nexport function getAncestor<ParentType>(\n  sceneObject: SceneObject,\n  ancestorType: SceneType<ParentType>\n): ParentType {\n  let parent: SceneObject | undefined = sceneObject;\n\n  while (parent) {\n    if (parent instanceof ancestorType) {\n      return parent;\n    }\n    parent = parent.parent;\n  }\n\n  if (!parent) {\n    throw new Error('Unable to find parent of type ' + ancestorType.name);\n  }\n\n  return parent as ParentType;\n}\n\n/**\n * This will search down the full scene graph, looking for objects that match the provided descendentType type.\n */\nexport function findDescendents<T extends SceneObject>(scene: SceneObject, descendentType: SceneType<T>) {\n  function isDescendentType(scene: SceneObject): scene is T {\n    return scene instanceof descendentType;\n  }\n\n  const targetScenes = findAllObjects(scene, isDescendentType);\n  return targetScenes.filter(isDescendentType);\n}\n\n/**\n * Returns the closest query controller undefined if none found\n */\nexport function getQueryController(sceneObject: SceneObject): SceneQueryControllerLike | undefined {\n  let parent: SceneObject | undefined = sceneObject;\n\n  while (parent) {\n    if (parent.state.$behaviors) {\n      for (const behavior of parent.state.$behaviors) {\n        if (isQueryController(behavior)) {\n          return behavior;\n        }\n      }\n    }\n    parent = parent.parent;\n  }\n\n  return undefined;\n}\n\n/**\n * Returns the closest SceneObject that has a state property with the\n * name urlSyncManager that is of type UrlSyncManager\n */\nexport function getUrlSyncManager(sceneObject: SceneObject): UrlSyncManagerLike | undefined {\n  let parent: SceneObject | undefined = sceneObject;\n\n  while (parent) {\n    if ('urlSyncManager' in parent.state) {\n      return parent.state.urlSyncManager as UrlSyncManagerLike;\n    }\n    parent = parent.parent;\n  }\n\n  return undefined;\n}\n","import { lookupVariable } from '../../variables/lookupVariable';\nimport { getTimeRange } from './getTimeRange';\nimport {\n  findByKey,\n  findByKeyAndType,\n  findObject,\n  findAllObjects,\n  getData,\n  getLayout,\n  getVariables,\n  getDataLayers,\n  hasVariableDependencyInLoadingState,\n  interpolate,\n  getAncestor,\n  findDescendents,\n  getQueryController,\n  getUrlSyncManager,\n} from './sceneGraph';\n\nexport const sceneGraph = {\n  getVariables,\n  getData,\n  getTimeRange,\n  getLayout,\n  getDataLayers,\n  interpolate,\n  lookupVariable,\n  hasVariableDependencyInLoadingState,\n  findByKey,\n  findByKeyAndType,\n  findObject,\n  findAllObjects,\n  getAncestor,\n  findDescendents,\n  getQueryController,\n  getUrlSyncManager,\n};\n","import { sceneGraph } from '../core/sceneGraph';\nimport { SceneObject } from '../core/types';\n\nexport interface SceneObjectWithDepth {\n  sceneObject: SceneObject;\n  depth: number;\n}\n\nexport class UniqueUrlKeyMapper {\n  private index = new Map<string, SceneObject[]>();\n\n  public getUniqueKey(key: string, obj: SceneObject) {\n    const objectsWithKey = this.index.get(key);\n\n    if (!objectsWithKey) {\n      this.index.set(key, [obj]);\n      return key;\n    }\n\n    let address = objectsWithKey.findIndex((o) => o === obj);\n    if (address === -1) {\n      filterOutOrphanedObjects(objectsWithKey);\n      objectsWithKey.push(obj);\n\n      address = objectsWithKey.length - 1;\n    }\n\n    if (address > 0) {\n      return `${key}-${address + 1}`;\n    }\n\n    return key;\n  }\n\n  public clear() {\n    this.index.clear();\n  }\n}\n\nfunction filterOutOrphanedObjects(sceneObjects: SceneObject[]) {\n  for (const obj of sceneObjects) {\n    if (isOrphanOrInActive(obj)) {\n      const index = sceneObjects.indexOf(obj);\n      sceneObjects.splice(index, 1);\n    }\n  }\n}\n\nfunction isOrphanOrInActive(obj: SceneObject) {\n  const root = obj.getRoot();\n\n  // If we cannot find it from the root it's an orphan\n  if (!sceneGraph.findObject(root, (child) => child === obj)) {\n    return true;\n  }\n\n  return false;\n}\n","import { isEqual } from 'lodash';\n\nimport { SceneObject, SceneObjectUrlValue, SceneObjectUrlValues } from '../core/types';\nimport { UniqueUrlKeyMapper } from './UniqueUrlKeyMapper';\n\n/**\n * @param root\n * @returns the full scene url state as a object with keys and values\n */\nexport function getUrlState(root: SceneObject): SceneObjectUrlValues {\n  const urlKeyMapper = new UniqueUrlKeyMapper();\n  const result: SceneObjectUrlValues = {};\n\n  const visitNode = (obj: SceneObject) => {\n    if (obj.urlSync) {\n      const newUrlState = obj.urlSync.getUrlState();\n\n      for (const [key, value] of Object.entries(newUrlState)) {\n        if (value != null) {\n          const uniqueKey = urlKeyMapper.getUniqueKey(key, obj);\n          result[uniqueKey] = value;\n        }\n      }\n    }\n\n    obj.forEachChild(visitNode);\n  };\n\n  visitNode(root);\n  return result;\n}\n\n/**\n * Exported util function to sync state from an initial url state.\n * Useful for initializing an embedded scenes with a url state string.\n */\nexport function syncStateFromSearchParams(root: SceneObject, urlParams: URLSearchParams) {\n  const urlKeyMapper = new UniqueUrlKeyMapper();\n  syncStateFromUrl(root, urlParams, urlKeyMapper);\n}\n\nexport function syncStateFromUrl(\n  root: SceneObject,\n  urlParams: URLSearchParams,\n  urlKeyMapper: UniqueUrlKeyMapper,\n  onlyChildren?: boolean\n) {\n  if (!onlyChildren) {\n    syncUrlStateToObject(root, urlParams, urlKeyMapper);\n  }\n\n  // These two forEachChild loops might look strange but it's to make sure we walk through the scene graph one level at a time as url key conflicts depend depth in the scene tree\n  root.forEachChild((child) => {\n    syncUrlStateToObject(child, urlParams, urlKeyMapper);\n  });\n\n  root.forEachChild((child) => syncStateFromUrl(child, urlParams, urlKeyMapper, true));\n}\n\nfunction syncUrlStateToObject(sceneObject: SceneObject, urlParams: URLSearchParams, urlKeyMapper: UniqueUrlKeyMapper) {\n  if (sceneObject.urlSync) {\n    const urlState: SceneObjectUrlValues = {};\n    const currentState = sceneObject.urlSync.getUrlState();\n\n    for (const key of sceneObject.urlSync.getKeys()) {\n      const uniqueKey = urlKeyMapper.getUniqueKey(key, sceneObject);\n      const newValue = urlParams.getAll(uniqueKey);\n      const currentValue = currentState[key];\n\n      if (isUrlValueEqual(newValue, currentValue)) {\n        continue;\n      }\n\n      if (newValue.length > 0) {\n        if (Array.isArray(currentValue)) {\n          urlState[key] = newValue;\n        } else {\n          urlState[key] = newValue[0];\n        }\n      } else {\n        // mark this key as having no url state\n        urlState[key] = null;\n      }\n    }\n\n    if (Object.keys(urlState).length > 0) {\n      sceneObject.urlSync.updateFromUrl(urlState);\n    }\n  }\n}\n\nexport function isUrlValueEqual(currentUrlValue: string[], newUrlValue: SceneObjectUrlValue): boolean {\n  if (currentUrlValue.length === 0 && newUrlValue == null) {\n    return true;\n  }\n\n  if (!Array.isArray(newUrlValue) && currentUrlValue?.length === 1) {\n    return newUrlValue === currentUrlValue[0];\n  }\n\n  if (newUrlValue?.length === 0 && currentUrlValue === null) {\n    return true;\n  }\n\n  // We have two arrays, lets compare them\n  return isEqual(currentUrlValue, newUrlValue);\n}\n","import { AdHocFiltersVariable } from '../adhoc/AdHocFiltersVariable';\nimport { SceneVariable } from '../types';\nimport { ConstantVariable } from './ConstantVariable';\nimport { CustomVariable } from './CustomVariable';\nimport { DataSourceVariable } from './DataSourceVariable';\nimport { IntervalVariable } from './IntervalVariable';\nimport { TextBoxVariable } from './TextBoxVariable';\nimport { QueryVariable } from './query/QueryVariable';\nimport { GroupByVariable } from '../groupby/GroupByVariable';\n\nexport function isAdHocVariable(variable: SceneVariable): variable is AdHocFiltersVariable {\n  return variable.state.type === 'adhoc';\n}\n\nexport function isConstantVariable(variable: SceneVariable): variable is ConstantVariable {\n  return variable.state.type === 'constant';\n}\n\nexport function isCustomVariable(variable: SceneVariable): variable is CustomVariable {\n  return variable.state.type === 'custom';\n}\n\nexport function isDataSourceVariable(variable: SceneVariable): variable is DataSourceVariable {\n  return variable.state.type === 'datasource';\n}\n\nexport function isIntervalVariable(variable: SceneVariable): variable is IntervalVariable {\n  return variable.state.type === 'interval';\n}\n\nexport function isQueryVariable(variable: SceneVariable): variable is QueryVariable {\n  return variable.state.type === 'query';\n}\n\nexport function isTextBoxVariable(variable: SceneVariable): variable is TextBoxVariable {\n  return variable.state.type === 'textbox';\n}\n\nexport function isGroupByVariable(variable: SceneVariable): variable is GroupByVariable {\n  return variable.state.type === 'groupby';\n}\n","import { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneObjectState } from '../core/types';\nimport { SceneVariable } from '../variables/types';\nimport { VariableDependencyConfig } from '../variables/VariableDependencyConfig';\n\ninterface ActWhenVariableChangedState extends SceneObjectState {\n  // The name of the variable to subscribe to changes to.\n  variableName: string;\n  /**\n   * The handler to run when a variable changes.\n   * @param variable The variable that changed\n   * @param behavior The behavior instance where this onChange handler added to.\n   *  You can use this to access the parent SceneObject where this behavior exists.\n   *  You can also use this with the sceneGraph util functions to find objects from this scene graph location.\n   * @returns Return a cancellation function if you do anything async like issue a query.\n   */\n  onChange: (variable: SceneVariable, behavior: ActWhenVariableChanged) => (() => void) | void;\n}\n\n/**\n * This behavior will run an effect function when specified variables change\n */\n\nexport class ActWhenVariableChanged extends SceneObjectBase<ActWhenVariableChangedState> {\n  private _runningEffect: null | (() => void) = null;\n\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [this.state.variableName],\n    onReferencedVariableValueChanged: this._onVariableChanged.bind(this),\n  });\n\n  private _onVariableChanged(variable: SceneVariable): void {\n    const effect = this.state.onChange;\n\n    if (this._runningEffect) {\n      this._runningEffect();\n      this._runningEffect = null;\n    }\n\n    const cancellation = effect(variable, this);\n    if (cancellation) {\n      this._runningEffect = cancellation;\n    }\n  }\n}\n","import { BusEvent, BusEventHandler, BusEventType, EventBus, EventFilterOptions } from '@grafana/data';\nimport { DashboardCursorSync } from '@grafana/schema';\nimport { Observable, Unsubscribable } from 'rxjs';\nimport { sceneGraph } from '../core/sceneGraph';\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneObject, SceneObjectState } from '../core/types';\n\ninterface CursorSyncState extends SceneObjectState {\n  sync: DashboardCursorSync;\n}\n\n/**\n * This behavior will provide a cursor sync context within a scene.\n */\n\nexport class CursorSync extends SceneObjectBase<CursorSyncState> {\n  public constructor(state: Partial<CursorSyncState>) {\n    super({\n      ...state,\n      sync: state.sync || DashboardCursorSync.Off,\n    });\n  }\n\n  public getEventsBus = (panel: SceneObject) => {\n    if (!this.parent) {\n      throw new Error('EnableCursorSync cannot be used as a standalone scene object');\n    }\n    // Since EnableCursorSync is a behavior, it is not a parent to any object in the scene graph.\n    // We need to get it's parent in order to provide correct EventBus context to the children.\n    return new PanelContextEventBus(this.parent, panel);\n  };\n\n  public getEventsScope() {\n    if (!this.parent) {\n      throw new Error('EnableCursorSync cannot be used as a standalone scene object');\n    }\n\n    // Since EnableCursorSync is a behavior, it is not a parent to any object in the scene graph.\n    // We need to get it's parent in order to provide correct EventBus context to the children.\n    return this.state.key!;\n  }\n}\n\n// This serves as a shared EventsBus that is shared by children or CursorSync behavior.\nclass PanelContextEventBus implements EventBus {\n  public constructor(private _source: SceneObject, private _eventsOrigin: SceneObject) {}\n\n  public publish<T extends BusEvent>(event: T): void {\n    (event as any).origin = this;\n    this._eventsOrigin.publishEvent(event, true);\n  }\n\n  public getStream<T extends BusEvent>(eventType: BusEventType<T>): Observable<T> {\n    return new Observable<T>((observer) => {\n      const handler = (event: T) => {\n        observer.next(event);\n      };\n\n      const sub = this._source.subscribeToEvent(eventType, handler);\n\n      return () => sub.unsubscribe();\n    });\n  }\n\n  public subscribe<T extends BusEvent>(eventType: BusEventType<T>, handler: BusEventHandler<T>): Unsubscribable {\n    return this.getStream(eventType).pipe().subscribe(handler);\n  }\n\n  public removeAllListeners(): void {}\n\n  public newScopedBus(key: string, filter: EventFilterOptions): EventBus {\n    throw new Error('For internal use only');\n  }\n}\n\nexport function getCursorSyncScope(sceneObject: SceneObject): CursorSync | null {\n  return sceneGraph.findObject(sceneObject, (o) => o instanceof CursorSync) as CursorSync;\n}\n","import React, { RefCallback, useCallback, useMemo } from 'react';\nimport { useMeasure } from 'react-use';\n\n// @ts-ignore\nimport { AlertState, GrafanaTheme2, PanelData, PluginContextProvider, SetPanelAttentionEvent, rangeUtil, RawTimeRange, TimeRange } from '@grafana/data';\n\nimport {getAppEvents, getDataSourceSrv} from '@grafana/runtime';\nimport { PanelChrome, ErrorBoundaryAlert, PanelContextProvider, Tooltip, useStyles2, Icon, Button } from '@grafana/ui';\n\nimport { sceneGraph } from '../../core/sceneGraph';\nimport { isSceneObject, SceneComponentProps, SceneLayout, SceneObject } from '../../core/types';\n\nimport { VizPanel } from './VizPanel';\nimport { css, cx } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport {DataQuery, DataSourceRef} from \"@grafana/schema\";\n\nexport function VizPanelRenderer({ model }: SceneComponentProps<VizPanel>) {\n  const {\n    title,\n    options,\n    fieldConfig,\n    _pluginLoadError,\n    displayMode,\n    hoverHeader,\n    hoverHeaderOffset,\n    menu,\n    headerActions,\n    titleItems,\n    description,\n    _renderCounter = 0,\n  } = model.useState();\n  const [ref, { width, height }] = useMeasure();\n  const appEvents = useMemo(() => getAppEvents(), []);\n\n  const setPanelAttention = useCallback(() => {\n    appEvents.publish(new SetPanelAttentionEvent({ panelId: model.state.key }));\n  }, [model.state.key, appEvents]);\n  const debouncedMouseMove = useMemo(\n    () => debounce(setPanelAttention, 100, { leading: true, trailing: false }),\n    [setPanelAttention]\n  );\n\n  const plugin = model.getPlugin();\n\n  const { dragClass, dragClassCancel } = getDragClasses(model);\n  const dataObject = sceneGraph.getData(model);\n\n  const rawData = dataObject.useState();\n  const dataWithFieldConfig = model.applyFieldConfig(rawData.data!);\n  const sceneTimeRange = sceneGraph.getTimeRange(model);\n  const timeZone = sceneTimeRange.getTimeZone();\n  const timeRange = model.getTimeRange(dataWithFieldConfig);\n\n  // Interpolate title\n  const titleInterpolated = model.interpolate(title, undefined, 'text');\n\n  const alertStateStyles = useStyles2(getAlertStateStyles);\n\n  if (!plugin) {\n    return <div>Loading plugin panel...</div>;\n  }\n\n  if (!plugin.panel) {\n    return <div>Panel plugin has no panel component</div>;\n  }\n\n  const PanelComponent = plugin.panel;\n\n  // If we have a query runner on our level inform it of the container width (used to set auto max data points)\n  if (dataObject && dataObject.setContainerWidth) {\n    dataObject.setContainerWidth(Math.round(width));\n  }\n\n  let titleItemsElement: React.ReactNode[] = [];\n\n  if (titleItems) {\n    if (Array.isArray(titleItems)) {\n      titleItemsElement = titleItemsElement.concat(\n        titleItems.map((titleItem) => {\n          return <titleItem.Component model={titleItem} key={`${titleItem.state.key}`} />;\n        })\n      );\n    } else if (isSceneObject(titleItems)) {\n      titleItemsElement.push(<titleItems.Component model={titleItems} />);\n    } else {\n      titleItemsElement.push(titleItems);\n    }\n  }\n\n  // If we have local time range show that in panel header\n  if (model.state.$timeRange) {\n    titleItemsElement.push(<model.state.$timeRange.Component model={model.state.$timeRange} key={model.state.key} />);\n  }\n\n  if (dataWithFieldConfig.alertState) {\n    titleItemsElement.push(\n      <Tooltip content={dataWithFieldConfig.alertState.state ?? 'unknown'} key={`alert-states-icon-${model.state.key}`}>\n        <PanelChrome.TitleItem\n          className={cx({\n            [alertStateStyles.ok]: dataWithFieldConfig.alertState.state === AlertState.OK,\n            [alertStateStyles.pending]: dataWithFieldConfig.alertState.state === AlertState.Pending,\n            [alertStateStyles.alerting]: dataWithFieldConfig.alertState.state === AlertState.Alerting,\n          })}\n        >\n          <Icon\n            name={dataWithFieldConfig.alertState.state === 'alerting' ? 'heart-break' : 'heart'}\n            className=\"panel-alert-icon\"\n            size=\"md\"\n          />\n        </PanelChrome.TitleItem>\n      </Tooltip>\n    );\n  }\n\n  let panelMenu;\n  if (menu) {\n    panelMenu = <menu.Component model={menu} />;\n  }\n\n  let actionsElement: React.ReactNode | undefined;\n\n  if (headerActions) {\n    if (Array.isArray(headerActions)) {\n      actionsElement = (\n        <>\n          {headerActions.map((action) => {\n            return <action.Component model={action} key={`${action.state.key}`} />;\n          })}\n        </>\n      );\n    } else if (isSceneObject(headerActions)) {\n      actionsElement = <headerActions.Component model={headerActions} />;\n    } else {\n      actionsElement = headerActions;\n    }\n  }\n\n  // Data is always returned. For non-data panels, empty PanelData is returned.\n  const data = dataWithFieldConfig!;\n\n  const isReadyToRender = dataObject.isDataReadyToDisplay ? dataObject.isDataReadyToDisplay() : true;\n\n  const context = model.getPanelContext();\n  const panelId = model.getLegacyPanelId();\n\n  let datasource: DataSourceRef | null | undefined = null\n  if (data.request?.targets?.length??0 > 0) {\n    datasource = data.request?.targets[0].datasource\n  }\n\n  return (\n    <div className={relativeWrapper}>\n      <div ref={ref as RefCallback<HTMLDivElement>} className={absoluteWrapper} data-viz-panel-key={model.state.key}>\n        {width > 0 && height > 0 && (\n          <PanelChrome\n            title={titleInterpolated}\n            description={description?.trim() ? model.getDescription : undefined}\n            loadingState={data.state}\n            statusMessage={getChromeStatusMessage(data, _pluginLoadError)}\n            statusMessageOnClick={model.onStatusMessageClick}\n            width={width}\n            height={height}\n            displayMode={displayMode}\n            hoverHeader={hoverHeader}\n            hoverHeaderOffset={hoverHeaderOffset}\n            titleItems={titleItemsElement}\n            dragClass={dragClass}\n            actions={actionsElement}\n            dragClassCancel={dragClassCancel}\n            padding={plugin.noPadding ? 'none' : 'md'}\n            menu={panelMenu}\n            onCancelQuery={model.onCancelQuery}\n            // @ts-ignore\n            onFocus={setPanelAttention}\n            onMouseEnter={setPanelAttention}\n            onMouseMove={debouncedMouseMove}\n          >\n            {(innerWidth, innerHeight) => (\n              <>\n                {plugin.meta.id === 'timeseries' && (\n                    <Button\n                        style={{top: \"-32px\",right: \"28px\", position: \"absolute\", border: 0, padding: 0}}\n                        variant=\"secondary\"\n                        fill=\"outline\"\n                        type=\"button\"\n                        data-testid=\"send-query-button\"\n                        tooltip={\"Oodle insight\"}\n                        tooltipPlacement=\"top\"\n                        hidden={datasource?.type !== 'prometheus'}\n                        onClick={() => {\n                          const variables = { ...data?.request?.scopedVars };\n                          variables.__interval = {\n                            value: '$__interval',\n                          }\n                          variables.__interval_ms = {\n                            value: '$__interval_ms',\n                          }\n\n                          let timeRange = rangeUtil.convertRawToRange(data.request?.rangeRaw as RawTimeRange)\n                          let rangeDurationMs = timeRange.to.valueOf() - timeRange.from.valueOf()\n\n                          getDataSourceSrv().get(datasource, variables)\n                              .then(ds => {\n                                if (ds.interpolateVariablesInQueries) {\n                                  let targets = ds.interpolateVariablesInQueries(data.request?.targets as DataQuery[], variables);\n                                  sendOodleInsightEvent(\n                                      data.request?.dashboardUID as string,\n                                      \"Insights\",\n                                      model.state.title,\n                                      data.request?.panelId as number,\n                                      targets,\n                                      timeRange,\n                                      rangeDurationMs,\n                                      model.state?.fieldConfig?.defaults?.unit,\n                                  );\n                                } else {\n                                  throw new Error('datasource does not support variable interpolation');\n                                }\n                              })\n                              .catch(_ => {\n                                sendOodleInsightEvent(\n                                    data.request?.dashboardUID as string,\n                                    \"Insights\",\n                                    model.state.title,\n                                    data.request?.panelId as number,\n                                    data.request?.targets as DataQuery[],\n                                    timeRange,\n                                    rangeDurationMs,\n                                    model.state?.fieldConfig?.defaults?.unit,\n                                );\n                              });\n                        }}\n                    >\n                      <img\n                          src=\"https://imagedelivery.net/oP5rEbdkySYwiZY4N9HGRw/d0e74e50-902c-4b3c-90af-cabc367bcb00/public\"\n                          alt=\"Insight icon\"\n                          data-testid=\"insight-icon\"\n                          style={{ height: '25px' }}\n                      />\n                    </Button>\n                )}\n                <ErrorBoundaryAlert dependencies={[plugin, data]}>\n                  <PluginContextProvider meta={plugin.meta}>\n                    <PanelContextProvider value={context}>\n                      {isReadyToRender && (\n                        <PanelComponent\n                          id={panelId}\n                          data={data}\n                          title=\"TEST TITLE\"\n                          timeRange={timeRange}\n                          timeZone={timeZone}\n                          options={options}\n                          fieldConfig={fieldConfig}\n                          transparent={false}\n                          width={innerWidth}\n                          height={innerHeight}\n                          renderCounter={_renderCounter}\n                          replaceVariables={model.interpolate}\n                          onOptionsChange={model.onOptionsChange}\n                          onFieldConfigChange={model.onFieldConfigChange}\n                          onChangeTimeRange={model.onTimeRangeChange}\n                          eventBus={context.eventBus}\n                        />\n                      )}\n                    </PanelContextProvider>\n                  </PluginContextProvider>\n                </ErrorBoundaryAlert>\n              </>\n            )}\n          </PanelChrome>\n        )}\n      </div>\n    </div>\n  );\n}\nconst sendOodleInsightEvent = (\n    dashboardUId: string,\n    dashboardTitle: string,\n    panelTitle: string,\n    panelId: number,\n    expressionData: DataQuery[],\n    dashboardTime: TimeRange,\n    rangeDurationMs: number,\n    unit: string | undefined\n) => {\n  const eventData = {\n    dashboardUId: dashboardUId,\n    dashboardTitle: dashboardTitle,\n    panelTitle: panelTitle,\n    panelId: panelId,\n    expressionData: expressionData,\n    dashboardTime: dashboardTime,\n    rangeDurationMs: rangeDurationMs,\n    unit: unit\n  }\n\n  sendEventToParent({\n    type: 'message',\n    payload: {\n      source: 'oodle-grafana',\n      eventType: 'sendQuery',\n      value: JSON.parse(JSON.stringify(eventData)),\n    },\n  });\n}\n\n// Custom type\ninterface SendDataToParentProps {\n  type: string;\n  payload: {\n    eventType: string;\n    source: string;\n    value: any;\n  };\n}\n\n// Custom function\nfunction sendEventToParent(data: SendDataToParentProps) {\n  window.parent.postMessage(data, '*');\n}\n\nfunction getDragClasses(panel: VizPanel) {\n  const parentLayout = sceneGraph.getLayout(panel);\n  const isDraggable = parentLayout?.isDraggable();\n\n  if (!parentLayout || !isDraggable || itemDraggingDisabled(panel, parentLayout)) {\n    return { dragClass: '', dragClassCancel: '' };\n  }\n\n  return { dragClass: parentLayout.getDragClass?.(), dragClassCancel: parentLayout?.getDragClassCancel?.() };\n}\n\n/**\n * Walks up the parent chain until it hits the layout object, trying to find the closest SceneGridItemLike ancestor.\n * It is not always the direct parent, because the VizPanel can be wrapped in other objects.\n */\nfunction itemDraggingDisabled(item: SceneObject, layout: SceneLayout) {\n  let ancestor = item.parent;\n\n  while (ancestor && ancestor !== layout) {\n    if ('isDraggable' in ancestor.state && ancestor.state.isDraggable === false) {\n      return true;\n    }\n\n    ancestor = ancestor.parent;\n  }\n\n  return false;\n}\n\nfunction getChromeStatusMessage(data: PanelData, pluginLoadingError: string | undefined) {\n  if (pluginLoadingError) {\n    return pluginLoadingError;\n  }\n\n  let message = data.error ? data.error.message : undefined;\n\n  // Handling multiple errors with a single string until we integrate VizPanel with inspector\n  if (data.errors) {\n    message = data.errors.map((e) => e.message).join(', ');\n  }\n  return message;\n}\n\nconst relativeWrapper = css({\n  position: 'relative',\n  width: '100%',\n  height: '100%',\n});\n\n/**\n * Sadly this this absolute wrapper is needed for the panel to adopt smaller sizes.\n * The combo of useMeasure and PanelChrome makes the panel take up the width it get's but that makes it impossible to\n * Then adapt to smaller space (say resizing the browser window or undocking menu).\n */\nconst absoluteWrapper = css({\n  position: 'absolute',\n  width: '100%',\n  height: '100%',\n});\n\nconst getAlertStateStyles = (theme: GrafanaTheme2) => {\n  return {\n    ok: css({\n      color: theme.colors.success.text,\n    }),\n    pending: css({\n      color: theme.colors.warning.text,\n    }),\n    alerting: css({\n      color: theme.colors.error.text,\n    }),\n  };\n};\n","import {\n  ByNamesMatcherMode,\n  ConfigOverrideRule,\n  DataFrame,\n  DynamicConfigValue,\n  FieldConfigSource,\n  FieldMatcherID,\n  fieldMatchers,\n  FieldType,\n  getFieldDisplayName,\n  isSystemOverrideWithRef,\n  SystemConfigOverrideRule,\n} from '@grafana/data';\nimport { SeriesVisibilityChangeMode } from '@grafana/ui';\n\nconst displayOverrideRef = 'hideSeriesFrom';\nconst isHideSeriesOverride = isSystemOverrideWithRef(displayOverrideRef);\n\nexport function seriesVisibilityConfigFactory(\n  label: string,\n  mode: SeriesVisibilityChangeMode,\n  fieldConfig: FieldConfigSource,\n  data: DataFrame[]\n): FieldConfigSource {\n  const { overrides } = fieldConfig;\n\n  const displayName = label;\n  const currentIndex = overrides.findIndex(isHideSeriesOverride);\n\n  if (currentIndex < 0) {\n    if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n      const override = createOverride([displayName, ...getNamesOfHiddenFields(overrides, data)]);\n\n      return {\n        ...fieldConfig,\n        overrides: [...fieldConfig.overrides, override],\n      };\n    }\n\n    const displayNames = getDisplayNames(data, displayName);\n    const override = createOverride(displayNames);\n\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, override],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const [current] = overridesCopy.splice(currentIndex, 1) as SystemConfigOverrideRule[];\n\n  if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n    let existing = getExistingDisplayNames(current);\n    const nameOfHiddenFields = getNamesOfHiddenFields(overridesCopy, data);\n\n    if (nameOfHiddenFields.length > 0) {\n      existing = existing.filter((el) => nameOfHiddenFields.indexOf(el) < 0);\n    }\n\n    if (existing[0] === displayName && existing.length === 1) {\n      return {\n        ...fieldConfig,\n        overrides: overridesCopy,\n      };\n    }\n\n    const override = createOverride([displayName, ...nameOfHiddenFields]);\n\n    return {\n      ...fieldConfig,\n      overrides: [...overridesCopy, override],\n    };\n  }\n\n  const override = createExtendedOverride(current, displayName);\n\n  if (allFieldsAreExcluded(override, data)) {\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  return {\n    ...fieldConfig,\n    overrides: [...overridesCopy, override],\n  };\n}\n\nfunction createOverride(\n  names: string[],\n  mode = ByNamesMatcherMode.exclude,\n  property?: DynamicConfigValue\n): SystemConfigOverrideRule {\n  property = property ?? {\n    id: 'custom.hideFrom',\n    value: {\n      viz: true,\n      legend: false,\n      tooltip: false,\n    },\n  };\n\n  return {\n    __systemRef: displayOverrideRef,\n    matcher: {\n      id: FieldMatcherID.byNames,\n      options: {\n        mode: mode,\n        names: names,\n        prefix: mode === ByNamesMatcherMode.exclude ? 'All except:' : undefined,\n        readOnly: true,\n      },\n    },\n    properties: [\n      {\n        ...property,\n        value: {\n          viz: true,\n          legend: false,\n          tooltip: false,\n        },\n      },\n    ],\n  };\n}\n\nconst createExtendedOverride = (\n  current: SystemConfigOverrideRule,\n  displayName: string,\n  mode = ByNamesMatcherMode.exclude\n): SystemConfigOverrideRule => {\n  const property = current.properties.find((p) => p.id === 'custom.hideFrom');\n  const existing = getExistingDisplayNames(current);\n  const index = existing.findIndex((name) => name === displayName);\n\n  if (index < 0) {\n    existing.push(displayName);\n  } else {\n    existing.splice(index, 1);\n  }\n\n  return createOverride(existing, mode, property);\n};\n\nconst getExistingDisplayNames = (rule: SystemConfigOverrideRule): string[] => {\n  const names = rule.matcher.options?.names;\n  if (!Array.isArray(names)) {\n    return [];\n  }\n  return [...names];\n};\n\nconst allFieldsAreExcluded = (override: SystemConfigOverrideRule, data: DataFrame[]): boolean => {\n  return getExistingDisplayNames(override).length === getDisplayNames(data).length;\n};\n\nconst getDisplayNames = (data: DataFrame[], excludeName?: string): string[] => {\n  const unique = new Set<string>();\n\n  for (const frame of data) {\n    for (const field of frame.fields) {\n      if (field.type !== FieldType.number) {\n        continue;\n      }\n\n      const name = getFieldDisplayName(field, frame, data);\n\n      if (name === excludeName) {\n        continue;\n      }\n\n      unique.add(name);\n    }\n  }\n\n  return Array.from(unique);\n};\n\nconst getNamesOfHiddenFields = (overrides: ConfigOverrideRule[], data: DataFrame[]): string[] => {\n  let names: string[] = [];\n\n  for (const override of overrides) {\n    const property = override.properties.find((p) => p.id === 'custom.hideFrom');\n\n    if (property !== undefined && property.value?.legend === true) {\n      const info = fieldMatchers.get(override.matcher.id);\n      const matcher = info.get(override.matcher.options);\n\n      for (const frame of data) {\n        for (const field of frame.fields) {\n          if (field.type !== FieldType.number) {\n            continue;\n          }\n\n          const name = getFieldDisplayName(field, frame, data);\n\n          if (matcher(field, frame, data)) {\n            names.push(name);\n          }\n        }\n      }\n    }\n  }\n\n  return names;\n};\n","import {\n  ConfigOverrideRule,\n  DynamicConfigValue,\n  FieldColorModeId,\n  FieldConfigSource,\n  FieldMatcherID,\n} from '@grafana/data';\n\nexport const changeSeriesColorConfigFactory = (\n  label: string,\n  color: string,\n  fieldConfig: FieldConfigSource\n): FieldConfigSource => {\n  const { overrides } = fieldConfig;\n  const currentIndex = fieldConfig.overrides.findIndex((override) => {\n    return override.matcher.id === FieldMatcherID.byName && override.matcher.options === label;\n  });\n\n  if (currentIndex < 0) {\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, createOverride(label, color)],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const existing = overridesCopy[currentIndex];\n  const propertyIndex = existing.properties.findIndex((p) => p.id === 'color');\n\n  if (propertyIndex < 0) {\n    overridesCopy[currentIndex] = {\n      ...existing,\n      properties: [...existing.properties, createProperty(color)],\n    };\n\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  const propertiesCopy = Array.from(existing.properties);\n  propertiesCopy[propertyIndex] = createProperty(color);\n\n  overridesCopy[currentIndex] = {\n    ...existing,\n    properties: propertiesCopy,\n  };\n\n  return {\n    ...fieldConfig,\n    overrides: overridesCopy,\n  };\n};\n\nconst createOverride = (label: string, color: string): ConfigOverrideRule => {\n  return {\n    matcher: {\n      id: FieldMatcherID.byName,\n      options: label,\n    },\n    properties: [createProperty(color)],\n  };\n};\n\nconst createProperty = (color: string): DynamicConfigValue => {\n  return {\n    id: 'color',\n    value: {\n      mode: FieldColorModeId.Fixed,\n      fixedColor: color,\n    },\n  };\n};\n","import {\n  AbsoluteTimeRange,\n  FieldConfigSource,\n  PanelModel,\n  PanelPlugin,\n  toUtc,\n  getPanelOptionsWithDefaults,\n  ScopedVars,\n  InterpolateFunction,\n  CoreApp,\n  DashboardCursorSync,\n  PanelData,\n  compareArrayValues,\n  compareDataFrameStructures,\n  applyFieldOverrides,\n  PluginType,\n  renderMarkdown,\n  PanelPluginDataSupport,\n} from '@grafana/data';\nimport { PanelContext, SeriesVisibilityChangeMode, VizLegendOptions } from '@grafana/ui';\nimport { config, getAppEvents, getPluginImportUtils } from '@grafana/runtime';\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { sceneGraph } from '../../core/sceneGraph';\nimport { DeepPartial, SceneObject, SceneObjectState } from '../../core/types';\n\nimport { VizPanelRenderer } from './VizPanelRenderer';\nimport { VizPanelMenu } from './VizPanelMenu';\nimport { VariableDependencyConfig } from '../../variables/VariableDependencyConfig';\nimport { VariableCustomFormatterFn } from '../../variables/types';\nimport { seriesVisibilityConfigFactory } from './seriesVisibilityConfigFactory';\nimport { emptyPanelData } from '../../core/SceneDataNode';\nimport { changeSeriesColorConfigFactory } from './colorSeriesConfigFactory';\nimport { loadPanelPluginSync } from './registerRuntimePanelPlugin';\nimport { getCursorSyncScope } from '../../behaviors/CursorSync';\nimport { cloneDeep, isArray, isEmpty, merge, mergeWith } from 'lodash';\nimport { UserActionEvent } from '../../core/events';\nimport { evaluateTimeRange } from '../../utils/evaluateTimeRange';\nimport { LiveNowTimer } from '../../behaviors/LiveNowTimer';\n\nexport interface VizPanelState<TOptions = {}, TFieldConfig = {}> extends SceneObjectState {\n  /**\n   * This is usually a plugin id that references a core plugin or an external plugin. But this can also reference a\n   * runtime registered PanelPlugin registered via function registerScenePanelPlugin.\n   */\n  pluginId: string;\n  title: string;\n  description?: string;\n  options: DeepPartial<TOptions>;\n  fieldConfig: FieldConfigSource<DeepPartial<TFieldConfig>>;\n  pluginVersion?: string;\n  displayMode?: 'default' | 'transparent';\n  /**\n   * Only shows header on hover, absolutly positioned above the panel.\n   */\n  hoverHeader?: boolean;\n  /**\n   * Offset hoverHeader position on the y axis\n   */\n  hoverHeaderOffset?: number;\n  /**\n   * Defines a menu in the top right of the panel. The menu object is only activated when the dropdown menu itself is shown.\n   * So the best way to add dynamic menu actions and links is by adding them in a behavior attached to the menu.\n   */\n  menu?: VizPanelMenu;\n  /**\n   * Defines a menu that renders panel link.\n   **/\n  titleItems?: React.ReactNode | SceneObject | SceneObject[];\n  /**\n   * Add action to the top right panel header\n   */\n  headerActions?: React.ReactNode | SceneObject | SceneObject[];\n  /**\n   * Mainly for advanced use cases that need custom handling of PanelContext callbacks.\n   */\n  extendPanelContext?: (vizPanel: VizPanel, context: PanelContext) => void;\n  /**\n   * @internal\n   * Only for use from core to handle migration from old angular panels\n   **/\n  _UNSAFE_customMigrationHandler?: (panel: PanelModel, plugin: PanelPlugin) => void;\n  /** Internal */\n  _pluginLoadError?: string;\n  /** Internal */\n  _pluginInstanceState?: any;\n  _renderCounter?: number;\n}\n\nexport class VizPanel<TOptions = {}, TFieldConfig extends {} = {}> extends SceneObjectBase<\n  VizPanelState<TOptions, TFieldConfig>\n> {\n  public static Component = VizPanelRenderer;\n\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    statePaths: ['title', 'options', 'fieldConfig'],\n  });\n\n  // Not part of state as this is not serializable\n  protected _panelContext?: PanelContext;\n  private _plugin?: PanelPlugin;\n  private _prevData?: PanelData;\n  private _dataWithFieldConfig?: PanelData;\n  private _structureRev: number = 0;\n\n  public constructor(state: Partial<VizPanelState<TOptions, TFieldConfig>>) {\n    super({\n      options: {} as TOptions,\n      fieldConfig: { defaults: {}, overrides: [] },\n      title: 'Title',\n      pluginId: 'timeseries',\n      _renderCounter: 0,\n      ...state,\n    });\n\n    this.addActivationHandler(() => {\n      this._onActivate();\n    });\n\n    state.menu?.addActivationHandler(() => {\n      this.publishEvent(new UserActionEvent({ origin: this, interaction: 'panel-menu-shown' }), true);\n    });\n  }\n\n  private _onActivate() {\n    if (!this._plugin) {\n      this._loadPlugin(this.state.pluginId);\n    }\n  }\n\n  private async _loadPlugin(pluginId: string, overwriteOptions?: DeepPartial<{}>, overwriteFieldConfig?: FieldConfigSource, isAfterPluginChange?: boolean) {\n    const plugin = loadPanelPluginSync(pluginId);\n\n    if (plugin) {\n      this._pluginLoaded(plugin, overwriteOptions, overwriteFieldConfig, isAfterPluginChange);\n    } else {\n      const { importPanelPlugin } = getPluginImportUtils();\n\n      try {\n        const result = await importPanelPlugin(pluginId);\n        this._pluginLoaded(result, overwriteOptions, overwriteFieldConfig, isAfterPluginChange);\n      } catch (err: unknown) {\n        this._pluginLoaded(getPanelPluginNotFound(pluginId));\n\n        if (err instanceof Error) {\n          this.setState({ _pluginLoadError: err.message });\n        }\n      }\n    }\n  }\n\n  public getLegacyPanelId() {\n    const panelId = parseInt(this.state.key!.replace('panel-', ''), 10);\n    if (isNaN(panelId)) {\n      return 0;\n    }\n\n    return panelId;\n  }\n\n  private async _pluginLoaded(plugin: PanelPlugin, overwriteOptions?: DeepPartial<{}>, overwriteFieldConfig?: FieldConfigSource, isAfterPluginChange?: boolean) {\n    const { options, fieldConfig, title, pluginVersion, _UNSAFE_customMigrationHandler } = this.state;\n\n    const panel: PanelModel = {\n      title,\n      options,\n      fieldConfig,\n      id: this.getLegacyPanelId(),\n      type: plugin.meta.id,\n      pluginVersion: pluginVersion,\n    };\n\n    if (overwriteOptions) {\n      panel.options = overwriteOptions;\n    }\n\n    if (overwriteFieldConfig) {\n      panel.fieldConfig = overwriteFieldConfig;\n    }\n\n    const currentVersion = this._getPluginVersion(plugin);\n\n    _UNSAFE_customMigrationHandler?.(panel, plugin);\n\n    if (plugin.onPanelMigration && currentVersion !== this.state.pluginVersion) {\n      // These migration handlers also mutate panel.fieldConfig to migrate fieldConfig\n      panel.options = await plugin.onPanelMigration(panel);\n    }\n\n    const withDefaults = getPanelOptionsWithDefaults({\n      plugin,\n      currentOptions: panel.options,\n      currentFieldConfig: panel.fieldConfig,\n      isAfterPluginChange: isAfterPluginChange ?? false,\n    });\n\n    this._plugin = plugin;\n\n    this.setState({\n      options: withDefaults.options as DeepPartial<TOptions>,\n      fieldConfig: withDefaults.fieldConfig,\n      pluginVersion: currentVersion,\n      pluginId: plugin.meta.id,\n    });\n\n    // Non data panels needs to be re-rendered when time range change\n    if (plugin.meta.skipDataQuery) {\n      const sceneTimeRange = sceneGraph.getTimeRange(this);\n      this._subs.add(sceneTimeRange.subscribeToState(() => this.forceRender()));\n    }\n  }\n\n  private _getPluginVersion(plugin: PanelPlugin): string {\n    return plugin && plugin.meta.info.version ? plugin.meta.info.version : config.buildInfo.version;\n  }\n\n  public getPlugin(): PanelPlugin | undefined {\n    return this._plugin;\n  }\n\n  public getPanelContext(): PanelContext {\n    this._panelContext ??= this.buildPanelContext();\n\n    return this._panelContext!;\n  }\n\n  public onTimeRangeChange = (timeRange: AbsoluteTimeRange) => {\n    const sceneTimeRange = sceneGraph.getTimeRange(this);\n    sceneTimeRange.onTimeRangeChange({\n      raw: {\n        from: toUtc(timeRange.from),\n        to: toUtc(timeRange.to),\n      },\n      from: toUtc(timeRange.from),\n      to: toUtc(timeRange.to),\n    });\n  };\n\n  public getTimeRange = (data?: PanelData) => {\n    const liveNowTimer = sceneGraph.findObject(this, (o) => o instanceof LiveNowTimer);\n    const sceneTimeRange = sceneGraph.getTimeRange(this);\n    if (liveNowTimer instanceof LiveNowTimer && liveNowTimer.isEnabled) {\n      return evaluateTimeRange(\n        sceneTimeRange.state.from,\n        sceneTimeRange.state.to,\n        sceneTimeRange.getTimeZone(),\n        sceneTimeRange.state.fiscalYearStartMonth,\n        sceneTimeRange.state.UNSAFE_nowDelay\n      );\n    }\n\n    const plugin = this.getPlugin();\n    if (plugin && !plugin.meta.skipDataQuery && data && data.timeRange) {\n      return data.timeRange;\n    }\n\n    return sceneTimeRange.state.value;\n  };\n\n  public async changePluginType(pluginId: string, newOptions?: DeepPartial<{}>, newFieldConfig?: FieldConfigSource) {\n    const {\n      options: prevOptions,\n      fieldConfig: prevFieldConfig,\n      pluginId: prevPluginId,\n    } = this.state;\n\n    //clear field config cache to update it later\n    this._dataWithFieldConfig = undefined;\n\n    await this._loadPlugin(pluginId, newOptions ?? {}, newFieldConfig, true);\n\n    const panel: PanelModel = {\n      title: this.state.title,\n      options: this.state.options,\n      fieldConfig: this.state.fieldConfig,\n      id: 1,\n      type: pluginId,\n    };\n\n    // onPanelTypeChanged is mainly used by plugins to migrate from Angular to React. \n    // For example, this will migrate options from 'graph' to 'timeseries' if the previous and new plugin ID matches. \n    const updatedOptions = this._plugin?.onPanelTypeChanged?.(panel, prevPluginId, prevOptions, prevFieldConfig);\n\n    if (updatedOptions && !isEmpty(updatedOptions)) {\n      this.onOptionsChange(updatedOptions, true, true);\n    }\n  }\n\n  public onTitleChange = (title: string) => {\n    this.setState({ title });\n  };\n\n  public onDescriptionChange = (description: string) => {\n    this.setState({ description });\n  };\n\n  public onDisplayModeChange = (displayMode: 'default' | 'transparent') => {\n    this.setState({ displayMode });\n  };\n\n  public onOptionsChange = (optionsUpdate: DeepPartial<TOptions>, replace = false, isAfterPluginChange = false) => {\n    const { fieldConfig, options } = this.state;\n\n    // When replace is true, we want to replace the entire options object. Default will be applied.\n    const nextOptions = replace\n      ? optionsUpdate\n      : mergeWith(cloneDeep(options), optionsUpdate, (objValue, srcValue, key, obj) => {\n          if (isArray(srcValue)) {\n            return srcValue;\n          }\n          // If customizer returns undefined, merging is handled by the method instead\n          // so we need to override the value in the object instead\n          if (objValue !== srcValue && typeof srcValue === 'undefined') {\n            obj[key] = srcValue;\n            return;\n          }\n          return;\n        });\n\n    const withDefaults = getPanelOptionsWithDefaults({\n      plugin: this._plugin!,\n      currentOptions: nextOptions,\n      currentFieldConfig: fieldConfig,\n      isAfterPluginChange: isAfterPluginChange,\n    });\n\n    this.setState({\n      options: withDefaults.options as DeepPartial<TOptions>,\n      _renderCounter: (this.state._renderCounter ?? 0) + 1,\n    });\n  };\n\n  public onFieldConfigChange = (fieldConfigUpdate: FieldConfigSource<DeepPartial<TFieldConfig>>, replace?: boolean) => {\n    const { fieldConfig, options } = this.state;\n\n    // When replace is true, we want to replace the entire field config. Default will be applied.\n    const nextFieldConfig = replace ? fieldConfigUpdate : merge(cloneDeep(fieldConfig), fieldConfigUpdate);\n\n    const withDefaults = getPanelOptionsWithDefaults({\n      plugin: this._plugin!,\n      currentOptions: options,\n      currentFieldConfig: nextFieldConfig,\n      isAfterPluginChange: false,\n    });\n\n    this._dataWithFieldConfig = undefined;\n    this.setState({ fieldConfig: withDefaults.fieldConfig });\n  };\n\n  public interpolate = ((value: string, scoped?: ScopedVars, format?: string | VariableCustomFormatterFn) => {\n    return sceneGraph.interpolate(this, value, scoped, format);\n  }) as InterpolateFunction;\n\n  public getDescription = () => {\n    this.publishEvent(new UserActionEvent({ origin: this, interaction: 'panel-description-shown' }), true);\n\n    const { description } = this.state;\n    if (description) {\n      const markdown = this.interpolate(description);\n      return renderMarkdown(markdown);\n    }\n    return '';\n  };\n\n  public clearFieldConfigCache() {\n    this._dataWithFieldConfig = undefined;\n  }\n\n  /**\n   * Called from the react render path to apply the field config to the data provided by the data provider\n   */\n  public applyFieldConfig(rawData?: PanelData): PanelData {\n    const plugin = this._plugin;\n\n    if (!plugin || plugin.meta.skipDataQuery || !rawData) {\n      // TODO setup time range subscription instead\n      return emptyPanelData;\n    }\n\n    // If the data is the same as last time, we can skip the field config apply step and just return same result as last time\n    if (this._prevData === rawData && this._dataWithFieldConfig) {\n      return this._dataWithFieldConfig;\n    }\n\n    const pluginDataSupport: PanelPluginDataSupport = plugin.dataSupport || { alertStates: false, annotations: false };\n\n    const fieldConfigRegistry = plugin.fieldConfigRegistry;\n    const prevFrames = this._dataWithFieldConfig?.series ?? [];\n    const newFrames = applyFieldOverrides({\n      data: rawData.series,\n      fieldConfig: this.state.fieldConfig,\n      fieldConfigRegistry,\n      replaceVariables: this.interpolate,\n      theme: config.theme2,\n      timeZone: rawData.request?.timezone,\n    });\n\n    if (!compareArrayValues(newFrames, prevFrames, compareDataFrameStructures)) {\n      this._structureRev++;\n    }\n\n    this._dataWithFieldConfig = {\n      ...rawData,\n      structureRev: this._structureRev,\n      series: newFrames,\n    };\n\n    if (this._dataWithFieldConfig.annotations) {\n      this._dataWithFieldConfig.annotations = applyFieldOverrides({\n        data: this._dataWithFieldConfig.annotations,\n        fieldConfig: {\n          defaults: {},\n          overrides: [],\n        },\n        fieldConfigRegistry,\n        replaceVariables: this.interpolate,\n        theme: config.theme2,\n        timeZone: rawData.request?.timezone,\n      });\n    }\n\n    if (!pluginDataSupport.alertStates) {\n      this._dataWithFieldConfig.alertState = undefined;\n    }\n\n    if (!pluginDataSupport.annotations) {\n      this._dataWithFieldConfig.annotations = undefined;\n    }\n\n    this._prevData = rawData;\n    return this._dataWithFieldConfig;\n  }\n\n  public onCancelQuery = () => {\n    this.publishEvent(new UserActionEvent({ origin: this, interaction: 'panel-cancel-query-clicked' }), true);\n    const data = sceneGraph.getData(this);\n    data.cancelQuery?.();\n  };\n\n  public onStatusMessageClick = () => {\n    this.publishEvent(new UserActionEvent({ origin: this, interaction: 'panel-status-message-clicked' }), true);\n  };\n\n  /**\n   * Panel context functions\n   */\n  private _onSeriesColorChange = (label: string, color: string) => {\n    this.onFieldConfigChange(changeSeriesColorConfigFactory(label, color, this.state.fieldConfig));\n  };\n\n  private _onSeriesVisibilityChange = (label: string, mode: SeriesVisibilityChangeMode) => {\n    if (!this._dataWithFieldConfig) {\n      return;\n    }\n\n    this.onFieldConfigChange(\n      seriesVisibilityConfigFactory(label, mode, this.state.fieldConfig, this._dataWithFieldConfig.series),\n      true\n    );\n  };\n\n  private _onInstanceStateChange = (state: any) => {\n    if (this._panelContext) {\n      this._panelContext = {\n        ...this._panelContext,\n        instanceState: state,\n      };\n    }\n\n    this.setState({ _pluginInstanceState: state });\n  };\n\n  private _onToggleLegendSort = (sortKey: string) => {\n    const legendOptions: VizLegendOptions = (this.state.options as any).legend;\n\n    // We don't want to do anything when legend options are not available\n    if (!legendOptions) {\n      return;\n    }\n\n    let sortDesc = legendOptions.sortDesc;\n    let sortBy = legendOptions.sortBy;\n    if (sortKey !== sortBy) {\n      sortDesc = undefined;\n    }\n\n    // if already sort ascending, disable sorting\n    if (sortDesc === false) {\n      sortBy = undefined;\n      sortDesc = undefined;\n    } else {\n      sortDesc = !sortDesc;\n      sortBy = sortKey;\n    }\n\n    this.onOptionsChange(\n      {\n        ...this.state.options,\n        legend: { ...legendOptions, sortBy, sortDesc },\n      } as TOptions,\n      true\n    );\n  };\n\n  private buildPanelContext(): PanelContext {\n    const sync = getCursorSyncScope(this);\n\n    const context = {\n      eventsScope: sync ? sync.getEventsScope() : '__global_',\n      eventBus: sync ? sync.getEventsBus(this) : getAppEvents(),\n      app: CoreApp.Unknown,\n      sync: () => {\n        if (sync) {\n          return sync.state.sync;\n        }\n        return DashboardCursorSync.Off;\n      },\n      onSeriesColorChange: this._onSeriesColorChange,\n      onToggleSeriesVisibility: this._onSeriesVisibilityChange,\n      onToggleLegendSort: this._onToggleLegendSort,\n      onInstanceStateChange: this._onInstanceStateChange,\n    };\n\n    if (this.state.extendPanelContext) {\n      this.state.extendPanelContext(this, context);\n    }\n\n    return context;\n  }\n}\n\nfunction getPanelPluginNotFound(id: string): PanelPlugin {\n  const plugin = new PanelPlugin(() => null);\n\n  plugin.meta = {\n    id: id,\n    name: id,\n    sort: 100,\n    type: PluginType.panel,\n    module: '',\n    baseUrl: '',\n    info: {\n      author: {\n        name: '',\n      },\n      description: '',\n      links: [],\n      logos: {\n        large: '',\n        small: 'public/img/grafana_icon.svg',\n      },\n      screenshots: [],\n      updated: '',\n      version: '',\n    },\n  };\n\n  return plugin;\n}\n","import { VizPanel } from '../components/VizPanel/VizPanel';\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { sceneGraph } from '../core/sceneGraph';\nimport { SceneObjectState } from '../core/types';\n\ninterface LiveNowTimerState extends SceneObjectState {\n  enabled: boolean;\n}\n\nexport class LiveNowTimer extends SceneObjectBase<LiveNowTimerState> {\n  private timerId: number | undefined = undefined;\n  private static REFRESH_RATE = 100; // ms\n\n  public constructor({ enabled = false }) {\n    super({ enabled });\n    this.addActivationHandler(this._activationHandler);\n  }\n\n  private _activationHandler = () => {\n    if (this.state.enabled) {\n      this.enable();\n    }\n\n    return () => {\n      window.clearInterval(this.timerId);\n      this.timerId = undefined;\n    };\n  };\n\n  public enable() {\n    window.clearInterval(this.timerId);\n    this.timerId = undefined;\n    this.timerId = window.setInterval(() => {\n      const panels = sceneGraph.findAllObjects(this.getRoot(), (obj) => obj instanceof VizPanel) as VizPanel[];\n      for (const panel of panels) {\n        panel.forceRender();\n      }\n    }, LiveNowTimer.REFRESH_RATE);\n    this.setState({ enabled: true });\n  }\n\n  public disable() {\n    window.clearInterval(this.timerId);\n    this.timerId = undefined;\n    this.setState({ enabled: false });\n  }\n\n  public get isEnabled() {\n    return this.state.enabled;\n  }\n}\n","import { isFetchError } from '@grafana/runtime';\n\nexport function getMessageFromError(err: unknown): string {\n  if (typeof err === 'string') {\n    return err;\n  }\n\n  if (err) {\n    if (err instanceof Error) {\n      return err.message;\n    } else if (isFetchError(err)) {\n      if (err.data && err.data.message) {\n        return err.data.message;\n      } else if (err.statusText) {\n        return err.statusText;\n      }\n    } else if (err.hasOwnProperty('message')) {\n      // @ts-expect-error\n      return err.message;\n    }\n  }\n\n  return JSON.stringify(err);\n}\n","import { PanelData } from '@grafana/data';\nimport { ReplaySubject, Unsubscribable } from 'rxjs';\nimport { emptyPanelData } from '../../core/SceneDataNode';\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport {\n  CancelActivationHandler,\n  SceneDataLayerProvider,\n  SceneDataProviderResult,\n  SceneDataLayerProviderState,\n} from '../../core/types';\nimport { setBaseClassState } from '../../utils/utils';\nimport { writeSceneLog } from '../../utils/writeSceneLog';\nimport { VariableDependencyConfig } from '../../variables/VariableDependencyConfig';\nimport { VariableValueRecorder } from '../../variables/VariableValueRecorder';\n\n/**\n * Base class for data layer. Handles common implementation including enabling/disabling layer and publishing results.\n */\nexport abstract class SceneDataLayerBase<T extends SceneDataLayerProviderState>\n  extends SceneObjectBase<T>\n  implements SceneDataLayerProvider\n{\n  /**\n   * Subscription to query results. Should be set when layer runs a query.\n   */\n  protected querySub?: Unsubscribable;\n\n  /**\n   * Subject to emit results to.\n   */\n  private _results = new ReplaySubject<SceneDataProviderResult>(1);\n\n  /**\n   * Implement logic for enabling the layer. This is called when layer is enabled or when layer is enabled when activated.\n   * Use i.e. to setup subscriptions that will trigger layer updates.\n   */\n  public abstract onEnable(): void;\n\n  /**\n   * Implement logic for disabling the layer. This is called when layer is disabled.\n   * Use i.e. to unsubscribe from subscriptions that trigger layer updates.\n   */\n  public abstract onDisable(): void;\n\n  /**\n   * Implement logic running the layer and setting up the querySub subscription.\n   */\n  protected abstract runLayer(): void;\n\n  /**\n   * Mark data provider as data layer\n   */\n  public isDataLayer: true = true;\n\n  private _variableValueRecorder = new VariableValueRecorder();\n\n  protected _variableDependency: VariableDependencyConfig<T> = new VariableDependencyConfig(this, {\n    onVariableUpdateCompleted: this.onVariableUpdateCompleted.bind(this),\n  });\n\n  /**\n   * For variables support in data layer provide variableDependencyStatePaths with keys of the state to be scanned for variables.\n   */\n  public constructor(initialState: T, variableDependencyStatePaths: Array<keyof T> = []) {\n    super({\n      isEnabled: true,\n      ...initialState,\n    });\n\n    this._variableDependency.setPaths(variableDependencyStatePaths);\n    this.addActivationHandler(() => this.onActivate());\n  }\n\n  protected onActivate(): CancelActivationHandler {\n    if (this.state.isEnabled) {\n      this.onEnable();\n    }\n\n    if (this.shouldRunLayerOnActivate()) {\n      this.runLayer();\n    }\n\n    // Subscribe to layer state changes and enable/disable layer accordingly.\n    this.subscribeToState((n, p) => {\n      if (!n.isEnabled && this.querySub) {\n        // When layer disabled, cancel query and call onDisable that should publish empty results.\n        this.querySub.unsubscribe();\n        this.querySub = undefined;\n        this.onDisable();\n\n        // Manually publishing the results to state and results stream as publishPublish results has a guard for the layer to be enabled.\n        this._results.next({ origin: this, data: emptyPanelData });\n\n        this.setStateHelper({ data: emptyPanelData });\n      }\n\n      if (n.isEnabled && !p.isEnabled) {\n        // When layer enabled, run queries.\n        this.onEnable();\n        this.runLayer();\n      }\n    });\n\n    return () => {\n      this.onDeactivate();\n    };\n  }\n\n  protected onDeactivate(): void {\n    if (this.querySub) {\n      this.querySub.unsubscribe();\n      this.querySub = undefined;\n    }\n\n    this.onDisable();\n\n    this._variableValueRecorder.recordCurrentDependencyValuesForSceneObject(this);\n  }\n\n  protected onVariableUpdateCompleted(): void {\n    this.runLayer();\n  }\n\n  public cancelQuery() {\n    if (this.querySub) {\n      this.querySub.unsubscribe();\n      this.querySub = undefined;\n\n      this.publishResults(emptyPanelData);\n    }\n  }\n\n  protected publishResults(data: PanelData) {\n    if (this.state.isEnabled) {\n      this._results.next({ origin: this, data });\n      this.setStateHelper({ data });\n    }\n  }\n\n  public getResultsStream() {\n    return this._results;\n  }\n\n  private shouldRunLayerOnActivate() {\n    if (!this.state.isEnabled) {\n      return false;\n    }\n\n    if (this._variableValueRecorder.hasDependenciesChanged(this)) {\n      writeSceneLog(\n        'SceneDataLayerBase',\n        'Variable dependency changed while inactive, shouldRunLayerOnActivate returns true'\n      );\n      return true;\n    }\n\n    if (!this.state.data) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * This helper function is to counter the contravariance of setState\n   */\n  private setStateHelper(state: Partial<SceneDataLayerProviderState>) {\n    setBaseClassState<SceneDataLayerProviderState>(this, state);\n  }\n}\n","import { css } from '@emotion/css';\nimport { LoadingState } from '@grafana/schema';\nimport { InlineSwitch } from '@grafana/ui';\nimport React from 'react';\nimport { sceneGraph } from '../../core/sceneGraph';\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneComponentProps, SceneDataLayerProvider, SceneObjectState } from '../../core/types';\nimport { ControlsLabel } from '../../utils/ControlsLabel';\n\ninterface SceneDataLayerControlsState extends SceneObjectState {}\n\nexport class SceneDataLayerControls extends SceneObjectBase<SceneDataLayerControlsState> {\n  public static Component = SceneDataLayerControlsRenderer;\n\n  public constructor() {\n    super({});\n  }\n}\n\nfunction SceneDataLayerControlsRenderer({ model }: SceneComponentProps<SceneDataLayerControls>) {\n  const layers = sceneGraph.getDataLayers(model, true);\n\n  if (layers.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      {layers.map((layer) => (\n        <layer.Component model={layer} key={layer.state.key} />\n      ))}\n    </>\n  );\n}\n\ninterface SceneDataLayerControlProps {\n  layer: SceneDataLayerProvider;\n}\n\nexport function DataLayerControlSwitch({ layer }: SceneDataLayerControlProps) {\n  const elementId = `data-layer-${layer.state.key}`;\n  const { data, isEnabled } = layer.useState();\n  const showLoading = Boolean(data && data.state === LoadingState.Loading);\n\n  return (\n    <div className={containerStyle}>\n      <ControlsLabel\n        htmlFor={elementId}\n        isLoading={showLoading}\n        onCancel={() => layer.cancelQuery?.()}\n        label={layer.state.name}\n        description={layer.state.description}\n        error={layer.state.data?.errors?.[0].message}\n      />\n      <InlineSwitch id={elementId} value={isEnabled} onChange={() => layer.setState({ isEnabled: !isEnabled })} />\n    </div>\n  );\n}\n\nconst containerStyle = css({ display: 'flex' });\n","import { isString } from 'lodash';\nimport { Observable, of, OperatorFunction } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  AnnotationEventFieldSource,\n  AnnotationEventMappings,\n  AnnotationQuery,\n  AnnotationSupport,\n  DataFrame,\n  DataSourceApi,\n  DataTransformContext,\n  Field,\n  FieldType,\n  getFieldDisplayName,\n  KeyValue,\n  standardTransformers,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nexport const standardAnnotationSupport: AnnotationSupport = {\n  /**\n   * Assume the stored value is standard model.\n   */\n  prepareAnnotation: (json: any) => {\n    if (isString(json?.query)) {\n      const { query, ...rest } = json;\n      return {\n        ...rest,\n        target: {\n          refId: 'annotation_query',\n          query,\n        },\n        mappings: {},\n      };\n    }\n    return json as AnnotationQuery;\n  },\n\n  /**\n   * Default will just return target from the annotation.\n   */\n  prepareQuery: (anno: AnnotationQuery) => anno.target,\n\n  /**\n   * Provides default processing from dataFrame to annotation events.\n   */\n  processEvents: (anno: AnnotationQuery, data: DataFrame[]) => {\n    return getAnnotationsFromData(data, anno.mappings);\n  },\n};\n\n/**\n * Flatten all frames into a single frame with mergeTransformer.\n */\n\nexport function singleFrameFromPanelData(): OperatorFunction<DataFrame[], DataFrame | undefined> {\n  return (source) =>\n    source.pipe(\n      mergeMap((data) => {\n        if (!data?.length) {\n          return of(undefined);\n        }\n\n        if (data.length === 1) {\n          return of(data[0]);\n        }\n\n        const ctx: DataTransformContext = {\n          interpolate: (v: string) => v,\n        };\n\n        return of(data).pipe(\n          standardTransformers.mergeTransformer.operator({}, ctx),\n          map((d) => d[0])\n        );\n      })\n    );\n}\n\ninterface AnnotationEventFieldSetter {\n  key: keyof AnnotationEvent;\n  field?: Field;\n  text?: string;\n  regex?: RegExp;\n  split?: string; // for tags\n}\n\nexport interface AnnotationFieldInfo {\n  key: keyof AnnotationEvent;\n\n  split?: string;\n  field?: (frame: DataFrame) => Field | undefined;\n  placeholder?: string;\n  help?: string;\n}\n\n// These fields get added to the standard UI\nexport const annotationEventNames: AnnotationFieldInfo[] = [\n  {\n    key: 'time',\n    field: (frame: DataFrame) => frame.fields.find((f) => f.type === FieldType.time),\n    placeholder: 'time, or the first time field',\n  },\n  { key: 'timeEnd', help: 'When this field is defined, the annotation will be treated as a range' },\n  {\n    key: 'title',\n  },\n  {\n    key: 'text',\n    field: (frame: DataFrame) => frame.fields.find((f) => f.type === FieldType.string),\n    placeholder: 'text, or the first text field',\n  },\n  { key: 'tags', split: ',', help: 'The results will be split on comma (,)' },\n  {\n    key: 'id',\n  },\n];\n\nexport const publicDashboardEventNames: AnnotationFieldInfo[] = [\n  {\n    key: 'color',\n  },\n  {\n    key: 'isRegion',\n  },\n  {\n    key: 'source',\n  },\n];\n\n// Given legacy infrastructure, alert events are passed though the same annotation\n// pipeline, but include fields that should not be exposed generally\nconst alertEventAndAnnotationFields: AnnotationFieldInfo[] = [\n  ...(config.publicDashboardAccessToken ? publicDashboardEventNames : []),\n  ...annotationEventNames,\n  { key: 'userId' },\n  { key: 'login' },\n  { key: 'email' },\n  { key: 'prevState' },\n  { key: 'newState' },\n  { key: 'data' as any },\n  { key: 'panelId' },\n  { key: 'alertId' },\n  { key: 'dashboardId' },\n  { key: 'dashboardUID' },\n];\n\nexport function getAnnotationsFromData(\n  data: DataFrame[],\n  options?: AnnotationEventMappings\n): Observable<AnnotationEvent[]> {\n  return of(data).pipe(\n    singleFrameFromPanelData(),\n    map((frame) => {\n      if (!frame?.length) {\n        return [];\n      }\n\n      let hasTime = false;\n      let hasText = false;\n      const byName: KeyValue<Field> = {};\n\n      for (const f of frame.fields) {\n        const name = getFieldDisplayName(f, frame);\n        byName[name.toLowerCase()] = f;\n      }\n\n      if (!options) {\n        options = {};\n      }\n\n      const fields: AnnotationEventFieldSetter[] = [];\n\n      for (const evts of alertEventAndAnnotationFields) {\n        const opt = options[evts.key] || {}; //AnnotationEventFieldMapping\n\n        if (opt.source === AnnotationEventFieldSource.Skip) {\n          continue;\n        }\n\n        const setter: AnnotationEventFieldSetter = { key: evts.key, split: evts.split };\n\n        if (opt.source === AnnotationEventFieldSource.Text) {\n          setter.text = opt.value;\n        } else {\n          const lower = (opt.value || evts.key).toLowerCase();\n          setter.field = byName[lower];\n\n          if (!setter.field && evts.field) {\n            setter.field = evts.field(frame);\n          }\n        }\n\n        if (setter.field || setter.text) {\n          fields.push(setter);\n          if (setter.key === 'time') {\n            hasTime = true;\n          } else if (setter.key === 'text') {\n            hasText = true;\n          }\n        }\n      }\n\n      if (!hasTime || !hasText) {\n        console.error('Cannot process annotation fields. No time or text present.');\n        return [];\n      }\n\n      // Add each value to the string\n      const events: AnnotationEvent[] = [];\n\n      for (let i = 0; i < frame.length; i++) {\n        const anno: AnnotationEvent = {\n          type: 'default',\n          color: 'red',\n        };\n\n        for (const f of fields) {\n          let v: any = undefined;\n\n          if (f.text) {\n            v = f.text; // TODO support templates!\n          } else if (f.field) {\n            v = f.field.values.get(i);\n            if (v !== undefined && f.regex) {\n              const match = f.regex.exec(v);\n              if (match) {\n                v = match[1] ? match[1] : match[0];\n              }\n            }\n          }\n\n          if (v !== null && v !== undefined) {\n            if (f.split && typeof v === 'string') {\n              v = v.split(',');\n            }\n            (anno as any)[f.key] = v;\n          }\n        }\n\n        events.push(anno);\n      }\n      return events;\n    })\n  );\n}\n\n// These opt outs are here only for quicker and easier migration to react based annotations editors and because\n// annotation support API needs some work to support less \"standard\" editors like prometheus and here it is not\n// polluting public API.\n\nconst legacyRunner = [\n  'prometheus',\n  'loki',\n  'elasticsearch',\n  'grafana-opensearch-datasource', // external\n];\n\n/**\n * Use legacy runner. Used only as an escape hatch for easier transition to React based annotation editor.\n */\nexport function shouldUseLegacyRunner(datasource: DataSourceApi): boolean {\n  const { type } = datasource;\n  return !datasource.annotations || legacyRunner.includes(type);\n}\n","import { from, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  AnnotationQuery,\n  CoreApp,\n  DataQueryRequest,\n  DataSourceApi,\n  DataTopic,\n  PanelModel,\n  rangeUtil,\n  ScopedVars,\n} from '@grafana/data';\n\nimport { getRunRequest, getTemplateSrv } from '@grafana/runtime';\nimport { shouldUseLegacyRunner, standardAnnotationSupport } from './standardAnnotationsSupport';\nimport { Dashboard, LoadingState } from '@grafana/schema';\nimport { SceneObject, SceneTimeRangeLike } from '../../../core/types';\nimport { getEnrichedDataRequest } from '../../getEnrichedDataRequest';\nimport { wrapInSafeSerializableSceneObject } from '../../../utils/wrapInSafeSerializableSceneObject';\n\nlet counter = 100;\nfunction getNextRequestId() {\n  return 'AQ' + counter++;\n}\n\nexport interface AnnotationQueryOptions {\n  dashboard: Dashboard;\n  panel: PanelModel;\n}\n\nexport interface AnnotationQueryResults {\n  state: LoadingState;\n  events: AnnotationEvent[];\n}\n\nexport function executeAnnotationQuery(\n  datasource: DataSourceApi,\n  timeRange: SceneTimeRangeLike,\n  query: AnnotationQuery,\n  layer: SceneObject\n): Observable<AnnotationQueryResults> {\n  // Check if we should use the old annotationQuery method\n  if (datasource.annotationQuery && shouldUseLegacyRunner(datasource)) {\n    console.warn('Using deprecated annotationQuery method, please upgrade your datasource');\n    return from(\n      datasource.annotationQuery({\n        range: timeRange.state.value,\n        rangeRaw: timeRange.state.value.raw,\n        annotation: query,\n        dashboard: {\n          getVariables: getTemplateSrv().getVariables\n        },\n      })\n    ).pipe(\n      map((events) => ({\n        state: LoadingState.Done,\n        events,\n      }))\n    );\n  }\n\n  // Standard API for annotations support. Spread in datasource annotations support overrides\n  const processor = {\n    ...standardAnnotationSupport,\n    ...datasource.annotations,\n  };\n\n  const annotationWithDefaults = {\n    // Default query provided by a data source\n    ...processor.getDefaultQuery?.(),\n    ...query,\n  };\n\n  // Data source query migrations\n  const annotation = processor.prepareAnnotation!(annotationWithDefaults);\n  if (!annotation) {\n    return of({\n      state: LoadingState.Done,\n      events: [],\n    });\n  }\n\n  const processedQuery = processor.prepareQuery!(annotation);\n  if (!processedQuery) {\n    return of({\n      state: LoadingState.Done,\n      events: [],\n    });\n  }\n\n  // No more points than pixels\n  const maxDataPoints = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n\n  // Add interval to annotation queries\n  const interval = rangeUtil.calculateInterval(timeRange.state.value, maxDataPoints, datasource.interval);\n\n  const scopedVars: ScopedVars = {\n    __interval: { text: interval.interval, value: interval.interval },\n    __interval_ms: { text: interval.intervalMs.toString(), value: interval.intervalMs },\n    __annotation: { text: annotation.name, value: annotation },\n    __sceneObject: wrapInSafeSerializableSceneObject(layer),\n  };\n\n  const queryRequest: DataQueryRequest = {\n    startTime: Date.now(),\n    requestId: getNextRequestId(),\n    range: timeRange.state.value,\n    maxDataPoints,\n    scopedVars,\n    ...interval,\n    app: CoreApp.Dashboard,\n    timezone: timeRange.getTimeZone(),\n    targets: [\n      {\n        ...processedQuery,\n        refId: 'Anno',\n      },\n    ],\n    ...getEnrichedDataRequest(layer),\n  };\n\n  const runRequest = getRunRequest();\n\n  return runRequest(datasource, queryRequest).pipe(\n    mergeMap((panelData) => {\n      // Some annotations set the topic already\n      const data = panelData?.series.length ? panelData.series : panelData.annotations;\n\n      if (!data?.length) {\n        return of({\n          state: panelData.state,\n          events: [],\n        });\n      }\n\n      // Add data topic to each frame\n      data.forEach((frame) => {\n        // If data topic has not been provided by the data source, make sure it's set correctly\n        if (!frame.meta?.dataTopic) {\n          frame.meta = { ...(frame.meta || {}), dataTopic: DataTopic.Annotations };\n        }\n      });\n\n      return processor.processEvents!(annotation, data).pipe(\n        map((events) => {\n          return {\n            state: panelData.state,\n            events: events || [],\n          };\n        })\n      );\n    })\n  );\n}\n","// These opt outs are here only for quicker and easier migration to react based annotations editors and because\n// annotation support API needs some work to support less \"standard\" editors like prometheus and here it is not\n// polluting public API.\n\nimport { AnnotationEvent, AnnotationQuery, DataSourceApi } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { cloneDeep, concat, every, find, groupBy, head, map, partition } from 'lodash';\n\nconst legacyRunner = [\n  'prometheus',\n  'loki',\n  'elasticsearch',\n  'grafana-opensearch-datasource', // external\n];\n\n/**\n * Use legacy runner. Used only as an escape hatch for easier transition to React based annotation editor.\n */\nexport function shouldUseLegacyRunner(datasource: DataSourceApi): boolean {\n  const { type } = datasource;\n  return !datasource.annotations || legacyRunner.includes(type);\n}\n\nexport function postProcessQueryResult(annotation: AnnotationQuery, results: AnnotationEvent[]): AnnotationEvent[] {\n  // if annotation has snapshotData\n  // make clone and remove it\n  if (annotation.snapshotData) {\n    annotation = cloneDeep(annotation);\n    delete annotation.snapshotData;\n  }\n\n  //\n  const processed = results.map((item) => {\n    const processedItem = { ...item };\n\n    processedItem.source = annotation;\n    processedItem.color = config.theme2.visualization.getColorByName(annotation.iconColor);\n    processedItem.type = annotation.name;\n    processedItem.isRegion = Boolean(processedItem.timeEnd && processedItem.time !== processedItem.timeEnd);\n\n    switch (processedItem.newState?.toLowerCase()) {\n      case 'pending':\n        processedItem.color = 'yellow';\n        break;\n      case 'alerting':\n        processedItem.color = 'red';\n        break;\n      case 'ok':\n        processedItem.color = 'green';\n        break;\n      case 'normal': // ngalert (\"normal\" instead of \"ok\")\n        processedItem.color = 'green';\n        break;\n      case 'no_data':\n        processedItem.color = 'gray';\n        break;\n      case 'nodata': // ngalert\n        processedItem.color = 'gray';\n        break;\n    }\n\n    return processedItem;\n  });\n\n  return processed;\n}\n\nexport function dedupAnnotations(annotations: any) {\n  let dedup = [];\n\n  // Split events by annotationId property existence\n  const events = partition(annotations, 'id');\n\n  const eventsById = groupBy(events[0], 'id');\n  dedup = map(eventsById, (eventGroup) => {\n    if (eventGroup.length > 1 && !every(eventGroup, isPanelAlert)) {\n      // Get first non-panel alert\n      return find(eventGroup, (event) => {\n        return event.eventType !== 'panel-alert';\n      });\n    } else {\n      return head(eventGroup);\n    }\n  });\n\n  dedup = concat(dedup, events[1]);\n  return dedup;\n}\n\nfunction isPanelAlert(event: { eventType: string }) {\n  return event.eventType === 'panel-alert';\n}\n","import { arrayToDataFrame, DataTopic, AnnotationQuery, ScopedVars, PanelData } from '@grafana/data';\nimport { LoadingState } from '@grafana/schema';\nimport React from 'react';\nimport { map, Unsubscribable } from 'rxjs';\nimport { emptyPanelData } from '../../../core/SceneDataNode';\nimport { sceneGraph } from '../../../core/sceneGraph';\nimport {\n  SceneComponentProps,\n  SceneDataLayerProvider,\n  SceneDataLayerProviderState,\n  SceneTimeRangeLike,\n} from '../../../core/types';\nimport { getDataSource } from '../../../utils/getDataSource';\nimport { getMessageFromError } from '../../../utils/getMessageFromError';\nimport { writeSceneLog } from '../../../utils/writeSceneLog';\nimport { registerQueryWithController } from '../../registerQueryWithController';\nimport { SceneDataLayerBase } from '../SceneDataLayerBase';\nimport { DataLayerControlSwitch } from '../SceneDataLayerControls';\nimport { AnnotationQueryResults, executeAnnotationQuery } from './standardAnnotationQuery';\nimport { dedupAnnotations, postProcessQueryResult } from './utils';\nimport { wrapInSafeSerializableSceneObject } from '../../../utils/wrapInSafeSerializableSceneObject';\nimport { RefreshEvent } from '@grafana/runtime';\n\ninterface AnnotationsDataLayerState extends SceneDataLayerProviderState {\n  query: AnnotationQuery;\n}\n\nexport class AnnotationsDataLayer\n  extends SceneDataLayerBase<AnnotationsDataLayerState>\n  implements SceneDataLayerProvider\n{\n  static Component = AnnotationsDataLayerRenderer;\n\n  private _scopedVars: ScopedVars = {\n    __sceneObject: wrapInSafeSerializableSceneObject(this),\n  };\n  private _timeRangeSub: Unsubscribable | undefined;\n\n  public constructor(initialState: AnnotationsDataLayerState) {\n    super(\n      {\n        isEnabled: true,\n        ...initialState,\n      },\n      ['query']\n    );\n  }\n\n  public onEnable(): void {\n    this.publishEvent(new RefreshEvent(), true);\n    \n    const timeRange = sceneGraph.getTimeRange(this);\n\n    this._timeRangeSub = timeRange.subscribeToState(() => {\n      this.runWithTimeRange(timeRange);\n    });\n  }\n\n  public onDisable(): void {\n    this.publishEvent(new RefreshEvent(), true);\n\n    this._timeRangeSub?.unsubscribe();\n  }\n\n  public runLayer() {\n    writeSceneLog('AnnotationsDataLayer', 'run layer');\n    const timeRange = sceneGraph.getTimeRange(this);\n    this.runWithTimeRange(timeRange);\n  }\n\n  private async runWithTimeRange(timeRange: SceneTimeRangeLike) {\n    const { query } = this.state;\n\n    if (this.querySub) {\n      this.querySub.unsubscribe();\n    }\n\n    if (this._variableDependency.hasDependencyInLoadingState()) {\n      writeSceneLog('AnnotationsDataLayer', 'Variable dependency is in loading state, skipping query execution');\n      return;\n    }\n\n    try {\n      const ds = await this.resolveDataSource(query);\n\n      let stream = executeAnnotationQuery(ds, timeRange, query, this).pipe(\n        registerQueryWithController({\n          type: 'annotations',\n          origin: this,\n          cancel: () => this.cancelQuery(),\n        }),\n        map((events) => {\n          const stateUpdate = this.processEvents(query, events);\n          return stateUpdate;\n        })\n      );\n\n      this.querySub = stream.subscribe((stateUpdate) => {\n        this.publishResults(stateUpdate);\n      });\n    } catch (e) {\n      this.publishResults({\n        ...emptyPanelData,\n        state: LoadingState.Error,\n        errors: [\n          {\n            message: getMessageFromError(e),\n          },\n        ],\n      });\n      console.error('AnnotationsDataLayer error', e);\n    }\n  }\n\n  protected async resolveDataSource(query: AnnotationQuery) {\n    return await getDataSource(query.datasource || undefined, this._scopedVars);\n  }\n\n  protected processEvents(query: AnnotationQuery, events: AnnotationQueryResults): PanelData {\n    let processedEvents = postProcessQueryResult(query, events.events || []);\n    processedEvents = dedupAnnotations(processedEvents);\n\n    const stateUpdate = { ...emptyPanelData, state: events.state };\n    const df = arrayToDataFrame(processedEvents);\n\n    df.meta = {\n      ...df.meta,\n      dataTopic: DataTopic.Annotations,\n    };\n\n    stateUpdate.series = [df];\n\n    return stateUpdate;\n  }\n}\n\nfunction AnnotationsDataLayerRenderer({ model }: SceneComponentProps<AnnotationsDataLayer>) {\n  const { isHidden } = model.useState();\n\n  if (isHidden) {\n    return null;\n  }\n\n  return <DataLayerControlSwitch layer={model} />;\n}\n","import { TimeRange } from '@grafana/data';\nimport { TimeZone } from '@grafana/schema';\nimport { sceneGraph } from './sceneGraph';\nimport { SceneObjectBase } from './SceneObjectBase';\nimport { SceneTimeRangeLike, SceneTimeRangeState } from './types';\n\n/**\n * @internal\n * Used by SceneTimeZoneOverride and main repo PanelTimeRange.\n * Not recommened to be used by plugins directly.\n */\nexport abstract class SceneTimeRangeTransformerBase<T extends SceneTimeRangeState>\n  extends SceneObjectBase<T>\n  implements SceneTimeRangeLike\n{\n  public constructor(state: T) {\n    super(state);\n\n    this.addActivationHandler(this._activationHandler);\n  }\n\n  protected getAncestorTimeRange() {\n    if (!this.parent || !this.parent.parent) {\n      throw new Error(typeof this + ' must be used within $timeRange scope');\n    }\n\n    return sceneGraph.getTimeRange(this.parent.parent);\n  }\n\n  private _activationHandler = () => {\n    const ancestorTimeRange = this.getAncestorTimeRange();\n\n    this.ancestorTimeRangeChanged(ancestorTimeRange.state);\n\n    this._subs.add(ancestorTimeRange.subscribeToState((s) => this.ancestorTimeRangeChanged(s)));\n  };\n\n  protected abstract ancestorTimeRangeChanged(timeRange: SceneTimeRangeState): void;\n\n  public getTimeZone(): TimeZone {\n    return this.getAncestorTimeRange().getTimeZone();\n  }\n\n  public onTimeRangeChange(timeRange: TimeRange): void {\n    this.getAncestorTimeRange().onTimeRangeChange(timeRange);\n  }\n\n  public onTimeZoneChange(timeZone: string): void {\n    this.getAncestorTimeRange().onTimeZoneChange(timeZone);\n  }\n\n  public onRefresh(): void {\n    this.getAncestorTimeRange().onRefresh();\n  }\n}\n","import { TimeZone } from '@grafana/schema';\nimport { SceneTimeRangeLike, SceneTimeRangeState } from './types';\nimport { SceneTimeRangeTransformerBase } from './SceneTimeRangeTransformerBase';\nimport { getDefaultTimeRange } from '@grafana/data';\nimport { evaluateTimeRange } from '../utils/evaluateTimeRange';\n\ninterface SceneTimeZoneOverrideState extends SceneTimeRangeState {\n  timeZone: TimeZone;\n}\n\nexport class SceneTimeZoneOverride\n  extends SceneTimeRangeTransformerBase<SceneTimeZoneOverrideState>\n  implements SceneTimeRangeLike\n{\n  public constructor(state: Omit<SceneTimeZoneOverrideState, 'from' | 'to' | 'value'>) {\n    super({\n      ...state,\n      timeZone: state.timeZone,\n      // We set a default time range here. It will be overwritten on activation based on ancestor time range.\n      from: 'now-6h',\n      to: 'now',\n      value: getDefaultTimeRange(),\n    });\n  }\n\n  protected ancestorTimeRangeChanged(timeRange: SceneTimeRangeState): void {\n    this.setState({\n      ...timeRange,\n      timeZone: this.state.timeZone,\n      value: evaluateTimeRange(\n        timeRange.from,\n        timeRange.to,\n        this.state.timeZone,\n        timeRange.fiscalYearStartMonth,\n        timeRange.UNSAFE_nowDelay\n      ),\n    });\n  }\n\n  public getTimeZone(): TimeZone {\n    return this.state.timeZone;\n  }\n\n  public onTimeZoneChange(timeZone: string): void {\n    this.setState({\n      timeZone,\n      value: evaluateTimeRange(\n        this.state.from,\n        this.state.to,\n        this.state.timeZone,\n        this.getAncestorTimeRange().state.fiscalYearStartMonth,\n        this.state.UNSAFE_nowDelay\n      ),\n    });\n  }\n}\n","import { Observable } from 'rxjs';\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneObjectRef } from '../core/SceneObjectRef';\nimport { SceneDataState, SceneDataProvider, SceneDataProviderResult } from '../core/types';\n\nexport interface DataProviderSharerState extends SceneDataState {\n  source: SceneObjectRef<SceneDataProvider>;\n}\n\nexport class DataProviderProxy extends SceneObjectBase<DataProviderSharerState> implements SceneDataProvider {\n  public constructor(state: DataProviderSharerState) {\n    super({\n      source: state.source,\n      data: state.source.resolve().state.data,\n    });\n\n    this.addActivationHandler(() => {\n      this._subs.add(\n        this.state.source.resolve().subscribeToState((newState, oldState) => {\n          if (newState.data !== oldState.data) {\n            this.setState({ data: newState.data });\n          }\n        })\n      );\n    });\n  }\n\n  public setContainerWidth(width: number) {\n    this.state.source.resolve().setContainerWidth?.(width);\n  }\n\n  public isDataReadyToDisplay() {\n    return this.state.source.resolve().isDataReadyToDisplay?.() ?? true;\n  }\n\n  public cancelQuery() {\n    this.state.source.resolve().cancelQuery?.();\n  }\n\n  public getResultsStream(): Observable<SceneDataProviderResult> {\n    return this.state.source.resolve().getResultsStream();\n  }\n}\n","import React from 'react';\nimport { DataFrame } from '@grafana/data';\nimport { Observable, ReplaySubject, Unsubscribable } from 'rxjs';\nimport { emptyPanelData } from '../core/SceneDataNode';\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport {\n  SceneComponentProps,\n  SceneDataLayerProvider,\n  SceneDataLayerProviderState,\n  SceneDataProviderResult,\n} from '../core/types';\nimport { DataLayersMerger } from './DataLayersMerger';\nimport { setBaseClassState } from '../utils/utils';\n\nexport abstract class SceneDataLayerSetBase<T extends SceneDataLayerProviderState>\n  extends SceneObjectBase<T>\n  implements SceneDataLayerProvider\n{\n  /** Mark it as a data layer */\n  public isDataLayer: true = true;\n\n  /**\n   * Subscription to query results. Should be set when layer runs a query.\n   */\n  protected querySub?: Unsubscribable;\n\n  /**\n   * Subject to emit results to.\n   */\n  private _results = new ReplaySubject<SceneDataProviderResult>(1);\n  private _dataLayersMerger = new DataLayersMerger();\n\n  protected subscribeToAllLayers(layers: SceneDataLayerProvider[]) {\n    if (layers.length > 0) {\n      this.querySub = this._dataLayersMerger.getMergedStream(layers).subscribe(this._onLayerUpdateReceived.bind(this));\n    } else {\n      this._results.next({ origin: this, data: emptyPanelData });\n      this.setStateHelper({ data: emptyPanelData });\n    }\n  }\n\n  private _onLayerUpdateReceived(results: Iterable<SceneDataProviderResult>) {\n    let series: DataFrame[] = [];\n\n    for (const result of results) {\n      if (result.data?.series) {\n        series = series.concat(result.data.series);\n      }\n    }\n\n    const combinedData = { ...emptyPanelData, series: series };\n\n    this._results.next({ origin: this, data: combinedData });\n    this.setStateHelper({ data: combinedData });\n  }\n\n  public getResultsStream(): Observable<SceneDataProviderResult> {\n    return this._results;\n  }\n\n  public cancelQuery() {\n    this.querySub?.unsubscribe();\n  }\n\n  /**\n   * This helper function is to counter the contravariance of setState\n   */\n  private setStateHelper(state: Partial<SceneDataLayerProviderState>) {\n    setBaseClassState<SceneDataLayerProviderState>(this, state);\n  }\n}\n\nexport interface SceneDataLayersSetState extends SceneDataLayerProviderState {\n  layers: SceneDataLayerProvider[];\n}\n\nexport class SceneDataLayerSet\n  extends SceneDataLayerSetBase<SceneDataLayersSetState>\n  implements SceneDataLayerProvider\n{\n  public constructor(state: Partial<SceneDataLayersSetState>) {\n    super({\n      name: state.name ?? 'Data layers',\n      layers: state.layers ?? [],\n    });\n\n    this.addActivationHandler(() => this._onActivate());\n  }\n\n  private _onActivate() {\n    this._subs.add(\n      this.subscribeToState((newState, oldState) => {\n        if (newState.layers !== oldState.layers) {\n          this.querySub?.unsubscribe();\n          this.subscribeToAllLayers(newState.layers);\n        }\n      })\n    );\n\n    this.subscribeToAllLayers(this.state.layers);\n\n    return () => {\n      this.querySub?.unsubscribe();\n    };\n  }\n\n  public static Component = ({ model }: SceneComponentProps<SceneDataLayerSet>) => {\n    const { layers } = model.useState();\n\n    return (\n      <>\n        {layers.map((layer) => (\n          <layer.Component model={layer} key={layer.state.key} />\n        ))}\n      </>\n    );\n  };\n}\n","import { DataTopic, DataTransformerConfig, LoadingState, PanelData, transformDataFrame } from '@grafana/data';\nimport { toDataQueryError } from '@grafana/runtime';\nimport { catchError, forkJoin, map, of, ReplaySubject, Unsubscribable } from 'rxjs';\nimport { sceneGraph } from '../core/sceneGraph';\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { CustomTransformerDefinition, SceneDataProvider, SceneDataProviderResult, SceneDataState } from '../core/types';\nimport { VariableDependencyConfig } from '../variables/VariableDependencyConfig';\nimport { SceneDataLayerSet } from './SceneDataLayerSet';\n\nexport interface SceneDataTransformerState extends SceneDataState {\n  /**\n   * Array of standard transformation configs and custom transform operators\n   */\n  transformations: Array<DataTransformerConfig | CustomTransformerDefinition>;\n}\n\n/**\n * You can use this as a $data object. It can either transform an inner $data DataProvider or if that is not set it will\n * subscribe to a DataProvider higher up in the scene graph and transform its data.\n *\n * The transformations array supports custom (runtime defined) transformation as well as declarative core transformations.\n * You can manually re-process the transformations by calling reprocessTransformations(). This is useful if you have\n * transformations that depend on other scene object states.\n */\nexport class SceneDataTransformer extends SceneObjectBase<SceneDataTransformerState> implements SceneDataProvider {\n  private _transformSub?: Unsubscribable;\n  private _results = new ReplaySubject<SceneDataProviderResult>(1);\n  private _prevDataFromSource?: PanelData;\n\n  /**\n   * Scan transformations for variable usage and re-process transforms when a variable values change\n   */\n  protected _variableDependency: VariableDependencyConfig<SceneDataTransformerState> = new VariableDependencyConfig(\n    this,\n    {\n      statePaths: ['transformations'],\n      onReferencedVariableValueChanged: () => this.reprocessTransformations(),\n    }\n  );\n\n  public constructor(state: SceneDataTransformerState) {\n    super(state);\n\n    this.addActivationHandler(() => this.activationHandler());\n  }\n\n  private activationHandler() {\n    const sourceData = this.getSourceData();\n\n    this._subs.add(sourceData.subscribeToState((state) => this.transform(state.data)));\n\n    if (sourceData.state.data) {\n      this.transform(sourceData.state.data);\n    }\n\n    return () => {\n      if (this._transformSub) {\n        this._transformSub.unsubscribe();\n      }\n    };\n  }\n\n  private getSourceData(): SceneDataProvider {\n    if (this.state.$data) {\n      if (this.state.$data instanceof SceneDataLayerSet) {\n        throw new Error('SceneDataLayerSet can not be used as data provider for SceneDataTransformer.');\n      }\n      return this.state.$data;\n    }\n\n    if (!this.parent || !this.parent.parent) {\n      throw new Error('SceneDataTransformer must either have $data set on it or have a parent.parent with $data');\n    }\n\n    return sceneGraph.getData(this.parent.parent);\n  }\n\n  public setContainerWidth(width: number) {\n    if (this.state.$data && this.state.$data.setContainerWidth) {\n      this.state.$data.setContainerWidth(width);\n    }\n  }\n\n  public isDataReadyToDisplay() {\n    const dataObject = this.getSourceData();\n    if (dataObject.isDataReadyToDisplay) {\n      return dataObject.isDataReadyToDisplay();\n    }\n\n    return true;\n  }\n\n  public reprocessTransformations() {\n    this.transform(this.getSourceData().state.data, true);\n  }\n\n  public cancelQuery() {\n    this.getSourceData().cancelQuery?.();\n  }\n\n  public getResultsStream() {\n    return this._results;\n  }\n\n  public clone(withState?: Partial<SceneDataTransformerState>) {\n    const clone = super.clone(withState);\n\n    if (this._prevDataFromSource) {\n      clone['_prevDataFromSource'] = this._prevDataFromSource;\n    }\n\n    return clone;\n  }\n\n  private haveAlreadyTransformedData(data: PanelData) {\n    if (!this._prevDataFromSource) {\n      return false;\n    }\n\n    if (data === this._prevDataFromSource) {\n      return true;\n    }\n\n    const { series, annotations } = this._prevDataFromSource;\n\n    if (data.series === series && data.annotations === annotations) {\n      if (this.state.data && data.state !== this.state.data.state) {\n        this.setState({ data: { ...this.state.data, state: data.state } });\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n  private transform(data: PanelData | undefined, force = false) {\n    if (this.state.transformations.length === 0 || !data) {\n      this._prevDataFromSource = data;\n      this.setState({ data });\n\n      if (data) {\n        this._results.next({ origin: this, data });\n      }\n      return;\n    }\n\n    // Skip transform step if we have already transformed this data\n    if (!force && this.haveAlreadyTransformedData(data)) {\n      return;\n    }\n\n    const seriesTransformations = this.state.transformations\n      .filter((transformation) => {\n        if ('options' in transformation || 'topic' in transformation) {\n          return transformation.topic == null || transformation.topic === DataTopic.Series;\n        }\n\n        return true;\n      })\n      .map((transformation) => ('operator' in transformation ? transformation.operator : transformation));\n\n    const annotationsTransformations = this.state.transformations\n      .filter((transformation) => {\n        if ('options' in transformation || 'topic' in transformation) {\n          return transformation.topic === DataTopic.Annotations;\n        }\n\n        return false;\n      })\n      .map((transformation) => ('operator' in transformation ? transformation.operator : transformation));\n\n    if (this._transformSub) {\n      this._transformSub.unsubscribe();\n    }\n\n    const ctx = {\n      interpolate: (value: string) => {\n        return sceneGraph.interpolate(this, value, data.request?.scopedVars);\n      },\n    };\n\n    let streams = [transformDataFrame(seriesTransformations, data.series, ctx)];\n\n    if (data.annotations && data.annotations.length > 0 && annotationsTransformations.length > 0) {\n      streams.push(transformDataFrame(annotationsTransformations, data.annotations ?? []));\n    }\n\n    this._transformSub = forkJoin(streams)\n      .pipe(\n        map((values) => {\n          const transformedSeries = values[0];\n          const transformedAnnotations = values[1];\n\n          return {\n            ...data,\n            series: transformedSeries,\n            annotations: transformedAnnotations ?? data.annotations,\n          };\n        }),\n        catchError((err) => {\n          console.error('Error transforming data: ', err);\n          const sourceErr = this.getSourceData().state.data?.errors || [];\n\n          const transformationError = toDataQueryError(err);\n          transformationError.message = `Error transforming data: ${transformationError.message}`;\n\n          const result: PanelData = {\n            ...data,\n            state: LoadingState.Error,\n            // Combine transformation error with upstream errors\n            errors: [...sourceErr, transformationError],\n          };\n\n          return of(result);\n        })\n      )\n      .subscribe((transformedData) => {\n        this.setState({ data: transformedData });\n        this._results.next({ origin: this, data: transformedData });\n        this._prevDataFromSource = data;\n      });\n  }\n}\n","import React from 'react';\n\nimport { VariableHide } from '@grafana/data';\n\nimport { SceneObjectBase, useSceneObjectState } from '../../core/SceneObjectBase';\nimport { sceneGraph } from '../../core/sceneGraph';\nimport { ControlsLayout, SceneComponentProps, SceneObjectState } from '../../core/types';\nimport { SceneVariable, SceneVariableState } from '../types';\nimport { ControlsLabel } from '../../utils/ControlsLabel';\nimport { css } from '@emotion/css';\nimport { selectors } from '@grafana/e2e-selectors';\n\nexport interface VariableValueSelectorsState extends SceneObjectState {\n  layout?: ControlsLayout;\n}\n\nexport class VariableValueSelectors extends SceneObjectBase<VariableValueSelectorsState> {\n  public static Component = VariableValueSelectorsRenderer;\n}\n\nfunction VariableValueSelectorsRenderer({ model }: SceneComponentProps<VariableValueSelectors>) {\n  const variables = sceneGraph.getVariables(model)!.useState();\n\n  return (\n    <>\n      {variables.variables.map((variable) => (\n        <VariableValueSelectWrapper key={variable.state.key} variable={variable} layout={model.state.layout} />\n      ))}\n    </>\n  );\n}\n\ninterface VariableSelectProps {\n  layout?: ControlsLayout;\n  variable: SceneVariable;\n  /** To override hide from VariableValueSelectByName  */\n  showAlways?: boolean;\n  /** To provide an option to hide the label in the variable value selector */\n  hideLabel?: boolean;\n}\n\nexport function VariableValueSelectWrapper({ variable, layout, showAlways, hideLabel }: VariableSelectProps) {\n  const state = useSceneObjectState<SceneVariableState>(variable, { shouldActivateOrKeepAlive: true });\n\n  if (state.hide === VariableHide.hideVariable && !showAlways) {\n    return null;\n  }\n\n  if (layout === 'vertical') {\n    return (\n      <div className={verticalContainer} data-testid={selectors.pages.Dashboard.SubMenu.submenuItem}>\n        <VariableLabel variable={variable} layout={layout} hideLabel={hideLabel} />\n        <variable.Component model={variable} />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerStyle} data-testid={selectors.pages.Dashboard.SubMenu.submenuItem}>\n      <VariableLabel variable={variable} hideLabel={hideLabel} />\n      <variable.Component model={variable} />\n    </div>\n  );\n}\n\nfunction VariableLabel({ variable, layout, hideLabel }: VariableSelectProps) {\n  const { state } = variable;\n\n  if (variable.state.hide === VariableHide.hideLabel || hideLabel) {\n    return null;\n  }\n\n  const elementId = `var-${state.key}`;\n  const labelOrName = state.label ?? state.name;\n\n  return (\n    <ControlsLabel\n      htmlFor={elementId}\n      isLoading={state.loading}\n      onCancel={() => variable.onCancel?.()}\n      label={labelOrName}\n      error={state.error}\n      layout={layout}\n      description={state.description ?? undefined}\n    />\n  );\n}\n\nconst containerStyle = css({ display: 'flex' });\nconst verticalContainer = css({ display: 'flex', flexDirection: 'column' });\n","import React from 'react';\n\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { sceneGraph } from '../../core/sceneGraph';\nimport { ControlsLayout, SceneComponentProps, SceneObjectState } from '../../core/types';\nimport { VariableValueSelectWrapper } from './VariableValueSelectors';\n\nexport interface VariableValueControlState extends SceneObjectState {\n  layout?: ControlsLayout;\n  /** Render the specific select control for a variable */\n  variableName: string;\n  /** Hide the label in the variable value controller */\n  hideLabel?: boolean;\n}\n\nexport class VariableValueControl extends SceneObjectBase<VariableValueControlState> {\n  public static Component = VariableValueControlRenderer;\n}\n\nfunction VariableValueControlRenderer({ model }: SceneComponentProps<VariableValueControl>) {\n  const variable = sceneGraph.lookupVariable(model.state.variableName, model);\n  if (!variable) {\n    return null;\n  }\n\n  return (\n    <VariableValueSelectWrapper\n      key={variable.state.key}\n      variable={variable}\n      layout={model.state.layout}\n      showAlways={true}\n    />\n  );\n}\n","import { VariableRefresh } from '@grafana/data';\nimport { Unsubscribable } from 'rxjs';\nimport { sceneGraph } from '../../core/sceneGraph';\n\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneObject } from '../../core/types';\nimport { writeSceneLog } from '../../utils/writeSceneLog';\nimport {\n  SceneVariable,\n  SceneVariableDependencyConfigLike,\n  SceneVariables,\n  SceneVariableSetState,\n  SceneVariableValueChangedEvent,\n} from '../types';\nimport { VariableValueRecorder } from '../VariableValueRecorder';\n\nexport class SceneVariableSet extends SceneObjectBase<SceneVariableSetState> implements SceneVariables {\n  /** Variables that have changed in since the activation or since the first manual value change */\n  private _variablesThatHaveChanged = new Set<SceneVariable>();\n\n  /** Variables that are scheduled to be validated and updated */\n  private _variablesToUpdate = new Set<SceneVariable>();\n\n  /** Variables currently updating  */\n  private _updating = new Map<SceneVariable, VariableUpdateInProgress>();\n\n  private _variableValueRecorder = new VariableValueRecorder();\n\n  /**\n   * This makes sure SceneVariableSet's higher up in the chain notify us when parent level variables complete update batches.\n   **/\n  protected _variableDependency = new SceneVariableSetVariableDependencyHandler(\n    this._handleParentVariableUpdatesCompleted.bind(this)\n  );\n\n  public getByName(name: string): SceneVariable | undefined {\n    // TODO: Replace with index\n    return this.state.variables.find((x) => x.state.name === name);\n  }\n\n  public constructor(state: SceneVariableSetState) {\n    super(state);\n\n    this.addActivationHandler(this._onActivate);\n  }\n\n  /**\n   * Subscribes to child variable value changes, and starts the variable value validation process\n   */\n  private _onActivate = () => {\n    const timeRange = sceneGraph.getTimeRange(this);\n    // Subscribe to changes to child variables\n    this._subs.add(\n      this.subscribeToEvent(SceneVariableValueChangedEvent, (event) => this._handleVariableValueChanged(event.payload))\n    );\n\n    this._subs.add(\n      timeRange.subscribeToState(() => {\n        this._refreshTimeRangeBasedVariables();\n      })\n    );\n\n    // Subscribe to state changes\n    this._subs.add(this.subscribeToState(this._onStateChanged));\n\n    this._checkForVariablesThatChangedWhileInactive();\n\n    // Add all variables that need updating to queue\n    for (const variable of this.state.variables) {\n      if (this._variableNeedsUpdate(variable)) {\n        this._variablesToUpdate.add(variable);\n      }\n    }\n\n    this._updateNextBatch();\n\n    // Return deactivation handler;\n    return this._onDeactivate;\n  };\n\n  /**\n   * Add all variables that depend on the changed variable to the update queue\n   */\n  private _refreshTimeRangeBasedVariables() {\n    for (const variable of this.state.variables) {\n      if ('refresh' in variable.state && variable.state.refresh === VariableRefresh.onTimeRangeChanged) {\n        this._variablesToUpdate.add(variable);\n      }\n    }\n\n    this._updateNextBatch();\n  }\n\n  /**\n   * Cancel all currently running updates\n   */\n  private _onDeactivate = () => {\n    for (const update of this._updating.values()) {\n      update.subscription?.unsubscribe();\n    }\n\n    // Remember current variable values\n    for (const variable of this.state.variables) {\n      // if the current variable is not in queue to update and validate and not being actively updated then the value is ok\n      if (!this._variablesToUpdate.has(variable) && !this._updating.has(variable)) {\n        this._variableValueRecorder.recordCurrentValue(variable);\n      }\n    }\n\n    this._variablesToUpdate.clear();\n    this._updating.clear();\n  };\n\n  /**\n   * Look for new variables that need to be initialized\n   */\n  private _onStateChanged = (newState: SceneVariableSetState, oldState: SceneVariableSetState) => {\n    const variablesToUpdateCountStart = this._variablesToUpdate.size;\n\n    // Check for removed variables\n    for (const variable of oldState.variables) {\n      if (!newState.variables.includes(variable)) {\n        const updating = this._updating.get(variable);\n        if (updating?.subscription) {\n          updating.subscription.unsubscribe();\n        }\n        this._updating.delete(variable);\n        this._variablesToUpdate.delete(variable);\n      }\n    }\n\n    // Check for new variables\n    for (const variable of newState.variables) {\n      if (!oldState.variables.includes(variable)) {\n        if (this._variableNeedsUpdate(variable)) {\n          this._variablesToUpdate.add(variable);\n        }\n      }\n    }\n\n    // Only start a new batch if there was no batch already running\n    if (variablesToUpdateCountStart === 0 && this._variablesToUpdate.size > 0) {\n      this._updateNextBatch();\n    }\n  };\n\n  /**\n   * If variables changed while in in-active state we don't get any change events, so we need to check for that here.\n   */\n  private _checkForVariablesThatChangedWhileInactive() {\n    if (!this._variableValueRecorder.hasValues()) {\n      return;\n    }\n\n    for (const variable of this.state.variables) {\n      if (this._variableValueRecorder.hasValueChanged(variable)) {\n        writeVariableTraceLog(variable, 'Changed while in-active');\n        this._addDependentVariablesToUpdateQueue(variable);\n      }\n    }\n  }\n\n  private _variableNeedsUpdate(variable: SceneVariable): boolean {\n    if (variable.isLazy) {\n      return false;\n    }\n\n    if (!variable.validateAndUpdate) {\n      return false;\n    }\n\n    // If we have recorded valid value (even if it has changed since we do not need to re-validate this variable)\n    if (this._variableValueRecorder.hasRecordedValue(variable)) {\n      writeVariableTraceLog(variable, 'Skipping updateAndValidate current value valid');\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * This loops through variablesToUpdate and update all that can.\n   * If one has a dependency that is currently in variablesToUpdate it will be skipped for now.\n   */\n  private _updateNextBatch() {\n    for (const variable of this._variablesToUpdate) {\n      if (!variable.validateAndUpdate) {\n        throw new Error('Variable added to variablesToUpdate but does not have validateAndUpdate');\n      }\n\n      // Ignore it if it's already started\n      if (this._updating.has(variable)) {\n        continue;\n      }\n\n      // Wait for variables that has dependencies that also needs updates\n      if (sceneGraph.hasVariableDependencyInLoadingState(variable)) {\n        continue;\n      }\n\n      const variableToUpdate: VariableUpdateInProgress = {\n        variable,\n      };\n\n      this._updating.set(variable, variableToUpdate);\n      writeVariableTraceLog(variable, 'updateAndValidate started');\n\n      variableToUpdate.subscription = variable.validateAndUpdate().subscribe({\n        next: () => this._validateAndUpdateCompleted(variable),\n        complete: () => this._validateAndUpdateCompleted(variable),\n        error: (err) => this._handleVariableError(variable, err),\n      });\n    }\n  }\n\n  /**\n   * A variable has completed its update process. This could mean that variables that depend on it can now be updated in turn.\n   */\n  private _validateAndUpdateCompleted(variable: SceneVariable) {\n    if (!this._updating.has(variable)) {\n      return;\n    }\n\n    const update = this._updating.get(variable);\n    update?.subscription?.unsubscribe();\n\n    this._updating.delete(variable);\n    this._variablesToUpdate.delete(variable);\n\n    writeVariableTraceLog(variable, 'updateAndValidate completed');\n\n    this._notifyDependentSceneObjects(variable);\n    this._updateNextBatch();\n  }\n\n  public cancel(variable: SceneVariable) {\n    const update = this._updating.get(variable);\n    update?.subscription?.unsubscribe();\n\n    this._updating.delete(variable);\n    this._variablesToUpdate.delete(variable);\n  }\n\n  private _handleVariableError(variable: SceneVariable, err: Error) {\n    const update = this._updating.get(variable);\n    update?.subscription?.unsubscribe();\n\n    this._updating.delete(variable);\n    this._variablesToUpdate.delete(variable);\n\n    variable.setState({ loading: false, error: err.message });\n\n    console.error('SceneVariableSet updateAndValidate error', err);\n\n    writeVariableTraceLog(variable, 'updateAndValidate error', err);\n\n    this._notifyDependentSceneObjects(variable);\n    this._updateNextBatch();\n  }\n\n  private _handleVariableValueChanged(variableThatChanged: SceneVariable) {\n    this._variablesThatHaveChanged.add(variableThatChanged);\n    this._addDependentVariablesToUpdateQueue(variableThatChanged);\n\n    // Ignore this change if it is currently updating\n    if (!this._updating.has(variableThatChanged)) {\n      this._updateNextBatch();\n      this._notifyDependentSceneObjects(variableThatChanged);\n    }\n  }\n\n  /**\n   * This is called by any parent level variable set to notify scene that an update batch is completed.\n   * This is the main mechanism lower level variable set's react to changes on higher levels.\n   */\n  private _handleParentVariableUpdatesCompleted(variable: SceneVariable, hasChanged: boolean) {\n    // First loop through changed variables and add any of our variables that depend on the higher level variable to the update queue\n    if (hasChanged) {\n      this._addDependentVariablesToUpdateQueue(variable);\n    }\n\n    // If we have variables to update but none are currently updating kick of a new update batch\n    if (this._variablesToUpdate.size > 0 && this._updating.size === 0) {\n      this._updateNextBatch();\n    }\n  }\n\n  private _addDependentVariablesToUpdateQueue(variableThatChanged: SceneVariable) {\n    for (const otherVariable of this.state.variables) {\n      if (otherVariable.variableDependency) {\n        if (otherVariable.variableDependency.hasDependencyOn(variableThatChanged.state.name)) {\n          writeVariableTraceLog(otherVariable, 'Added to update queue, dependant variable value changed');\n\n          if (this._updating.has(otherVariable) && otherVariable.onCancel) {\n            otherVariable.onCancel();\n          }\n\n          this._variablesToUpdate.add(otherVariable);\n        }\n      }\n    }\n  }\n\n  /**\n   * Walk scene object graph and update all objects that depend on variables that have changed\n   */\n  private _notifyDependentSceneObjects(variable: SceneVariable) {\n    if (!this.parent) {\n      return;\n    }\n\n    this._traverseSceneAndNotify(this.parent, variable, this._variablesThatHaveChanged.has(variable));\n    this._variablesThatHaveChanged.delete(variable);\n  }\n\n  /**\n   * Recursivly walk the full scene object graph and notify all objects with dependencies that include any of changed variables\n   */\n  private _traverseSceneAndNotify(sceneObject: SceneObject, variable: SceneVariable, hasChanged: boolean) {\n    // No need to notify variables under this SceneVariableSet\n    if (this === sceneObject) {\n      return;\n    }\n\n    // Skip non active scene objects\n    if (!sceneObject.isActive) {\n      return;\n    }\n\n    // If we find a nested SceneVariableSet that has a variable with the same name we stop the traversal\n    if (sceneObject.state.$variables && sceneObject.state.$variables !== this) {\n      const localVar = sceneObject.state.$variables.getByName(variable.state.name);\n      if (localVar) {\n        return;\n      }\n    }\n\n    if (sceneObject.variableDependency) {\n      sceneObject.variableDependency.variableUpdateCompleted(variable, hasChanged);\n    }\n\n    sceneObject.forEachChild((child) => this._traverseSceneAndNotify(child, variable, hasChanged));\n  }\n\n  /**\n   * Return true if variable is waiting to update or currently updating.\n   * It also returns true if a dependency of the variable is loading.\n   *\n   * For example if C depends on variable B which depends on variable A and A is loading this returns true for variable C and B.\n   */\n  public isVariableLoadingOrWaitingToUpdate(variable: SceneVariable) {\n    if (variable.isAncestorLoading && variable.isAncestorLoading()) {\n      return true;\n    }\n\n    if (this._variablesToUpdate.has(variable) || this._updating.has(variable)) {\n      return true;\n    }\n\n    // Last scenario is to check the variable's own dependencies as well\n    return sceneGraph.hasVariableDependencyInLoadingState(variable);\n  }\n}\n\nexport interface VariableUpdateInProgress {\n  variable: SceneVariable;\n  subscription?: Unsubscribable;\n}\n\nfunction writeVariableTraceLog(variable: SceneVariable, message: string, err?: Error) {\n  if (err) {\n    writeSceneLog('SceneVariableSet', `Variable[${variable.state.name}]: ${message}`, err);\n  } else {\n    writeSceneLog('SceneVariableSet', `Variable[${variable.state.name}]: ${message}`);\n  }\n}\n\nclass SceneVariableSetVariableDependencyHandler implements SceneVariableDependencyConfigLike {\n  public constructor(private _variableUpdatesCompleted: (variable: SceneVariable, hasChanged: boolean) => void) {}\n\n  private _emptySet = new Set<string>();\n\n  public getNames(): Set<string> {\n    return this._emptySet;\n  }\n\n  public hasDependencyOn(name: string): boolean {\n    return false;\n  }\n\n  public variableUpdateCompleted(variable: SceneVariable, hasChanged: boolean): void {\n    this._variableUpdatesCompleted(variable, hasChanged);\n  }\n}\n","import { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneVariable, SceneVariableState, VariableValue } from '../types';\n\nexport interface ConstantVariableState extends SceneVariableState {\n  value: VariableValue;\n}\n\nexport class ConstantVariable\n  extends SceneObjectBase<ConstantVariableState>\n  implements SceneVariable<ConstantVariableState>\n{\n  public constructor(initialState: Partial<ConstantVariableState>) {\n    super({\n      type: 'constant',\n      value: '',\n      name: '',\n      ...initialState,\n      skipUrlSync: true,\n    });\n  }\n\n  public getValue(): VariableValue {\n    return this.state.value;\n  }\n}\n","import { Observable, of } from 'rxjs';\n\nimport { SceneComponentProps } from '../../core/types';\nimport { VariableDependencyConfig } from '../VariableDependencyConfig';\nimport { renderSelectForVariable } from '../components/VariableValueSelect';\nimport { VariableValueOption } from '../types';\n\nimport { MultiValueVariable, MultiValueVariableState, VariableGetOptionsArgs } from './MultiValueVariable';\nimport { sceneGraph } from '../../core/sceneGraph';\n\nexport interface CustomVariableState extends MultiValueVariableState {\n  query: string;\n}\n\nexport class CustomVariable extends MultiValueVariable<CustomVariableState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    statePaths: ['query'],\n  });\n\n  public constructor(initialState: Partial<CustomVariableState>) {\n    super({\n      type: 'custom',\n      query: '',\n      value: '',\n      text: '',\n      options: [],\n      name: '',\n      ...initialState,\n    });\n  }\n\n  public getValueOptions(args: VariableGetOptionsArgs): Observable<VariableValueOption[]> {\n    const interpolated = sceneGraph.interpolate(this, this.state.query);\n    const match = interpolated.match(/(?:\\\\,|[^,])+/g) ?? [];\n\n    const options = match.map((text) => {\n      text = text.replace(/\\\\,/g, ',');\n      const textMatch = /^(.+)\\s:\\s(.+)$/g.exec(text) ?? [];\n      if (textMatch.length === 3) {\n        const [, key, value] = textMatch;\n        return { label: key.trim(), value: value.trim() };\n      } else {\n        return { label: text.trim(), value: text.trim() };\n      }\n    });\n\n    return of(options);\n  }\n\n  public static Component = ({ model }: SceneComponentProps<MultiValueVariable>) => {\n    return renderSelectForVariable(model);\n  };\n}\n","import { Observable, of } from 'rxjs';\n\nimport { stringToJsRegex, DataSourceInstanceSettings } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nimport { sceneGraph } from '../../core/sceneGraph';\nimport { SceneComponentProps } from '../../core/types';\nimport { VariableDependencyConfig } from '../VariableDependencyConfig';\nimport { renderSelectForVariable } from '../components/VariableValueSelect';\nimport { VariableValueOption } from '../types';\n\nimport { MultiValueVariable, MultiValueVariableState, VariableGetOptionsArgs } from './MultiValueVariable';\n\nexport interface DataSourceVariableState extends MultiValueVariableState {\n  /**\n   * Include all data source instances with this plugin id\n   */\n  pluginId: string;\n  /**\n   * Filter data source instances based on name\n   */\n  regex: string;\n  /**\n   * For backwards compatability with old dashboards, will likely be removed\n   */\n  defaultOptionEnabled?: boolean;\n}\n\nexport class DataSourceVariable extends MultiValueVariable<DataSourceVariableState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    statePaths: ['regex'],\n  });\n\n  public constructor(initialState: Partial<DataSourceVariableState>) {\n    super({\n      type: 'datasource',\n      value: '',\n      text: '',\n      options: [],\n      name: '',\n      regex: '',\n      pluginId: '',\n      ...initialState,\n    });\n  }\n\n  public getValueOptions(args: VariableGetOptionsArgs): Observable<VariableValueOption[]> {\n    if (!this.state.pluginId) {\n      return of([]);\n    }\n\n    const dataSources = getDataSourceSrv().getList({ metrics: true, variables: false, pluginId: this.state.pluginId });\n\n    let regex;\n    if (this.state.regex) {\n      const interpolated = sceneGraph.interpolate(this, this.state.regex, undefined, 'regex');\n      regex = stringToJsRegex(interpolated);\n    }\n\n    const options: VariableValueOption[] = [];\n\n    for (let i = 0; i < dataSources.length; i++) {\n      const source = dataSources[i];\n\n      if (isValid(source, regex)) {\n        options.push({ label: source.name, value: source.uid });\n      }\n\n      if (this.state.defaultOptionEnabled && isDefault(source, regex)) {\n        options.push({ label: 'default', value: 'default' });\n      }\n    }\n\n    if (options.length === 0) {\n      this.setState({ error: 'No data sources found' });\n    } else if (this.state.error) {\n      this.setState({ error: null });\n    }\n\n    return of(options);\n  }\n\n  public static Component = ({ model }: SceneComponentProps<MultiValueVariable>) => {\n    return renderSelectForVariable(model);\n  };\n}\n\nfunction isValid(source: DataSourceInstanceSettings, regex?: RegExp) {\n  if (!regex) {\n    return true;\n  }\n\n  return regex.exec(source.name);\n}\n\nfunction isDefault(source: DataSourceInstanceSettings, regex?: RegExp) {\n  if (!source.isDefault) {\n    return false;\n  }\n\n  if (!regex) {\n    return true;\n  }\n\n  return regex.exec('default');\n}\n","export interface TreeNode {\n  name: string;\n  children: TreeNode[];\n}\n\n/*\n *  Builds a nested tree like\n *  [\n *    {\n *      name: 'A',\n *      children: [\n *        { name: 'AA', children: [] },\n *        { name: 'AB', children: [] },\n *      ]\n *    }\n *  ]\n */\nfunction buildMetricTree(parent: string, depth: number): TreeNode[] {\n  const chars = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'];\n  const children: TreeNode[] = [];\n\n  if (depth > 5) {\n    return [];\n  }\n\n  for (const letter of chars) {\n    const nodeName = `${parent}${letter}`;\n    children.push({\n      name: nodeName,\n      children: buildMetricTree(nodeName, depth + 1),\n    });\n  }\n\n  return children;\n}\n\nfunction queryTree(children: TreeNode[], query: string[], queryIndex: number): TreeNode[] {\n  if (queryIndex >= query.length) {\n    return children;\n  }\n\n  if (query[queryIndex] === '*') {\n    return children;\n  }\n\n  const nodeQuery = query[queryIndex];\n  let result: TreeNode[] = [];\n  let namesToMatch = [nodeQuery];\n\n  // handle glob queries\n  if (nodeQuery.startsWith('{')) {\n    namesToMatch = nodeQuery.replace(/\\{|\\}/g, '').split(',');\n  }\n\n  for (const node of children) {\n    for (const nameToMatch of namesToMatch) {\n      if (nameToMatch.indexOf('*') !== -1) {\n        const pattern = nameToMatch.replace('*', '');\n        const regex = new RegExp(`^${pattern}.*`, 'gi');\n        if (regex.test(node.name)) {\n          result = result.concat(queryTree([node], query, queryIndex + 1));\n        }\n      } else if (node.name === nameToMatch) {\n        result = result.concat(queryTree(node.children, query, queryIndex + 1));\n      }\n    }\n  }\n\n  return result;\n}\n\nexport function queryMetricTree(query: string): TreeNode[] {\n  if (query.indexOf('value') === 0) {\n    return [{ name: query, children: [] }];\n  }\n\n  const children = buildMetricTree('', 0);\n  return queryTree(children, query.split('.'), 0);\n}\n","import { Observable, Subject } from 'rxjs';\n\nimport { sceneGraph } from '../../core/sceneGraph';\nimport { SceneComponentProps } from '../../core/types';\nimport { queryMetricTree } from '../../utils/metricTree';\nimport { VariableDependencyConfig } from '../VariableDependencyConfig';\nimport { renderSelectForVariable } from '../components/VariableValueSelect';\nimport { VariableValueOption } from '../types';\n\nimport { MultiValueVariable, MultiValueVariableState, VariableGetOptionsArgs } from './MultiValueVariable';\nimport { VariableRefresh } from '@grafana/data';\nimport { getClosest } from '../../core/sceneGraph/utils';\nimport { SceneVariableSet } from '../sets/SceneVariableSet';\nimport { SceneQueryControllerEntry } from '../../behaviors/SceneQueryController';\n\nexport interface TestVariableState extends MultiValueVariableState {\n  query: string;\n  delayMs?: number;\n  issuedQuery?: string;\n  refresh?: VariableRefresh;\n  throwError?: string;\n  optionsToReturn?: VariableValueOption[];\n  updateOptions?: boolean;\n}\n\n/**\n * This variable is only designed for unit tests and potentially e2e tests.\n */\nexport class TestVariable extends MultiValueVariable<TestVariableState> {\n  private completeUpdate = new Subject<number>();\n  public isGettingValues = true;\n  public getValueOptionsCount = 0;\n  isLazy = false;\n\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    statePaths: ['query'],\n  });\n\n  public constructor(initialState: Partial<TestVariableState>, isLazy = false) {\n    super({\n      type: 'custom',\n      name: 'Test',\n      value: 'Value',\n      text: 'Text',\n      query: 'Query',\n      options: [],\n      refresh: VariableRefresh.onDashboardLoad,\n      updateOptions: true,\n      ...initialState,\n    });\n    this.isLazy = isLazy;\n  }\n\n  public getValueOptions(args: VariableGetOptionsArgs): Observable<VariableValueOption[]> {\n    const { delayMs } = this.state;\n\n    this.getValueOptionsCount += 1;\n\n    const queryController = sceneGraph.getQueryController(this);\n\n    return new Observable<VariableValueOption[]>((observer) => {\n      const queryEntry: SceneQueryControllerEntry = {\n        type: 'variable',\n        origin: this,\n        cancel: () => observer.complete(),\n      };\n\n      if (queryController) {\n        queryController.queryStarted(queryEntry);\n      }\n\n      this.setState({ loading: true });\n\n      if (this.state.throwError) {\n        throw new Error(this.state.throwError);\n      }\n\n      const interpolatedQuery = sceneGraph.interpolate(this, this.state.query);\n      const options = this.getOptions(interpolatedQuery);\n\n      const sub = this.completeUpdate.subscribe({\n        next: () => {\n          const newState: Partial<TestVariableState> = { issuedQuery: interpolatedQuery, loading: false };\n\n          if (this.state.updateOptions) {\n            newState.options = options;\n          }\n\n          this.setState(newState);\n          observer.next(options);\n          observer.complete();\n        },\n      });\n\n      let timeout: number | undefined;\n      if (delayMs) {\n        timeout = window.setTimeout(() => this.signalUpdateCompleted(), delayMs);\n      } else if (delayMs === 0) {\n        this.signalUpdateCompleted();\n      }\n\n      this.isGettingValues = true;\n\n      return () => {\n        sub.unsubscribe();\n        window.clearTimeout(timeout);\n        this.isGettingValues = false;\n\n        if (this.state.loading) {\n          this.setState({ loading: false });\n        }\n\n        if (queryController) {\n          queryController.queryCompleted(queryEntry);\n        }\n      };\n    });\n  }\n\n  public cancel() {\n    const sceneVarSet = getClosest(this, (s) => (s instanceof SceneVariableSet ? s : undefined));\n    sceneVarSet?.cancel(this);\n  }\n\n  private getOptions(interpolatedQuery: string) {\n    if (this.state.optionsToReturn) {\n      return this.state.optionsToReturn;\n    }\n\n    return queryMetricTree(interpolatedQuery).map((x) => ({ label: x.name, value: x.name }));\n  }\n\n  /** Useful from tests */\n  public signalUpdateCompleted() {\n    this.completeUpdate.next(1);\n  }\n\n  public static Component = ({ model }: SceneComponentProps<MultiValueVariable>) => {\n    return renderSelectForVariable(model);\n  };\n}\n","import React, { useCallback } from 'react';\n\nimport { AutoSizeInput } from '@grafana/ui';\n\nimport { SceneComponentProps } from '../../core/types';\nimport { TextBoxVariable } from '../variants/TextBoxVariable';\n\nexport function VariableValueInput({ model }: SceneComponentProps<TextBoxVariable>) {\n  const { value, key, loading } = model.useState();\n\n  const onBlur = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      model.setValue(e.currentTarget.value);\n    },\n    [model]\n  );\n\n  const onKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Enter') {\n        model.setValue(e.currentTarget.value);\n      }\n    },\n    [model]\n  );\n\n  return (\n    <AutoSizeInput\n      id={key}\n      placeholder=\"Enter value\"\n      minWidth={15}\n      value={value}\n      loading={loading}\n      onBlur={onBlur}\n      onKeyDown={onKeyDown}\n    />\n  );\n}\n","import React from 'react';\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneComponentProps, SceneObjectUrlValues } from '../../core/types';\nimport { SceneObjectUrlSyncConfig } from '../../services/SceneObjectUrlSyncConfig';\nimport { VariableValueInput } from '../components/VariableValueInput';\nimport { SceneVariable, SceneVariableState, SceneVariableValueChangedEvent, VariableValue } from '../types';\n\nexport interface TextBoxVariableState extends SceneVariableState {\n  value: string;\n}\n\nexport class TextBoxVariable\n  extends SceneObjectBase<TextBoxVariableState>\n  implements SceneVariable<TextBoxVariableState>\n{\n  public constructor(initialState: Partial<TextBoxVariableState>) {\n    super({\n      type: 'textbox',\n      value: '',\n      name: '',\n      ...initialState,\n    });\n\n    this._urlSync = new SceneObjectUrlSyncConfig(this, { keys: () => [this.getKey()] });\n  }\n\n  public getValue(): VariableValue {\n    return this.state.value;\n  }\n\n  public setValue(newValue: string) {\n    if (newValue !== this.state.value) {\n      this.setState({ value: newValue });\n      this.publishEvent(new SceneVariableValueChangedEvent(this), true);\n    }\n  }\n\n  private getKey(): string {\n    return `var-${this.state.name}`;\n  }\n\n  public getUrlState() {\n    return { [this.getKey()]: this.state.value };\n  }\n\n  public updateFromUrl(values: SceneObjectUrlValues) {\n    const val = values[this.getKey()];\n\n    if (typeof val === 'string') {\n      this.setValue(val);\n    }\n  }\n\n  public static Component = ({ model }: SceneComponentProps<TextBoxVariable>) => {\n    return <VariableValueInput model={model} />;\n  };\n}\n","import { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { sceneGraph } from '../../core/sceneGraph';\nimport { SceneVariable, SceneVariableState, VariableValue } from '../types';\n\nexport interface LocalValueVariableState extends SceneVariableState {\n  value: VariableValue;\n  text: VariableValue;\n\n  // Indicate whether or not this variable is sourced from a multi-value variable.\n  // Introduces for a backwards compatibility with the old variable system, to properly support interpolation in SQL data sources.\n  isMulti?: boolean;\n  includeAll?: boolean;\n}\n\n/**\n * This is a special type of variable that is used for repeating panels and layouts to create a local scoped value for a variable\n * that exists in a ancestor SceneVariableSet.\n */\nexport class LocalValueVariable\n  extends SceneObjectBase<LocalValueVariableState>\n  implements SceneVariable<LocalValueVariableState>\n{\n  public constructor(initialState: Partial<LocalValueVariableState>) {\n    super({\n      type: 'system',\n      value: '',\n      text: '',\n      name: '',\n      ...initialState,\n      skipUrlSync: true,\n    });\n  }\n\n  public getValue(): VariableValue {\n    return this.state.value;\n  }\n\n  public getValueText(): string {\n    return this.state.text.toString();\n  }\n\n  /**\n   * Checks the ancestor of our parent SceneVariableSet for loading state of a variable with the same name\n   * This function is unit tested from SceneVariableSet tests.\n   */\n  public isAncestorLoading(): boolean {\n    // Parent (SceneVariableSet) -> Parent (The object that has our parent set) -> Parent (scope we need to access our sets ancestor)\n    const ancestorScope = this.parent?.parent?.parent;\n    if (!ancestorScope) {\n      throw new Error('LocalValueVariable requires a parent SceneVariableSet that has an ancestor SceneVariableSet');\n    }\n\n    const set = sceneGraph.getVariables(ancestorScope);\n    const parentVar = sceneGraph.lookupVariable(this.state.name, ancestorScope);\n    if (set && parentVar) {\n      return set.isVariableLoadingOrWaitingToUpdate(parentVar);\n    }\n\n    return false;\n  }\n}\n","import { rangeUtil, SelectableValue } from '@grafana/data';\nimport { VariableRefresh } from '@grafana/schema';\nimport { Select } from '@grafana/ui';\nimport React from 'react';\nimport { Observable, of } from 'rxjs';\nimport { sceneGraph } from '../../core/sceneGraph';\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneComponentProps, SceneObjectUrlValues } from '../../core/types';\nimport { SceneObjectUrlSyncConfig } from '../../services/SceneObjectUrlSyncConfig';\nimport { AUTO_VARIABLE_TEXT, AUTO_VARIABLE_VALUE } from '../constants';\nimport {\n  SceneVariable,\n  SceneVariableState,\n  SceneVariableValueChangedEvent,\n  ValidateAndUpdateResult,\n  VariableValue,\n} from '../types';\n\nexport interface IntervalVariableState extends SceneVariableState {\n  intervals: string[];\n  value: string;\n  autoEnabled: boolean;\n  autoMinInterval: string;\n  autoStepCount: number;\n  refresh: VariableRefresh;\n}\n\nexport class IntervalVariable\n  extends SceneObjectBase<IntervalVariableState>\n  implements SceneVariable<IntervalVariableState>\n{\n  public constructor(initialState: Partial<IntervalVariableState>) {\n    super({\n      type: 'interval',\n      value: '',\n      intervals: ['1m', '10m', '30m', '1h', '6h', '12h', '1d', '7d', '14d', '30d'],\n      name: '',\n      autoStepCount: 30,\n      autoMinInterval: '10s',\n      autoEnabled: false,\n      refresh: VariableRefresh.onTimeRangeChanged,\n      ...initialState,\n    });\n\n    this._urlSync = new SceneObjectUrlSyncConfig(this, { keys: () => [this.getKey()] });\n  }\n\n  private getKey(): string {\n    return `var-${this.state.name}`;\n  }\n\n  public getUrlState() {\n    return { [this.getKey()]: this.state.value };\n  }\n\n  public updateFromUrl(values: SceneObjectUrlValues) {\n    const update: Partial<IntervalVariableState> = {};\n    const val = values[this.getKey()];\n    if (typeof val === 'string') {\n      // support old auto interval url value\n      if (val.startsWith('$__auto_interval_')) {\n        update.value = AUTO_VARIABLE_VALUE;\n      } else {\n        update.value = val;\n      }\n    }\n    this.setState(update);\n  }\n\n  public getOptionsForSelect(): Array<SelectableValue<string>> {\n    const { value: currentValue, intervals, autoEnabled } = this.state;\n\n    let options = intervals.map((interval) => ({ value: interval, label: interval }));\n\n    if (autoEnabled) {\n      options = [{ value: AUTO_VARIABLE_VALUE, label: AUTO_VARIABLE_TEXT }, ...options];\n    }\n\n    // If the current value is not in the list of intervals, add it to the list\n    if (currentValue && !options.some((option) => option.value === currentValue)) {\n      options.push({ value: currentValue, label: currentValue });\n    }\n\n    return options;\n  }\n\n  public getValue(): VariableValue {\n    const { value, autoStepCount, autoMinInterval } = this.state;\n    if (value === AUTO_VARIABLE_VALUE) {\n      return this.getAutoRefreshInteval(autoStepCount, autoMinInterval);\n    }\n\n    return value;\n  }\n\n  private getAutoRefreshInteval(autoStepCount: number, minRefreshInterval: string) {\n    const timeRange = sceneGraph.getTimeRange(this).state.value;\n    const intervalObject = rangeUtil.calculateInterval(timeRange, autoStepCount, minRefreshInterval);\n    return intervalObject.interval;\n  }\n\n  public _onChange = (value: SelectableValue<string>) => {\n    this.setState({ value: value.value! });\n    this.publishEvent(new SceneVariableValueChangedEvent(this), true);\n  };\n\n  public validateAndUpdate(): Observable<ValidateAndUpdateResult> {\n    const { value, intervals } = this.state;\n    let shouldPublish = false;\n\n    if (value === AUTO_VARIABLE_VALUE) {\n      shouldPublish = true;\n    } else if (!value && intervals.length > 0) {\n      const firstOption = intervals[0];\n      this.setState({ value: firstOption });\n      shouldPublish = true;\n    }\n\n    if (shouldPublish) {\n      this.publishEvent(new SceneVariableValueChangedEvent(this), true);\n    }\n\n    return of({});\n  }\n\n  public static Component = ({ model }: SceneComponentProps<IntervalVariable>) => {\n    const { key, value } = model.useState();\n    return (\n      <Select\n        id={key}\n        placeholder=\"Select value\"\n        width=\"auto\"\n        value={value}\n        tabSelectsValue={false}\n        options={model.getOptionsForSelect()}\n        onChange={model._onChange}\n      />\n    );\n  };\n}\n","import { Location } from 'history';\n\nimport { LocationService, locationService as locationServiceRuntime } from '@grafana/runtime';\n\nimport { SceneObjectStateChangedEvent } from '../core/events';\nimport { SceneObject, SceneObjectUrlValues, SceneUrlSyncOptions } from '../core/types';\nimport { writeSceneLog } from '../utils/writeSceneLog';\nimport { Subscription } from 'rxjs';\nimport { UniqueUrlKeyMapper } from './UniqueUrlKeyMapper';\nimport { getUrlState, isUrlValueEqual, syncStateFromUrl } from './utils';\nimport { BusEventWithPayload } from '@grafana/data';\nimport { useMemo } from 'react';\n\nexport interface UrlSyncManagerLike {\n  initSync(root: SceneObject): void;\n  cleanUp(root: SceneObject): void;\n  handleNewLocation(location: Location): void;\n  handleNewObject(sceneObj: SceneObject): void;\n}\n\n/**\n * Notify the url sync manager of a new object that has been added to the scene\n * that needs to init state from URL.\n */\nexport class NewSceneObjectAddedEvent extends BusEventWithPayload<SceneObject> {\n  public static readonly type = 'new-scene-object-added';\n}\n\nexport class UrlSyncManager implements UrlSyncManagerLike {\n  private _urlKeyMapper = new UniqueUrlKeyMapper();\n  private _sceneRoot?: SceneObject;\n  private _subs: Subscription | undefined;\n  private _lastLocation: Location | undefined;\n  private _locationService: LocationService;\n  private _paramsCache: UrlParamsCache;\n  private _options: SceneUrlSyncOptions;\n\n  public constructor(_options: SceneUrlSyncOptions = {}, locationService: LocationService = locationServiceRuntime) {\n    this._options = _options;\n    this._locationService = locationService;\n    this._paramsCache = new UrlParamsCache(locationService);\n  }\n\n  /**\n   * Updates the current scene state to match URL state.\n   */\n  public initSync(root: SceneObject) {\n    if (this._subs) {\n      writeSceneLog('UrlSyncManager', 'Unregister previous scene state subscription', this._sceneRoot?.state.key);\n      this._subs.unsubscribe();\n    }\n\n    writeSceneLog('UrlSyncManager', 'init', root.state.key);\n\n    this._sceneRoot = root;\n    this._subs = new Subscription();\n\n    this._subs.add(\n      root.subscribeToEvent(SceneObjectStateChangedEvent, (evt) => {\n        this.handleSceneObjectStateChanged(evt.payload.changedObject);\n      })\n    );\n\n    this._subs.add(\n      root.subscribeToEvent(NewSceneObjectAddedEvent, (evt) => {\n        this.handleNewObject(evt.payload);\n      })\n    );\n\n    this._urlKeyMapper.clear();\n    this._lastLocation = this._locationService.getLocation();\n\n    // Sync current url with state\n    this.handleNewObject(this._sceneRoot);\n\n    if (this._options.updateUrlOnInit) {\n      // Get current url state and update url to match\n      const urlState = getUrlState(root);\n\n      if (isUrlStateDifferent(urlState, this._paramsCache.getParams())) {\n        this._locationService.partial(urlState, true);\n      }\n    }\n  }\n\n  public cleanUp(root: SceneObject) {\n    // Ignore this if we have a new or different root\n    if (this._sceneRoot !== root) {\n      return;\n    }\n\n    writeSceneLog('UrlSyncManager', 'Clean up');\n\n    if (this._subs) {\n      this._subs.unsubscribe();\n      this._subs = undefined;\n\n      writeSceneLog(\n        'UrlSyncManager',\n        'Root deactived, unsub to state',\n        'same key',\n        this._sceneRoot.state.key === root.state.key\n      );\n    }\n\n    this._sceneRoot = undefined;\n    this._lastLocation = undefined;\n  }\n\n  public handleNewLocation(location: Location) {\n    if (!this._sceneRoot || this._lastLocation === location) {\n      return;\n    }\n\n    writeSceneLog('UrlSyncManager', 'handleNewLocation');\n\n    this._lastLocation = location;\n\n    // Sync scene state tree from url\n    syncStateFromUrl(this._sceneRoot!, this._paramsCache.getParams(), this._urlKeyMapper);\n  }\n\n  public handleNewObject(sceneObj: SceneObject) {\n    if (!this._sceneRoot) {\n      return;\n    }\n\n    syncStateFromUrl(sceneObj, this._paramsCache.getParams(), this._urlKeyMapper);\n  }\n\n  private handleSceneObjectStateChanged(changedObject: SceneObject) {\n    if (!changedObject.urlSync) {\n      return;\n    }\n\n    const newUrlState = changedObject.urlSync.getUrlState();\n\n    const searchParams = this._locationService.getSearch();\n    const mappedUpdated: SceneObjectUrlValues = {};\n\n    for (const [key, newUrlValue] of Object.entries(newUrlState)) {\n      const uniqueKey = this._urlKeyMapper.getUniqueKey(key, changedObject);\n      const currentUrlValue = searchParams.getAll(uniqueKey);\n\n      if (!isUrlValueEqual(currentUrlValue, newUrlValue)) {\n        mappedUpdated[uniqueKey] = newUrlValue;\n      }\n    }\n\n    if (Object.keys(mappedUpdated).length > 0) {\n      const shouldCreateHistoryEntry = changedObject.urlSync.shouldCreateHistoryStep?.(newUrlState);\n      const shouldReplace = shouldCreateHistoryEntry !== true;\n\n      writeSceneLog('UrlSyncManager', 'onStateChange updating URL');\n      this._locationService.partial(mappedUpdated, shouldReplace);\n\n      /// Mark the location already handled\n      this._lastLocation = this._locationService.getLocation();\n    }\n  }\n\n  public getUrlState(root: SceneObject): SceneObjectUrlValues {\n    return getUrlState(root);\n  }\n}\n\nclass UrlParamsCache {\n  #cache: URLSearchParams | undefined;\n  #location: Location | undefined;\n\n  public constructor(private locationService: LocationService) {}\n\n  public getParams(): URLSearchParams {\n    const location = this.locationService.getLocation();\n\n    if (this.#location === location) {\n      return this.#cache!;\n    }\n\n    this.#location = location;\n    this.#cache = new URLSearchParams(location.search);\n\n    return this.#cache;\n  }\n}\n\nfunction isUrlStateDifferent(sceneUrlState: SceneObjectUrlValues, currentParams: URLSearchParams) {\n  for (let key in sceneUrlState) {\n    if (!isUrlValueEqual(currentParams.getAll(key), sceneUrlState[key])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Creates a new memoized instance of the UrlSyncManager based on options\n */\nexport function useUrlSyncManager(options: SceneUrlSyncOptions, locationService: LocationService): UrlSyncManagerLike {\n  return useMemo(\n    () =>\n      new UrlSyncManager(\n        {\n          updateUrlOnInit: options.updateUrlOnInit,\n          createBrowserHistorySteps: options.createBrowserHistorySteps,\n        },\n        locationService\n      ),\n    [options.updateUrlOnInit, options.createBrowserHistorySteps, locationService]\n  );\n}\n","import { SceneObject, SceneUrlSyncOptions } from '../core/types';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { writeSceneLog } from '../utils/writeSceneLog';\nimport { useUrlSyncManager } from './UrlSyncManager';\nimport { useLocationServiceSafe } from '../utils/utils';\n\nexport function useUrlSync(sceneRoot: SceneObject, options: SceneUrlSyncOptions = {}): boolean {\n  const location = useLocation();\n  const locationService = useLocationServiceSafe();\n  const [isInitialized, setIsInitialized] = useState(false);\n  const urlSyncManager = useUrlSyncManager(options, locationService);\n\n  useEffect(() => {\n    urlSyncManager.initSync(sceneRoot);\n    setIsInitialized(true);\n    return () => urlSyncManager.cleanUp(sceneRoot);\n  }, [sceneRoot, urlSyncManager]);\n\n  useEffect(() => {\n    // Use latest location, as by the time this effect runs, the location might have changed again\n    const latestLocation = locationService.getLocation();\n    const locationToHandle = latestLocation !== location ? latestLocation : location;\n\n    if (latestLocation !== location) {\n      writeSceneLog('useUrlSync', 'latestLocation different from location');\n    }\n\n    urlSyncManager.handleNewLocation(locationToHandle);\n  }, [sceneRoot, urlSyncManager, location, locationService]);\n\n  return isInitialized;\n}\n\nexport interface UrlSyncContextProviderProps {\n  scene: SceneObject;\n  children: React.ReactNode;\n}\n","import { SceneObject, SceneUrlSyncOptions } from '../core/types';\nimport { useUrlSync } from './useUrlSync';\n\nexport interface UrlSyncContextProviderProps extends SceneUrlSyncOptions {\n  scene: SceneObject;\n  children: React.ReactNode;\n}\n\n/**\n * Right now this is actually not defining a context, but think it might in the future (with UrlSyncManager as the context value)\n */\n\nexport function UrlSyncContextProvider({\n  children,\n  scene,\n  updateUrlOnInit,\n  createBrowserHistorySteps,\n}: UrlSyncContextProviderProps) {\n  const isInitialized = useUrlSync(scene, { updateUrlOnInit, createBrowserHistorySteps });\n\n  if (!isInitialized) {\n    return null;\n  }\n\n  return children;\n}\n","import { SceneObject } from '../../core/types';\nimport { writeSceneLog } from '../writeSceneLog';\n\n/**\n * Adds the scene object to the global window state so that templateSrv in core can interpolate strings using the scene interpolation engine with the scene as scope.\n * This is needed for old datasources that call templateSrv.replace without passing scopedVars. For example in DataSourceAPI.metricFindQuery.\n *\n * This is also used from TimeSrv to access scene time range.\n */\nexport function setWindowGrafanaSceneContext(activeScene: SceneObject) {\n  const prevScene = (window as any).__grafanaSceneContext;\n\n  writeSceneLog('setWindowGrafanaScene', 'set window.__grafanaSceneContext', activeScene);\n  (window as any).__grafanaSceneContext = activeScene;\n\n  return () => {\n    if ((window as any).__grafanaSceneContext === activeScene) {\n      writeSceneLog('setWindowGrafanaScene', 'restore window.__grafanaSceneContext', prevScene);\n      (window as any).__grafanaSceneContext = prevScene;\n    }\n  };\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneComponentProps, SceneObjectState, SceneObject } from '../core/types';\nimport { setWindowGrafanaSceneContext } from '../utils/compatibility/setWindowGrafanaSceneContext';\n\nexport interface EmbeddedSceneState extends SceneObjectState {\n  /**\n   * The main content of the scene (usually a SceneFlexLayout)\n   */\n  body: SceneObject;\n  /**\n   * Top row of variable selectors, filters, time pickers and custom actions.\n   */\n  controls?: SceneObject[];\n  /**\n   * For interoperability (used from EmbeddedSceneWithContext)\n   */\n  context?: SceneObject;\n}\n\nexport class EmbeddedScene extends SceneObjectBase<EmbeddedSceneState> {\n  public static Component = EmbeddedSceneRenderer;\n\n  public constructor(state: EmbeddedSceneState) {\n    super(state);\n\n    this.addActivationHandler(() => {\n      // This function is setting window.__grafanaSceneContext which is used from Grafana core in the old services TimeSrv and TemplateSrv.\n      // This works as a backward compatability method to support accessing scene time range and variables from those old services.\n      const unsetGlobalScene = setWindowGrafanaSceneContext(this);\n      return () => {\n        unsetGlobalScene();\n      };\n    });\n  }\n}\n\nfunction EmbeddedSceneRenderer({ model }: SceneComponentProps<EmbeddedScene>) {\n  const { body, controls } = model.useState();\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      {controls && (\n        <div className={styles.controls}>\n          {controls.map((control) => (\n            <control.Component key={control.state.key} model={control} />\n          ))}\n        </div>\n      )}\n      <div className={styles.body}>\n        <body.Component model={body} />\n      </div>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      flexGrow: 1,\n      display: 'flex',\n      gap: theme.spacing(2),\n      minHeight: '100%',\n      flexDirection: 'column',\n    }),\n    body: css({\n      flexGrow: 1,\n      display: 'flex',\n      gap: theme.spacing(1),\n    }),\n    controls: css({\n      display: 'flex',\n      gap: theme.spacing(2),\n      alignItems: 'flex-end',\n      flexWrap: 'wrap',\n    }),\n  };\n};\n","import React, { useEffect } from 'react';\nimport { PanelMenuItem } from '@grafana/data';\nimport { Menu } from '@grafana/ui';\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneComponentProps, SceneObjectState } from '../../core/types';\nimport { selectors } from '@grafana/e2e-selectors';\n\ninterface VizPanelMenuState extends SceneObjectState {\n  items?: PanelMenuItem[];\n}\n\nexport class VizPanelMenu extends SceneObjectBase<VizPanelMenuState> {\n  static Component = VizPanelMenuRenderer;\n\n  // Allows adding menu items dynamically\n  public addItem(item: PanelMenuItem) {\n    this.setState({\n      items: this.state.items ? [...this.state.items, item] : [item],\n    });\n  }\n\n  // Allows replacing all menu items\n  public setItems(items: PanelMenuItem[]) {\n    this.setState({\n      items,\n    });\n  }\n}\n\nfunction VizPanelMenuRenderer({ model }: SceneComponentProps<VizPanelMenu>) {\n  const { items = [] } = model.useState();\n  const ref = React.useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.focus();\n    }\n  }, []);\n\n  const renderItems = (items: PanelMenuItem[]) => {\n    return items.map((item) => {\n      switch (item.type) {\n        case 'divider':\n          return <Menu.Divider key={item.text} />;\n        case 'group':\n          return (\n            <Menu.Group key={item.text} label={item.text}>\n              {item.subMenu ? renderItems(item.subMenu) : undefined}\n            </Menu.Group>\n          );\n        default:\n          return (\n            <Menu.Item\n              key={item.text}\n              label={item.text}\n              icon={item.iconClassName}\n              childItems={item.subMenu ? renderItems(item.subMenu) : undefined}\n              url={item.href}\n              onClick={item.onClick}\n              shortcut={item.shortcut}\n              testId={selectors.components.Panels.Panel.menuItems(item.text)}\n            />\n          );\n      }\n    });\n  };\n\n  return <Menu ref={ref}>{renderItems(items)}</Menu>;\n}\n","export const DEFAULT_PANEL_SPAN = 4;\nexport const GRID_CELL_HEIGHT = 30;\nexport const GRID_CELL_VMARGIN = 8;\nexport const GRID_COLUMN_COUNT = 24;\n","import React from 'react';\nimport { SceneObjectBase } from '../../../core/SceneObjectBase';\nimport { SceneObject, SceneComponentProps } from '../../../core/types';\nimport { SceneGridLayout } from './SceneGridLayout';\nimport { SceneGridRow } from './SceneGridRow';\nimport { SceneGridItemStateLike, SceneGridItemLike } from './types';\n\ninterface SceneGridItemState extends SceneGridItemStateLike {\n  body: SceneObject | undefined;\n}\nexport class SceneGridItem extends SceneObjectBase<SceneGridItemState> implements SceneGridItemLike {\n  static Component = SceneGridItemRenderer;\n}\n\nfunction SceneGridItemRenderer({ model }: SceneComponentProps<SceneGridItem>) {\n  const { body } = model.useState();\n  const parent = model.parent;\n\n  if (parent && !isSceneGridLayout(parent) && !isSceneGridRow(parent)) {\n    throw new Error('SceneGridItem must be a child of SceneGridLayout or SceneGridRow');\n  }\n\n  if (!body) {\n    return null;\n  }\n\n  return <body.Component model={body} />;\n}\n\nexport function isSceneGridRow(child: SceneObject): child is SceneGridRow {\n  return child instanceof SceneGridRow;\n}\n\nfunction isSceneGridLayout(child: SceneObject): child is SceneGridLayout {\n  return child instanceof SceneGridLayout;\n}\n","import React, { ForwardRefExoticComponent, useImperativeHandle, useRef, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { uniqueId } from 'lodash';\nimport { css } from '@emotion/css';\nimport { useStyles2 } from '@grafana/ui';\n\nexport function useUniqueId(): string {\n  const idRefLazy = useRef<string | undefined>(undefined);\n  idRefLazy.current ??= uniqueId();\n  return idRefLazy.current;\n}\n\nexport interface Props extends Omit<React.HTMLProps<HTMLDivElement>, 'onChange' | 'children'> {\n  children: React.ReactNode | (({ isInView }: { isInView: boolean }) => React.ReactNode);\n  key: string;\n  onLoad?: () => void;\n  onChange?: (isInView: boolean) => void;\n}\n\nexport interface LazyLoaderType extends ForwardRefExoticComponent<Props> {\n  addCallback: (id: string, c: (e: IntersectionObserverEntry) => void) => void;\n  callbacks: Record<string, (e: IntersectionObserverEntry) => void>;\n  observer: IntersectionObserver;\n}\n\nexport const LazyLoader: LazyLoaderType = React.forwardRef<HTMLDivElement, Props>(\n  ({ children, onLoad, onChange, className, ...rest }, ref) => {\n    const id = useUniqueId();\n    const { hideEmpty } = useStyles2(getStyles);\n    const [loaded, setLoaded] = useState(false);\n    const [isInView, setIsInView] = useState(false);\n    const innerRef = useRef<HTMLDivElement>(null);\n\n    useImperativeHandle(ref, () => innerRef.current!);\n\n    useEffectOnce(() => {\n      LazyLoader.addCallback(id, (entry) => {\n        if (!loaded && entry.isIntersecting) {\n          setLoaded(true);\n          onLoad?.();\n        }\n\n        setIsInView(entry.isIntersecting);\n        onChange?.(entry.isIntersecting);\n      });\n\n      const wrapperEl = innerRef.current;\n\n      if (wrapperEl) {\n        LazyLoader.observer.observe(wrapperEl);\n      }\n\n      return () => {\n        wrapperEl && LazyLoader.observer.unobserve(wrapperEl);\n        delete LazyLoader.callbacks[id];\n        if (Object.keys(LazyLoader.callbacks).length === 0) {\n          LazyLoader.observer.disconnect();\n        }\n      };\n    });\n\n    // If the element was loaded, we add the `hideEmpty` class to potentially\n    // hide the LazyLoader if it does not have any children. This is the case\n    // when children have the `isHidden` property set.\n    // We always include the `className` class, as this is coming from the\n    // caller of the `LazyLoader` component.\n    const classes = `${loaded ? hideEmpty : ''} ${className}`;\n    return (\n      <div id={id} ref={innerRef} className={classes} {...rest}>\n        {loaded && (typeof children === 'function' ? children({ isInView }) : children)}\n      </div>\n    );\n  }\n) as LazyLoaderType;\n\nfunction getStyles() {\n  return {\n    hideEmpty: css({\n      '&:empty': {\n        display: 'none',\n      },\n    }),\n  };\n}\n\nLazyLoader.displayName = 'LazyLoader';\nLazyLoader.callbacks = {} as Record<string, (e: IntersectionObserverEntry) => void>;\nLazyLoader.addCallback = (id: string, c: (e: IntersectionObserverEntry) => void) => (LazyLoader.callbacks[id] = c);\nLazyLoader.observer = new IntersectionObserver(\n  (entries) => {\n    for (const entry of entries) {\n      if (typeof LazyLoader.callbacks[entry.target.id] === 'function') {\n        LazyLoader.callbacks[entry.target.id](entry);\n      }\n    }\n  },\n  { rootMargin: '100px' }\n);\n","import React, { RefCallback, useEffect, useRef } from 'react';\nimport ReactGridLayout from 'react-grid-layout';\nimport { SceneComponentProps } from '../../../core/types';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, GRID_COLUMN_COUNT } from './constants';\nimport { LazyLoader } from '../LazyLoader';\nimport { SceneGridLayout } from './SceneGridLayout';\nimport { SceneGridItemLike } from './types';\nimport { useStyles2 } from '@grafana/ui';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useMeasure } from 'react-use';\n\nexport function SceneGridLayoutRenderer({ model }: SceneComponentProps<SceneGridLayout>) {\n  const { children, isLazy, isDraggable, isResizable } = model.useState();\n  const [outerDivRef, { width, height }] = useMeasure();\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  /**\n   * The class that enables drag animations needs to be added after mount otherwise panels move on mount to their set positions which is annoying\n   */\n  useEffect(() => {\n    updateAnimationClass(ref, !!isDraggable);\n  }, [isDraggable]);\n\n  validateChildrenSize(children);\n\n  const renderGrid = (width: number, height: number) => {\n    if (!width || !height) {\n      return null;\n    }\n\n    const layout = model.buildGridLayout(width, height);\n\n    return (\n      /**\n       * The children is using a width of 100% so we need to guarantee that it is wrapped\n       * in an element that has the calculated size given by the AutoSizer. The AutoSizer\n       * has a width of 0 and will let its content overflow its div.\n       */\n      <div ref={ref} style={{ width: `${width}px`, height: '100%' }} className=\"react-grid-layout\">\n        <ReactGridLayout\n          width={width}\n          /**\n                Disable draggable if mobile device, solving an issue with unintentionally\n                moving panels. https://github.com/grafana/grafana/issues/18497\n                theme.breakpoints.md = 769\n           */\n          isDraggable={isDraggable && width > 768}\n          isResizable={isResizable ?? false}\n          containerPadding={[0, 0]}\n          useCSSTransforms={true}\n          margin={[GRID_CELL_VMARGIN, GRID_CELL_VMARGIN]}\n          cols={GRID_COLUMN_COUNT}\n          rowHeight={GRID_CELL_HEIGHT}\n          draggableHandle={`.grid-drag-handle-${model.state.key}`}\n          draggableCancel=\".grid-drag-cancel\"\n          layout={layout}\n          onDragStart={model.onDragStart}\n          onDragStop={model.onDragStop}\n          onResizeStop={model.onResizeStop}\n          onLayoutChange={model.onLayoutChange}\n          isBounded={false}\n          resizeHandle={<ResizeHandle />}\n        >\n          {layout.map((gridItem, index) => (\n            <GridItemWrapper\n              key={gridItem.i}\n              grid={model}\n              layoutItem={gridItem}\n              index={index}\n              isLazy={isLazy}\n              totalCount={layout.length}\n            />\n          ))}\n        </ReactGridLayout>\n      </div>\n    );\n  };\n\n  return (\n    <div\n      ref={outerDivRef as RefCallback<HTMLDivElement>}\n      style={{ flex: '1 1 auto', position: 'relative', zIndex: 1, width: '100%' }}\n    >\n      {renderGrid(width, height)}\n    </div>\n  );\n}\n\ninterface GridItemWrapperProps extends React.HTMLAttributes<HTMLDivElement> {\n  grid: SceneGridLayout;\n  layoutItem: ReactGridLayout.Layout;\n  index: number;\n  totalCount: number;\n  isLazy?: boolean;\n}\n\nconst GridItemWrapper = React.forwardRef<HTMLDivElement, GridItemWrapperProps>((props, ref) => {\n  const { grid, layoutItem, index, totalCount, isLazy, style, onLoad, onChange, children, ...divProps } = props;\n  const sceneChild = grid.getSceneLayoutChild(layoutItem.i)!;\n  const className = sceneChild.getClassName?.();\n\n  const innerContent = <sceneChild.Component model={sceneChild} key={sceneChild.state.key} />;\n\n  if (isLazy) {\n    return (\n      <LazyLoader\n        {...divProps}\n        key={sceneChild.state.key!}\n        data-griditem-key={sceneChild.state.key}\n        className={cx(className, props.className)}\n        style={style}\n        ref={ref}\n      >\n        {innerContent}\n        {children}\n      </LazyLoader>\n    );\n  }\n\n  return (\n    <div\n      {...divProps}\n      ref={ref}\n      key={sceneChild.state.key}\n      data-griditem-key={sceneChild.state.key}\n      className={cx(className, props.className)}\n      style={style}\n    >\n      {innerContent}\n      {children}\n    </div>\n  );\n});\n\nGridItemWrapper.displayName = 'GridItemWrapper';\n\nfunction validateChildrenSize(children: SceneGridItemLike[]) {\n  if (\n    children.some(\n      (c) =>\n        c.state.height === undefined ||\n        c.state.width === undefined ||\n        c.state.x === undefined ||\n        c.state.y === undefined\n    )\n  ) {\n    throw new Error('All children must have a size specified');\n  }\n}\n\nfunction updateAnimationClass(\n  ref: React.MutableRefObject<HTMLDivElement | null>,\n  isDraggable: boolean,\n  retry?: boolean\n) {\n  if (ref.current) {\n    if (isDraggable) {\n      ref.current.classList.add('react-grid-layout--enable-move-animations');\n    } else {\n      ref.current.classList.remove('react-grid-layout--enable-move-animations');\n    }\n  } else if (!retry) {\n    setTimeout(() => updateAnimationClass(ref, isDraggable, true), 50);\n  }\n}\n\ninterface ResizeHandleProps extends React.HTMLAttributes<HTMLDivElement> {\n  handleAxis?: string;\n}\n\nconst ResizeHandle = React.forwardRef<HTMLDivElement, ResizeHandleProps>(({ handleAxis, ...divProps }, ref) => {\n  const customCssClass = useStyles2(getResizeHandleStyles);\n\n  return (\n    <div ref={ref} {...divProps} className={`${customCssClass} scene-resize-handle`}>\n      <svg width=\"16px\" height=\"16px\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path\n          d=\"M21 15L15 21M21 8L8 21\"\n          stroke=\"currentColor\"\n          strokeWidth=\"2\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    </div>\n  );\n});\n\nResizeHandle.displayName = 'ResizeHandle';\n\nfunction getResizeHandleStyles(theme: GrafanaTheme2) {\n  return css({\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    zIndex: 999,\n    padding: theme.spacing(1.5, 0, 0, 1.5),\n    color: theme.colors.border.strong,\n    cursor: 'se-resize',\n    '&:hover': {\n      color: theme.colors.text.link,\n    },\n    svg: {\n      display: 'block',\n    },\n    '.react-resizable-hide &': {\n      display: 'none',\n    },\n  });\n}\n","import { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN } from './constants';\n\nexport function fitPanelsInHeight(cells: ReactGridLayout.Layout[], height: number) {\n  // Take into account cell margint top + cell margin bottom + adding some marging at the bottom\n  const visibleHeight = height - GRID_CELL_VMARGIN * 4;\n  const currentGridHeight = Math.max(...cells.map((cell) => cell.h + cell.y));\n\n  const visibleGridHeight = Math.floor(visibleHeight / (GRID_CELL_HEIGHT + GRID_CELL_VMARGIN));\n  const scaleFactor = currentGridHeight / visibleGridHeight;\n\n  return cells.map((cell) => {\n    return {\n      ...cell,\n      y: Math.round(cell.y / scaleFactor) || 0,\n      h: Math.round(cell.h / scaleFactor) || 1,\n    };\n  });\n}\n","import ReactGridLayout from 'react-grid-layout';\n\nimport { SceneObjectBase } from '../../../core/SceneObjectBase';\nimport { SceneLayout, SceneObjectState } from '../../../core/types';\nimport { DEFAULT_PANEL_SPAN } from './constants';\nimport { isSceneGridRow } from './SceneGridItem';\nimport { SceneGridLayoutRenderer } from './SceneGridLayoutRenderer';\n\nimport { SceneGridRow } from './SceneGridRow';\nimport { SceneGridItemLike, SceneGridItemPlacement } from './types';\nimport { fitPanelsInHeight } from './utils';\n\ninterface SceneGridLayoutState extends SceneObjectState {\n  /**\n   * Turn on or off dragging for all items. Individual items can still disabled via isDraggable property\n   **/\n  isDraggable?: boolean;\n  /** Enable or disable item resizing */\n  isResizable?: boolean;\n  isLazy?: boolean;\n  /**\n   * Fit panels to height of the grid. This will scale down the panels vertically to fit available height.\n   * The row height is not changed, only the y position and height of the panels.\n   * UNSAFE: This feature is experimental and it might change in the future.\n   */\n  UNSAFE_fitPanels?: boolean;\n  children: SceneGridItemLike[];\n}\n\nexport class SceneGridLayout extends SceneObjectBase<SceneGridLayoutState> implements SceneLayout {\n  public static Component = SceneGridLayoutRenderer;\n\n  private _skipOnLayoutChange = false;\n  private _oldLayout: ReactGridLayout.Layout[] = [];\n  private _loadOldLayout = false;\n\n  public constructor(state: SceneGridLayoutState) {\n    super({\n      ...state,\n      children: sortChildrenByPosition(state.children),\n    });\n  }\n\n  /**\n   * SceneLayout interface. Used for example by VizPanelRenderer\n   */\n  public isDraggable(): boolean {\n    return this.state.isDraggable ?? false;\n  }\n\n  public getDragClass() {\n    return `grid-drag-handle-${this.state.key}`;\n  }\n\n  public getDragClassCancel() {\n    return `grid-drag-cancel`;\n  }\n\n  public toggleRow(row: SceneGridRow) {\n    const isCollapsed = row.state.isCollapsed;\n\n    if (!isCollapsed) {\n      row.setState({ isCollapsed: true });\n      // To force re-render\n      this.setState({});\n      return;\n    }\n\n    const rowChildren = row.state.children;\n\n    if (rowChildren.length === 0) {\n      row.setState({ isCollapsed: false });\n      this.setState({});\n      return;\n    }\n\n    // Ok we are expanding row. We need to update row children y pos (incase they are incorrect) and push items below down\n    // Code copied from DashboardModel toggleRow()\n\n    const rowY = row.state.y!;\n    const firstPanelYPos = rowChildren[0].state.y ?? rowY;\n    const yDiff = firstPanelYPos - (rowY + 1);\n\n    // y max will represent the bottom y pos after all panels have been added\n    // needed to know home much panels below should be pushed down\n    let yMax = rowY;\n\n    for (const panel of rowChildren) {\n      // set the y gridPos if it wasn't already set\n      const newSize = { ...panel.state };\n      newSize.y = newSize.y ?? rowY;\n      // make sure y is adjusted (in case row moved while collapsed)\n      newSize.y -= yDiff;\n\n      if (newSize.y! !== panel.state.y!) {\n        panel.setState(newSize);\n      }\n\n      // update insert post and y max\n      yMax = Math.max(yMax, Number(newSize.y!) + Number(newSize.height!));\n    }\n\n    const pushDownAmount = yMax - rowY - 1;\n\n    // push panels below down\n    for (const child of this.state.children) {\n      if (child.state.y! > rowY) {\n        this.pushChildDown(child, pushDownAmount);\n      }\n\n      if (isSceneGridRow(child) && child !== row) {\n        for (const rowChild of child.state.children) {\n          if (rowChild.state.y! > rowY) {\n            this.pushChildDown(rowChild, pushDownAmount);\n          }\n        }\n      }\n    }\n\n    row.setState({ isCollapsed: false });\n    // Trigger re-render\n    this.setState({});\n  }\n\n  public ignoreLayoutChange(shouldIgnore: boolean) {\n    this._skipOnLayoutChange = shouldIgnore;\n  }\n\n  public onLayoutChange = (layout: ReactGridLayout.Layout[]) => {\n    if (this._skipOnLayoutChange) {\n      // Layout has been updated by other RTL handler already\n      this._skipOnLayoutChange = false;\n      return;\n    }\n\n    // We replace with the old layout only if the current state is invalid\n    if (this._loadOldLayout) {\n      layout = [...this._oldLayout];\n      this._loadOldLayout = false;\n    }\n\n    for (const item of layout) {\n      const child = this.getSceneLayoutChild(item.i);\n\n      const nextSize: SceneGridItemPlacement = {\n        x: item.x,\n        y: item.y,\n        width: item.w,\n        height: item.h,\n      };\n\n      if (!isItemSizeEqual(child.state, nextSize)) {\n        child.setState({\n          ...nextSize,\n        });\n      }\n    }\n\n    this.setState({ children: sortChildrenByPosition(this.state.children) });\n  };\n\n  /**\n   * Will also scan row children and return child of the row\n   */\n  public getSceneLayoutChild(key: string): SceneGridItemLike {\n    for (const child of this.state.children) {\n      if (child.state.key === key) {\n        return child;\n      }\n\n      if (child instanceof SceneGridRow) {\n        for (const rowChild of child.state.children) {\n          if (rowChild.state.key === key) {\n            return rowChild;\n          }\n        }\n      }\n    }\n\n    throw new Error('Scene layout child not found for GridItem');\n  }\n\n  public onResizeStop: ReactGridLayout.ItemCallback = (_, o, n) => {\n    const child = this.getSceneLayoutChild(n.i);\n    child.setState({\n      width: n.w,\n      height: n.h,\n    });\n  };\n\n  private pushChildDown(child: SceneGridItemLike, amount: number) {\n    child.setState({\n      y: child.state.y! + amount,\n    });\n  }\n\n  /**\n   *  We assume the layout array is sorted according to y pos, and walk upwards until we find a row.\n   *  If it is collapsed there is no row to add it to. The default is then to return the SceneGridLayout itself\n   */\n  private findGridItemSceneParent(layout: ReactGridLayout.Layout[], startAt: number): SceneGridRow | SceneGridLayout {\n    for (let i = startAt; i >= 0; i--) {\n      const gridItem = layout[i];\n      const sceneChild = this.getSceneLayoutChild(gridItem.i);\n\n      if (sceneChild instanceof SceneGridRow) {\n        // the closest row is collapsed return null\n        if (sceneChild.state.isCollapsed) {\n          return this;\n        }\n\n        return sceneChild;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Helper func to check if we are dropping a row in between panels of another row\n   */\n  private isRowDropValid(\n    gridLayout: ReactGridLayout.Layout[],\n    updatedItem: ReactGridLayout.Layout,\n    indexOfUpdatedItem: number\n  ): boolean {\n    // if the row is dropped at the end of the dashboard grid layout, we accept this valid state\n    if (gridLayout[gridLayout.length - 1].i === updatedItem.i) {\n      return true;\n    }\n\n    // if the next child after the updated item is a scene grid row, then we are either at the top\n    // of the dashboard, or between rows\n    // if it's not a grid row, but it's parent is the layout, it means we are not in between a\n    // rows children, so also valid state\n    const nextSceneChild = this.getSceneLayoutChild(gridLayout[indexOfUpdatedItem + 1].i);\n    if (nextSceneChild instanceof SceneGridRow) {\n      return true;\n    } else if (nextSceneChild.parent instanceof SceneGridLayout) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * This likely needs a slightly different approach. Where we clone or deactivate or and re-activate the moved child\n   */\n  public moveChildTo(child: SceneGridItemLike, target: SceneGridLayout | SceneGridRow) {\n    const currentParent = child.parent!;\n    let rootChildren = this.state.children;\n\n    const newChild = child.clone({ key: child.state.key });\n\n    // Remove from current parent row\n    if (currentParent instanceof SceneGridRow) {\n      const newRow = currentParent.clone();\n      newRow.setState({\n        children: newRow.state.children.filter((c) => c.state.key !== child.state.key),\n      });\n\n      // new children with new row\n      rootChildren = rootChildren.map((c) => (c === currentParent ? newRow : c));\n\n      // if target is also a row\n      if (target instanceof SceneGridRow) {\n        const targetRow = target.clone();\n        targetRow.setState({ children: [...targetRow.state.children, newChild] });\n        rootChildren = rootChildren.map((c) => (c === target ? targetRow : c));\n      } else {\n        // target is the main grid\n        rootChildren = [...rootChildren, newChild];\n      }\n    } else {\n      if (!(target instanceof SceneGridLayout)) {\n        // current parent is the main grid remove it from there\n        rootChildren = rootChildren.filter((c) => c.state.key !== child.state.key);\n        // Clone the target row and add the child\n        const targetRow = target.clone();\n        targetRow.setState({ children: [...targetRow.state.children, newChild] });\n        // Replace row with new row\n        rootChildren = rootChildren.map((c) => (c === target ? targetRow : c));\n      }\n    }\n\n    return rootChildren;\n  }\n\n  public onDragStart: ReactGridLayout.ItemCallback = (gridLayout) => {\n    this._oldLayout = [...gridLayout];\n  };\n\n  public onDragStop: ReactGridLayout.ItemCallback = (gridLayout, o, updatedItem) => {\n    const sceneChild = this.getSceneLayoutChild(updatedItem.i)!;\n\n    // Need to resort the grid layout based on new position (needed to find the new parent)\n    gridLayout = sortGridLayout(gridLayout);\n\n    // Update children positions if they have changed\n    for (let i = 0; i < gridLayout.length; i++) {\n      const gridItem = gridLayout[i];\n      const child = this.getSceneLayoutChild(gridItem.i)!;\n      const childSize = child.state;\n\n      if (childSize?.x !== gridItem.x || childSize?.y !== gridItem.y) {\n        child.setState({\n          x: gridItem.x,\n          y: gridItem.y,\n        });\n      }\n    }\n\n    // Update the parent if the child if it has moved to a row or back to the grid\n    const indexOfUpdatedItem = gridLayout.findIndex((item) => item.i === updatedItem.i);\n    let newParent = this.findGridItemSceneParent(gridLayout, indexOfUpdatedItem - 1);\n    let newChildren = this.state.children;\n\n    // if the child is a row and we are moving it under an uncollapsed row, keep the scene grid layout as parent\n    // and set the old layout flag if the state is invalid. We allow setting the children in an invalid state,\n    // as the layout will be updated in onLayoutChange and avoid flickering\n    if (sceneChild instanceof SceneGridRow && newParent instanceof SceneGridRow) {\n      if (!this.isRowDropValid(gridLayout, updatedItem, indexOfUpdatedItem)) {\n        this._loadOldLayout = true;\n      }\n\n      newParent = this;\n    }\n\n    if (newParent !== sceneChild.parent) {\n      newChildren = this.moveChildTo(sceneChild, newParent);\n    }\n\n    this.setState({ children: sortChildrenByPosition(newChildren) });\n    this._skipOnLayoutChange = true;\n  };\n\n  private toGridCell(child: SceneGridItemLike): ReactGridLayout.Layout {\n    const size = child.state;\n\n    let x = size.x ?? 0;\n    let y = size.y ?? 0;\n    const w = Number.isInteger(Number(size.width)) ? Number(size.width) : DEFAULT_PANEL_SPAN;\n    const h = Number.isInteger(Number(size.height)) ? Number(size.height) : DEFAULT_PANEL_SPAN;\n\n    let isDraggable = child.state.isDraggable;\n    let isResizable = child.state.isResizable;\n\n    if (child instanceof SceneGridRow) {\n      isDraggable = child.state.isCollapsed ? true : false;\n      isResizable = false;\n    }\n\n    return { i: child.state.key!, x, y, h, w, isResizable, isDraggable };\n  }\n\n  public buildGridLayout(width: number, height: number): ReactGridLayout.Layout[] {\n    let cells: ReactGridLayout.Layout[] = [];\n\n    for (const child of this.state.children) {\n      cells.push(this.toGridCell(child));\n\n      if (child instanceof SceneGridRow && !child.state.isCollapsed) {\n        for (const rowChild of child.state.children) {\n          cells.push(this.toGridCell(rowChild));\n        }\n      }\n    }\n\n    // Sort by position\n    cells = sortGridLayout(cells);\n\n    if (this.state.UNSAFE_fitPanels) {\n      cells = fitPanelsInHeight(cells, height);\n    }\n\n    if (width < 768) {\n      // We should not persist the mobile layout\n      this._skipOnLayoutChange = true;\n      return cells.map((cell) => ({ ...cell, w: 24 }));\n    }\n\n    this._skipOnLayoutChange = false;\n\n    return cells;\n  }\n}\n\nfunction isItemSizeEqual(a: SceneGridItemPlacement, b: SceneGridItemPlacement) {\n  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;\n}\n\nfunction sortChildrenByPosition(children: SceneGridItemLike[]) {\n  children.forEach((child) => {\n    if (child instanceof SceneGridRow) {\n      child.setState({ children: sortChildrenByPosition(child.state.children) });\n    }\n  });\n\n  return [...children].sort((a, b) => {\n    return a.state.y! - b.state.y! || a.state.x! - b.state.x!;\n  });\n}\n\nfunction sortGridLayout(layout: ReactGridLayout.Layout[]) {\n  return [...layout].sort((a, b) => a.y - b.y || a.x! - b.x);\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../../../core/SceneObjectBase';\nimport { SceneComponentProps, SceneObject, SceneObjectUrlValues } from '../../../core/types';\n\nimport { SceneGridLayout } from './SceneGridLayout';\nimport { GRID_COLUMN_COUNT } from './constants';\nimport { SceneGridItemLike, SceneGridItemStateLike } from './types';\nimport { sceneGraph } from '../../../core/sceneGraph';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { VariableDependencyConfig } from '../../../variables/VariableDependencyConfig';\n\nexport interface SceneGridRowState extends SceneGridItemStateLike {\n  title: string;\n  isCollapsible?: boolean;\n  isCollapsed?: boolean;\n  actions?: SceneObject;\n  children: SceneGridItemLike[];\n}\n\nexport class SceneGridRow extends SceneObjectBase<SceneGridRowState> {\n  public static Component = SceneGridRowRenderer;\n\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    statePaths: ['title'],\n  });\n\n  public constructor(state: Partial<SceneGridRowState>) {\n    super({\n      children: state.children || [],\n      isCollapsible: state.isCollapsible || true,\n      title: state.title || '',\n      ...state,\n      x: 0,\n      height: 1,\n      width: GRID_COLUMN_COUNT,\n    });\n  }\n\n  public getGridLayout(): SceneGridLayout {\n    const layout = this.parent;\n\n    if (!layout || !(layout instanceof SceneGridLayout)) {\n      throw new Error('SceneGridRow must be a child of SceneGridLayout');\n    }\n\n    return layout;\n  }\n\n  public onCollapseToggle = () => {\n    if (!this.state.isCollapsible) {\n      return;\n    }\n\n    this.getGridLayout().toggleRow(this);\n  };\n\n  public getUrlState() {\n    return { rowc: this.state.isCollapsed ? '1' : '0' };\n  }\n\n  public updateFromUrl(values: SceneObjectUrlValues) {\n    if (values.rowc == null) {\n      return;\n    }\n\n    if (values.rowc !== this.getUrlState().rowc) {\n      this.onCollapseToggle();\n    }\n  }\n}\n\nexport function SceneGridRowRenderer({ model }: SceneComponentProps<SceneGridRow>) {\n  const styles = useStyles2(getSceneGridRowStyles);\n  const { isCollapsible, isCollapsed, title, actions, children } = model.useState();\n  const layout = model.getGridLayout();\n  const layoutDragClass = layout.getDragClass();\n  const isDraggable = layout.isDraggable();\n\n  const count = children ? children.length : 0;\n  const panels = count === 1 ? 'panel' : 'panels';\n\n  return (\n    <div className={cx(styles.row, isCollapsed && styles.rowCollapsed)}>\n      <div className={styles.rowTitleAndActionsGroup}>\n        <button\n          onClick={model.onCollapseToggle}\n          className={styles.rowTitleButton}\n          aria-label={isCollapsed ? 'Expand row' : 'Collapse row'}\n          data-testid={selectors.components.DashboardRow.title(sceneGraph.interpolate(model, title, undefined, 'text'))}\n        >\n          {isCollapsible && <Icon name={isCollapsed ? 'angle-right' : 'angle-down'} />}\n          <span className={styles.rowTitle} role=\"heading\">\n            {sceneGraph.interpolate(model, title, undefined, 'text')}\n          </span>\n        </button>\n        <span className={cx(styles.panelCount, isCollapsed && styles.panelCountCollapsed)}>\n          ({count} {panels})\n        </span>\n        {actions && (\n          <div className={styles.rowActions}>\n            <actions.Component model={actions} />\n          </div>\n        )}\n      </div>\n      {isDraggable && isCollapsed && (\n        <div className={cx(styles.dragHandle, layoutDragClass)}>\n          <Icon name=\"draggabledots\" />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport const getSceneGridRowStyles = (theme: GrafanaTheme2) => {\n  return {\n    row: css({\n      width: '100%',\n      height: '30px',\n      display: 'flex',\n      justifyContent: 'space-between',\n      gap: theme.spacing(1),\n    }),\n    rowTitleButton: css({\n      display: 'flex',\n      alignItems: 'center',\n      cursor: 'pointer',\n      background: 'transparent',\n      border: 'none',\n      minWidth: 0,\n      gap: theme.spacing(1),\n    }),\n    rowCollapsed: css({\n      borderBottom: `1px solid ${theme.colors.border.weak}`,\n    }),\n    rowTitle: css({\n      fontSize: theme.typography.h5.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      maxWidth: '100%',\n      flexGrow: 1,\n      minWidth: 0,\n    }),\n    collapsedInfo: css({\n      fontSize: theme.typography.bodySmall.fontSize,\n      color: theme.colors.text.secondary,\n      display: 'flex',\n      alignItems: 'center',\n      flexGrow: 1,\n    }),\n    rowTitleAndActionsGroup: css({\n      display: 'flex',\n      minWidth: 0,\n\n      '&:hover, &:focus-within': {\n        '& > div': {\n          opacity: 1,\n        },\n      },\n    }),\n    rowActions: css({\n      display: 'flex',\n      whiteSpace: 'nowrap',\n      opacity: 0,\n      transition: '200ms opacity ease-in 200ms',\n\n      '&:hover, &:focus-within': {\n        opacity: 1,\n      },\n    }),\n    dragHandle: css({\n      display: 'flex',\n      padding: theme.spacing(0, 1),\n      alignItems: 'center',\n      justifyContent: 'flex-end',\n      cursor: 'move',\n      color: theme.colors.text.secondary,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    panelCount: css({\n      whiteSpace: 'nowrap',\n      paddingLeft: theme.spacing(2),\n      color: theme.colors.text.secondary,\n      fontStyle: 'italic',\n      fontSize: theme.typography.size.sm,\n      fontWeight: 'normal',\n      display: 'none',\n      lineHeight: '30px',\n    }),\n    panelCountCollapsed: css({\n      display: 'inline-block',\n    }),\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, ToolbarButton, useStyles2 } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneObject, SceneComponentProps, SceneLayout, SceneObjectState } from '../core/types';\nimport { getSceneGridRowStyles } from './layout/grid/SceneGridRow';\nimport { sceneGraph } from '../core/sceneGraph';\n\ninterface NestedSceneState extends SceneObjectState {\n  title: string;\n  isCollapsed?: boolean;\n  canCollapse?: boolean;\n  canRemove?: boolean;\n  body: SceneLayout;\n  controls?: SceneObject[];\n}\n\n/**\n * @internal\n * POC status, don't use this yet\n */\nexport class NestedScene extends SceneObjectBase<NestedSceneState> {\n  public static Component = NestedSceneRenderer;\n\n  public onToggle = () => {\n    this.setState({\n      isCollapsed: !this.state.isCollapsed,\n    });\n  };\n\n  /** Removes itself from its parent's children array */\n  public onRemove = () => {\n    const parent = this.parent!;\n\n    if (isSceneLayoutItem(parent)) {\n      parent.setState({\n        body: undefined,\n      });\n    }\n  };\n}\n\nexport function NestedSceneRenderer({ model }: SceneComponentProps<NestedScene>) {\n  const { title, isCollapsed, canCollapse, canRemove, body, controls } = model.useState();\n  const gridRow = useStyles2(getSceneGridRowStyles);\n  const styles = useStyles2(getStyles);\n\n  const toolbarControls = (controls ?? []).map((action) => <action.Component key={action.state.key} model={action} />);\n\n  if (canRemove) {\n    toolbarControls.push(\n      <ToolbarButton\n        icon=\"times\"\n        variant={'default'}\n        onClick={model.onRemove}\n        key=\"remove-button\"\n        aria-label=\"Remove scene\"\n      />\n    );\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={cx(styles.row, isCollapsed && styles.rowCollapsed)}>\n        <button\n          onClick={model.onToggle}\n          className={gridRow.rowTitleButton}\n          aria-label={isCollapsed ? 'Expand scene' : 'Collapse scene'}\n        >\n          {canCollapse && <Icon name={isCollapsed ? 'angle-right' : 'angle-down'} />}\n          <span className={gridRow.rowTitle} role=\"heading\">\n            {sceneGraph.interpolate(model, title, undefined, 'text')}\n          </span>\n        </button>\n        <div className={styles.actions}>{toolbarControls}</div>\n      </div>\n      {!isCollapsed && <body.Component model={body} />}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n    gap: theme.spacing(1),\n  }),\n  row: css({\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'space-between',\n    gap: theme.spacing(1),\n  }),\n  rowCollapsed: css({\n    borderBottom: `1px solid ${theme.colors.border.weak}`,\n    paddingBottom: theme.spacing(1),\n  }),\n  actions: css({\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(1),\n    justifyContent: 'flex-end',\n    flexGrow: 1,\n  }),\n});\n\nfunction isSceneLayoutItem(x: SceneObject): x is SceneObject<SceneObjectState & { body: SceneObject | undefined }> {\n  return 'body' in x.state;\n}\n","import React from 'react';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { sceneGraph } from '../core/sceneGraph';\nimport { SceneComponentProps, SceneObjectState } from '../core/types';\nimport { VariableDependencyConfig } from '../variables/VariableDependencyConfig';\nimport { useTheme2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\nexport interface SceneCanvasTextState extends SceneObjectState {\n  text: string;\n  fontSize?: number;\n  align?: 'left' | 'center' | 'right';\n  spacing?: number;\n}\n\n/**\n * Not a really useful component, just an example of how to create one\n * @internal\n */\nexport class SceneCanvasText extends SceneObjectBase<SceneCanvasTextState> {\n  protected _variableDependency = new VariableDependencyConfig(this, { statePaths: ['text'] });\n\n  public static Component = ({ model }: SceneComponentProps<SceneCanvasText>) => {\n    const { text, fontSize = 20, align = 'left', key, spacing } = model.useState();\n    const theme = useTheme2();\n\n    const style = css({\n      fontSize: fontSize,\n      display: 'flex',\n      flexGrow: 1,\n      alignItems: 'center',\n      padding: spacing ? theme.spacing(spacing, 0) : undefined,\n      justifyContent: align,\n    });\n\n    return (\n      <div className={style} data-testid={key}>\n        {sceneGraph.interpolate(model, text)}\n      </div>\n    );\n  };\n}\n","import React from 'react';\n\nimport { IconName, Input, ToolbarButton } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneComponentProps, SceneObjectState } from '../core/types';\nimport { ControlsLabel } from '../utils/ControlsLabel';\n\nexport interface ToolbarButtonState extends SceneObjectState {\n  icon: IconName;\n  onClick: () => void;\n}\n\nexport class SceneToolbarButton extends SceneObjectBase<ToolbarButtonState> {\n  public static Component = ({ model }: SceneComponentProps<SceneToolbarButton>) => {\n    const state = model.useState();\n\n    return <ToolbarButton onClick={state.onClick} icon={state.icon} />;\n  };\n}\n\nexport interface SceneToolbarInputState extends SceneObjectState {\n  value?: string;\n  label?: string;\n  onChange: (value: number) => void;\n}\n\nexport class SceneToolbarInput extends SceneObjectBase<SceneToolbarInputState> {\n  public static Component = ({ model }: SceneComponentProps<SceneToolbarInput>) => {\n    const state = model.useState();\n\n    return (\n      <div style={{ display: 'flex' }}>\n        {state.label && <ControlsLabel label={state.label} />}\n        <Input\n          defaultValue={state.value}\n          width={8}\n          onBlur={(evt) => {\n            model.state.onChange(parseInt(evt.currentTarget.value, 10));\n          }}\n        />\n      </div>\n    );\n  };\n}\n","import React from 'react';\nimport { useLocalStorage } from 'react-use';\nimport { uniqBy } from 'lodash';\n\nimport { TimeRange, isDateTime, rangeUtil, toUtc } from '@grafana/data';\nimport { TimeRangePicker } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { sceneGraph } from '../core/sceneGraph';\nimport { SceneComponentProps, SceneObjectState } from '../core/types';\n\nexport interface SceneTimePickerState extends SceneObjectState {\n  hidePicker?: boolean;\n  isOnCanvas?: boolean;\n}\n\nexport class SceneTimePicker extends SceneObjectBase<SceneTimePickerState> {\n  public static Component = SceneTimePickerRenderer;\n\n  public onZoom = () => {\n    const timeRange = sceneGraph.getTimeRange(this);\n    const zoomedTimeRange = getZoomedTimeRange(timeRange.state.value, 2);\n    timeRange.onTimeRangeChange(zoomedTimeRange);\n  };\n\n  public onChangeFiscalYearStartMonth = (month: number) => {\n    const timeRange = sceneGraph.getTimeRange(this);\n    timeRange.setState({ fiscalYearStartMonth: month });\n  };\n\n  public toAbsolute = () => {\n    const timeRange = sceneGraph.getTimeRange(this);\n    const timeRangeVal = timeRange.state.value;\n    const from = toUtc(timeRangeVal.from);\n    const to = toUtc(timeRangeVal.to);\n    timeRange.onTimeRangeChange({ from, to, raw: { from, to } });\n  };\n\n  public onMoveBackward = () => {\n    const timeRange = sceneGraph.getTimeRange(this);\n    const {\n      state: { value: range },\n    } = timeRange;\n\n    timeRange.onTimeRangeChange(getShiftedTimeRange(TimeRangeDirection.Backward, range, Date.now()));\n  };\n\n  public onMoveForward = () => {\n    const timeRange = sceneGraph.getTimeRange(this);\n    const {\n      state: { value: range },\n    } = timeRange;\n\n    timeRange.onTimeRangeChange(getShiftedTimeRange(TimeRangeDirection.Forward, range, Date.now()));\n  };\n}\n\nfunction SceneTimePickerRenderer({ model }: SceneComponentProps<SceneTimePicker>) {\n  const { hidePicker, isOnCanvas } = model.useState();\n  const timeRange = sceneGraph.getTimeRange(model);\n  const timeZone = timeRange.getTimeZone();\n  const timeRangeState = timeRange.useState();\n  const [timeRangeHistory, setTimeRangeHistory] = useLocalStorage<TimeRange[]>(HISTORY_LOCAL_STORAGE_KEY, [], {\n    raw: false,\n    serializer: serializeHistory,\n    deserializer: deserializeHistory,\n  });\n\n  if (hidePicker) {\n    return null;\n  }\n\n  return (\n    <TimeRangePicker\n      isOnCanvas={isOnCanvas ?? true}\n      value={timeRangeState.value}\n      onChange={(range) => {\n        if (isAbsolute(range)) {\n          setTimeRangeHistory([range, ...(timeRangeHistory ?? [])]);\n        }\n\n        timeRange.onTimeRangeChange(range);\n      }}\n      timeZone={timeZone}\n      fiscalYearStartMonth={timeRangeState.fiscalYearStartMonth}\n      onMoveBackward={model.onMoveBackward}\n      onMoveForward={model.onMoveForward}\n      onZoom={model.onZoom}\n      onChangeTimeZone={timeRange.onTimeZoneChange}\n      onChangeFiscalYearStartMonth={model.onChangeFiscalYearStartMonth}\n      // @ts-ignore TODO remove after grafana/ui update to 11.2.0\n      weekStart={timeRangeState.weekStart}\n      history={timeRangeHistory}\n    />\n  );\n}\n\nexport function getZoomedTimeRange(timeRange: TimeRange, factor: number): TimeRange {\n  const timespan = timeRange.to.valueOf() - timeRange.from.valueOf();\n  const center = timeRange.to.valueOf() - timespan / 2;\n  // If the timepsan is 0, zooming out would do nothing, so we force a zoom out to 30s\n  const newTimespan = timespan === 0 ? 30000 : timespan * factor;\n\n  const to = center + newTimespan / 2;\n  const from = center - newTimespan / 2;\n\n  return { from: toUtc(from), to: toUtc(to), raw: { from: toUtc(from), to: toUtc(to) } };\n}\n\nexport enum TimeRangeDirection {\n  Backward,\n  Forward,\n}\n\nexport function getShiftedTimeRange(dir: TimeRangeDirection, timeRange: TimeRange, upperLimit: number): TimeRange {\n  const oldTo = timeRange.to.valueOf();\n  const oldFrom = timeRange.from.valueOf();\n  const halfSpan = (oldTo - oldFrom) / 2;\n\n  let fromRaw: number;\n  let toRaw: number;\n  if (dir === TimeRangeDirection.Backward) {\n    fromRaw = oldFrom - halfSpan;\n    toRaw = oldTo - halfSpan;\n  } else {\n    fromRaw = oldFrom + halfSpan;\n    toRaw = oldTo + halfSpan;\n\n    if (toRaw > upperLimit && oldTo < upperLimit) {\n      toRaw = upperLimit;\n      fromRaw = oldFrom;\n    }\n  }\n\n  const from = toUtc(fromRaw);\n  const to = toUtc(toRaw);\n  return {\n    from,\n    to,\n    raw: { from, to },\n  };\n}\n\nconst HISTORY_LOCAL_STORAGE_KEY = 'grafana.dashboard.timepicker.history';\n\n// Simplified object to store in local storage\ninterface TimePickerHistoryItem {\n  from: string;\n  to: string;\n}\n\nfunction deserializeHistory(value: string): TimeRange[] {\n  const values: TimePickerHistoryItem[] = JSON.parse(value);\n  // The history is saved in UTC and with the default date format, so we need to pass those values to the convertRawToRange\n  return values.map((item) => rangeUtil.convertRawToRange(item, 'utc', undefined, 'YYYY-MM-DD HH:mm:ss'));\n}\n\nfunction serializeHistory(values: TimeRange[]) {\n  return JSON.stringify(\n    limit(\n      values.map((v) => ({\n        from: typeof v.raw.from === 'string' ? v.raw.from : v.raw.from.toISOString(),\n        to: typeof v.raw.to === 'string' ? v.raw.to : v.raw.to.toISOString(),\n      }))\n    )\n  );\n}\n\nfunction limit(value: TimePickerHistoryItem[]): TimePickerHistoryItem[] {\n  return uniqBy(value, (v) => v.from + v.to).slice(0, 4);\n}\n\nfunction isAbsolute(value: TimeRange): boolean {\n  return isDateTime(value.raw.from) || isDateTime(value.raw.to);\n}\n","import React from 'react';\nimport { Unsubscribable } from 'rxjs';\nimport { rangeUtil } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { RefreshPicker } from '@grafana/ui';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { sceneGraph } from '../core/sceneGraph';\nimport { SceneComponentProps, SceneObject, SceneObjectState, SceneObjectUrlValues } from '../core/types';\nimport { SceneObjectUrlSyncConfig } from '../services/SceneObjectUrlSyncConfig';\n\nexport const DEFAULT_INTERVALS = ['5s', '10s', '30s', '1m', '5m', '15m', '30m', '1h', '2h', '1d'];\n\nexport interface SceneRefreshPickerState extends SceneObjectState {\n  /**\n   * Refresh interval, e.g. 5s, 1m, 2h\n   */\n  refresh: string;\n  autoEnabled?: boolean;\n  autoMinInterval?: string;\n  autoValue?: string;\n  /**\n   * List of allowed refresh intervals, e.g. ['5s', '1m']\n   */\n  intervals?: string[];\n  isOnCanvas?: boolean;\n  primary?: boolean;\n  withText?: boolean;\n  /**\n   * Overrides the default minRefreshInterval from the grafana config. Can be set to \"0s\" to remove the minimum refresh interval.\n   */\n  minRefreshInterval?: string;\n}\n\nexport class SceneRefreshPicker extends SceneObjectBase<SceneRefreshPickerState> {\n  public static Component = SceneRefreshPickerRenderer;\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['refresh'] });\n  private _intervalTimer: ReturnType<typeof setInterval> | undefined;\n  private _autoTimeRangeListener: Unsubscribable | undefined;\n  private _autoRefreshBlocked: boolean = false;\n\n  public constructor(state: Partial<SceneRefreshPickerState>) {\n    const filterDissalowedIntervals = (i: string) => {\n      const minInterval = state.minRefreshInterval ?? config.minRefreshInterval;\n      try {\n        return minInterval ? rangeUtil.intervalToMs(i) >= rangeUtil.intervalToMs(minInterval) : true;\n      } catch (e) {\n        // Unable to parse interval\n        return false;\n      }\n    };\n\n    super({\n      refresh: '',\n      ...state,\n      autoValue: undefined,\n      autoEnabled: state.autoEnabled ?? true,\n      autoMinInterval: state.autoMinInterval ?? config.minRefreshInterval,\n      intervals: (state.intervals ?? DEFAULT_INTERVALS).filter(filterDissalowedIntervals),\n    });\n\n    this.addActivationHandler(() => {\n      this.setupIntervalTimer();\n\n      const onVisibilityChange = () => {\n        if (this._autoRefreshBlocked && document.visibilityState === 'visible') {\n          this._autoRefreshBlocked = false;\n          this.onRefresh();\n        }\n      };\n\n      document.addEventListener('visibilitychange', onVisibilityChange);\n\n      return () => {\n        if (this._intervalTimer) {\n          clearInterval(this._intervalTimer);\n        }\n\n        document.removeEventListener('visibilitychange', onVisibilityChange);\n        this._autoTimeRangeListener?.unsubscribe();\n      };\n    });\n  }\n\n  public onRefresh = () => {\n    const queryController = sceneGraph.getQueryController(this);\n    if (queryController?.state.isRunning) {\n      queryController.cancelAll();\n      return;\n    }\n\n    const timeRange = sceneGraph.getTimeRange(this);\n\n    if (this._intervalTimer) {\n      clearInterval(this._intervalTimer);\n    }\n\n    timeRange.onRefresh();\n    this.setupIntervalTimer();\n  };\n\n  public onIntervalChanged = (interval: string) => {\n    this.setState({ refresh: interval });\n    this.setupIntervalTimer();\n  };\n\n  public getUrlState() {\n    let refresh: string | undefined = this.state.refresh;\n\n    if (typeof refresh !== 'string' || refresh.length === 0) {\n      refresh = undefined;\n    }\n\n    return { refresh };\n  }\n\n  public updateFromUrl(values: SceneObjectUrlValues) {\n    const { intervals } = this.state;\n    let refresh = values.refresh;\n\n    if (typeof refresh === 'string' && isIntervalString(refresh)) {\n      if (intervals?.includes(refresh)) {\n        this.setState({ refresh });\n      } else {\n        this.setState({\n          // Default to the first refresh interval if the interval from the URL is not allowed, just like in the old architecture.\n          refresh: intervals ? intervals[0] : undefined,\n        });\n      }\n    }\n  }\n\n  private setupAutoTimeRangeListener = () => {\n    // If the time range has changed, we need to recalculate the auto interval but prevent unnecessary processing\n    return sceneGraph.getTimeRange(this).subscribeToState((newState, prevState) => {\n      if (newState.from !== prevState.from || newState.to !== prevState.to) {\n        this.setupIntervalTimer();\n      }\n    });\n  };\n\n  private calculateAutoRefreshInterval = () => {\n    const timeRange = sceneGraph.getTimeRange(this);\n    const resolution = window?.innerWidth ?? 2000;\n    return rangeUtil.calculateInterval(timeRange.state.value, resolution, this.state.autoMinInterval);\n  };\n\n  private isTabVisible() {\n    return document.visibilityState === undefined || document.visibilityState === 'visible';\n  }\n\n  private setupIntervalTimer = () => {\n    const timeRange = sceneGraph.getTimeRange(this);\n    const { refresh, intervals } = this.state;\n\n    if (this._intervalTimer || refresh === '') {\n      clearInterval(this._intervalTimer);\n    }\n\n    if (refresh === '') {\n      return;\n    }\n\n    // If the provided interval is not allowed\n    if (refresh !== RefreshPicker.autoOption.value && intervals && !intervals.includes(refresh)) {\n      return;\n    }\n\n    let intervalMs: number;\n\n    // Unsubscribe from previous listener no matter what\n    this._autoTimeRangeListener?.unsubscribe();\n\n    if (refresh === RefreshPicker.autoOption.value) {\n      const autoRefreshInterval = this.calculateAutoRefreshInterval();\n\n      intervalMs = autoRefreshInterval.intervalMs;\n\n      this._autoTimeRangeListener = this.setupAutoTimeRangeListener();\n\n      if (autoRefreshInterval.interval !== this.state.autoValue) {\n        this.setState({ autoValue: autoRefreshInterval.interval });\n      }\n    } else {\n      intervalMs = rangeUtil.intervalToMs(refresh);\n    }\n\n    this._intervalTimer = setInterval(() => {\n      if (this.isTabVisible()) {\n        timeRange.onRefresh();\n      } else {\n        this._autoRefreshBlocked = true;\n      }\n    }, intervalMs);\n  };\n}\n\nexport function SceneRefreshPickerRenderer({ model }: SceneComponentProps<SceneRefreshPicker>) {\n  const { refresh, intervals, autoEnabled, autoValue, isOnCanvas, primary, withText } = model.useState();\n  const isRunning = useQueryControllerState(model);\n\n  let text = refresh === RefreshPicker.autoOption?.value ? autoValue : withText ? 'Refresh' : undefined;\n  let tooltip: string | undefined;\n  let width: string | undefined;\n\n  if (isRunning) {\n    tooltip = 'Cancel all queries';\n\n    if (withText) {\n      text = 'Cancel';\n    }\n  }\n\n  if (withText) {\n    width = '96px';\n  }\n\n  return (\n    <RefreshPicker\n      showAutoInterval={autoEnabled}\n      value={refresh}\n      intervals={intervals}\n      tooltip={tooltip}\n      width={width}\n      text={text}\n      onRefresh={model.onRefresh}\n      primary={primary}\n      onIntervalChanged={model.onIntervalChanged}\n      isLoading={isRunning}\n      isOnCanvas={isOnCanvas ?? true}\n    />\n  );\n}\n\nfunction useQueryControllerState(model: SceneObject): boolean {\n  const queryController = sceneGraph.getQueryController(model);\n  if (!queryController) {\n    return false;\n  }\n\n  return queryController.useState().isRunning;\n}\n\nfunction isIntervalString(str: string): boolean {\n  try {\n    const res = rangeUtil.describeInterval(str);\n    return res.count > 0;\n  } catch {\n    return false;\n  }\n}\n","export const getCompareSeriesRefId = (refId: string) => `${refId}-compare`;\n","import { DataQueryRequest, DateTime, dateTime, FieldType, GrafanaTheme2, rangeUtil, TimeRange } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { ButtonGroup, ButtonSelect, Checkbox, ToolbarButton, useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { sceneGraph } from '../core/sceneGraph';\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneComponentProps, SceneDataQuery, SceneObjectState, SceneObjectUrlValues } from '../core/types';\nimport { DataQueryExtended } from '../querying/SceneQueryRunner';\nimport { ExtraQueryDescriptor, ExtraQueryDataProcessor, ExtraQueryProvider } from '../querying/ExtraQueryProvider';\nimport { SceneObjectUrlSyncConfig } from '../services/SceneObjectUrlSyncConfig';\nimport { getCompareSeriesRefId } from '../utils/getCompareSeriesRefId';\nimport { parseUrlParam } from '../utils/parseUrlParam';\nimport { css } from '@emotion/css';\nimport { of } from 'rxjs';\n\ninterface SceneTimeRangeCompareState extends SceneObjectState {\n  compareWith?: string;\n  compareOptions: Array<{ label: string; value: string }>;\n}\n\nconst PREVIOUS_PERIOD_VALUE = '__previousPeriod';\nconst NO_PERIOD_VALUE = '__noPeriod';\n\nexport const PREVIOUS_PERIOD_COMPARE_OPTION = {\n  label: 'Previous period',\n  value: PREVIOUS_PERIOD_VALUE,\n};\n\nexport const NO_COMPARE_OPTION = {\n  label: 'No comparison',\n  value: NO_PERIOD_VALUE,\n};\n\nexport const DEFAULT_COMPARE_OPTIONS = [\n  { label: 'Day before', value: '24h' },\n  { label: 'Week before', value: '1w' },\n  { label: 'Month before', value: '1M' },\n];\n\nexport class SceneTimeRangeCompare\n  extends SceneObjectBase<SceneTimeRangeCompareState>\n  implements ExtraQueryProvider<SceneTimeRangeCompareState>\n{\n  static Component = SceneTimeRangeCompareRenderer;\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['compareWith'] });\n\n  public constructor(state: Partial<SceneTimeRangeCompareState>) {\n    super({ compareOptions: DEFAULT_COMPARE_OPTIONS, ...state });\n    this.addActivationHandler(this._onActivate);\n  }\n\n  private _onActivate = () => {\n    const sceneTimeRange = sceneGraph.getTimeRange(this);\n    this.setState({ compareOptions: this.getCompareOptions(sceneTimeRange.state.value) });\n\n    this._subs.add(\n      sceneTimeRange.subscribeToState((timeRange) => {\n        const compareOptions = this.getCompareOptions(timeRange.value);\n        const stateUpdate: Partial<SceneTimeRangeCompareState> = { compareOptions };\n\n        // if current compareWith is not applicable to the new time range, set it to previous period comparison\n        if (Boolean(this.state.compareWith) && !compareOptions.find(({ value }) => value === this.state.compareWith)) {\n          stateUpdate.compareWith = PREVIOUS_PERIOD_VALUE;\n        }\n\n        this.setState(stateUpdate);\n      })\n    );\n  };\n\n  public getCompareOptions = (timeRange: TimeRange) => {\n    const diffDays = Math.ceil(timeRange.to.diff(timeRange.from));\n\n    const matchIndex = DEFAULT_COMPARE_OPTIONS.findIndex(({ value }) => {\n      const intervalInMs = rangeUtil.intervalToMs(value);\n      return intervalInMs >= diffDays;\n    });\n\n    return [\n      NO_COMPARE_OPTION,\n      PREVIOUS_PERIOD_COMPARE_OPTION,\n      ...DEFAULT_COMPARE_OPTIONS.slice(matchIndex).map(({ label, value }) => ({ label, value })),\n    ];\n  };\n\n  public onCompareWithChanged = (compareWith: string) => {\n    if (compareWith === NO_PERIOD_VALUE) {\n      this.onClearCompare();\n    } else {\n      this.setState({ compareWith });\n    }\n  };\n\n  public onClearCompare = () => {\n    this.setState({ compareWith: undefined });\n  };\n\n  // Get a time shifted request to compare with the primary request.\n  public getExtraQueries(request: DataQueryRequest): ExtraQueryDescriptor[] {\n    const extraQueries: ExtraQueryDescriptor[] = [];\n    const compareRange = this.getCompareTimeRange(request.range);\n    if (!compareRange) {\n      return extraQueries;\n    }\n\n    const targets = request.targets.filter((query: DataQueryExtended) => query.timeRangeCompare !== false);\n    if (targets.length) {\n      extraQueries.push({\n        req: {\n          ...request,\n          targets,\n          range: compareRange,\n        },\n        processor: timeShiftAlignmentProcessor,\n      });\n    }\n    return extraQueries;\n  }\n\n  // The query runner should rerun the comparison query if the compareWith value has changed and there are queries that haven't opted out of TWC\n  public shouldRerun(\n    prev: SceneTimeRangeCompareState,\n    next: SceneTimeRangeCompareState,\n    queries: SceneDataQuery[]\n  ): boolean {\n    return (\n      prev.compareWith !== next.compareWith && queries.find((query) => query.timeRangeCompare !== false) !== undefined\n    );\n  }\n\n  public getCompareTimeRange(timeRange: TimeRange): TimeRange | undefined {\n    let compareFrom: DateTime;\n    let compareTo: DateTime;\n\n    if (this.state.compareWith) {\n      if (this.state.compareWith === PREVIOUS_PERIOD_VALUE) {\n        const diffMs = timeRange.to.diff(timeRange.from);\n        compareFrom = dateTime(timeRange.from!).subtract(diffMs);\n        compareTo = dateTime(timeRange.to!).subtract(diffMs);\n      } else {\n        compareFrom = dateTime(timeRange.from!).subtract(rangeUtil.intervalToMs(this.state.compareWith));\n        compareTo = dateTime(timeRange.to!).subtract(rangeUtil.intervalToMs(this.state.compareWith));\n      }\n      return {\n        from: compareFrom,\n        to: compareTo,\n        raw: {\n          from: compareFrom,\n          to: compareTo,\n        },\n      };\n    }\n\n    return undefined;\n  }\n\n  public getUrlState(): SceneObjectUrlValues {\n    return {\n      compareWith: this.state.compareWith,\n    };\n  }\n\n  public updateFromUrl(values: SceneObjectUrlValues) {\n    if (!values.compareWith) {\n      return;\n    }\n\n    const compareWith = parseUrlParam(values.compareWith);\n\n    if (compareWith) {\n      const compareOptions = this.getCompareOptions(sceneGraph.getTimeRange(this).state.value);\n\n      if (compareOptions.find(({ value }) => value === compareWith)) {\n        this.setState({\n          compareWith,\n        });\n      } else {\n        this.setState({\n          compareWith: '__previousPeriod',\n        });\n      }\n    }\n  }\n}\n\n// Processor function for use with time shifted comparison series.\n// This aligns the secondary series with the primary and adds custom\n// metadata and config to the secondary series' fields so that it is\n// rendered appropriately.\nconst timeShiftAlignmentProcessor: ExtraQueryDataProcessor = (primary, secondary) => {\n  const diff = secondary.timeRange.from.diff(primary.timeRange.from);\n  secondary.series.forEach((series) => {\n    series.refId = getCompareSeriesRefId(series.refId || '');\n    series.meta = {\n      ...series.meta,\n      // @ts-ignore Remove when https://github.com/grafana/grafana/pull/71129 is released\n      timeCompare: {\n        diffMs: diff,\n        isTimeShiftQuery: true,\n      },\n    };\n    series.fields.forEach((field) => {\n      // Align compare series time stamps with reference series\n      if (field.type === FieldType.time) {\n        field.values = field.values.map((v) => {\n          return diff < 0 ? v - diff : v + diff;\n        });\n      }\n\n      field.config = {\n        ...field.config,\n        color: {\n          mode: 'fixed',\n          fixedColor: config.theme.palette.gray60,\n        },\n      };\n      return field;\n    });\n  });\n  return of(secondary);\n};\n\nfunction SceneTimeRangeCompareRenderer({ model }: SceneComponentProps<SceneTimeRangeCompare>) {\n  const styles = useStyles2(getStyles);\n  const { compareWith, compareOptions } = model.useState();\n\n  const [previousCompare, setPreviousCompare] = React.useState(compareWith);\n  const previousValue = compareOptions.find(({ value }) => value === previousCompare) ?? PREVIOUS_PERIOD_COMPARE_OPTION;\n\n  const value = compareOptions.find(({ value }) => value === compareWith);\n  const enabled = Boolean(value);\n\n  const onClick = () => {\n    if (enabled) {\n      setPreviousCompare(compareWith);\n      model.onClearCompare();\n    } else if (!enabled) {\n      model.onCompareWithChanged(previousValue.value);\n    }\n  };\n\n  return (\n    <ButtonGroup>\n      <ToolbarButton\n        variant=\"canvas\"\n        tooltip=\"Enable time frame comparison\"\n        onClick={(e) => {\n          e.stopPropagation();\n          e.preventDefault();\n          onClick();\n        }}\n      >\n        <Checkbox label=\" \" value={enabled} onClick={onClick} />\n        Comparison\n      </ToolbarButton>\n\n      {enabled ? (\n        <ButtonSelect\n          variant=\"canvas\"\n          value={value}\n          options={compareOptions}\n          onChange={(v) => {\n            model.onCompareWithChanged(v.value!);\n          }}\n        />\n      ) : (\n        <ToolbarButton className={styles.previewButton} disabled variant=\"canvas\" isOpen={false}>\n          {previousValue.label}\n        </ToolbarButton>\n      )}\n    </ButtonGroup>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    previewButton: css({\n      '&:disabled': {\n        border: `1px solid ${theme.colors.secondary.border}`,\n        color: theme.colors.text.disabled,\n        opacity: 1,\n      },\n    }),\n  };\n}\n","import React from 'react';\n\nimport { LoadingState, PanelData, DataFrame } from '@grafana/data';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { sceneGraph } from '../core/sceneGraph';\nimport { SceneComponentProps, SceneLayout, SceneObject, SceneObjectState } from '../core/types';\n\ninterface SceneByFrameRepeaterState extends SceneObjectState {\n  body: SceneLayout;\n  getLayoutChild(data: PanelData, frame: DataFrame, frameIndex: number): SceneObject;\n}\n\nexport class SceneByFrameRepeater extends SceneObjectBase<SceneByFrameRepeaterState> {\n  public constructor(state: SceneByFrameRepeaterState) {\n    super(state);\n\n    this.addActivationHandler(() => {\n      const dataProvider = sceneGraph.getData(this);\n\n      this._subs.add(\n        dataProvider.subscribeToState((data) => {\n          if (data.data?.state === LoadingState.Done) {\n            this.performRepeat(data.data);\n          }\n        })\n      );\n\n      if (dataProvider.state.data) {\n        this.performRepeat(dataProvider.state.data);\n      }\n    });\n  }\n\n  private performRepeat(data: PanelData) {\n    const newChildren: SceneObject[] = [];\n\n    for (let seriesIndex = 0; seriesIndex < data.series.length; seriesIndex++) {\n      const layoutChild = this.state.getLayoutChild(data, data.series[seriesIndex], seriesIndex);\n      newChildren.push(layoutChild);\n    }\n\n    this.state.body.setState({ children: newChildren });\n  }\n\n  public static Component = ({ model }: SceneComponentProps<SceneByFrameRepeater>) => {\n    const { body } = model.useState();\n    return <body.Component model={body} />;\n  };\n}\n","import React from 'react';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { sceneGraph } from '../core/sceneGraph';\nimport { SceneComponentProps, SceneLayout, SceneObject, SceneObjectState } from '../core/types';\nimport { VariableDependencyConfig } from '../variables/VariableDependencyConfig';\nimport { VariableValueOption } from '../variables/types';\nimport { MultiValueVariable } from '../variables/variants/MultiValueVariable';\n\ninterface SceneByVariableRepeaterState extends SceneObjectState {\n  body: SceneLayout;\n  variableName: string;\n  getLayoutChild(option: VariableValueOption): SceneObject;\n}\n\nexport class SceneByVariableRepeater extends SceneObjectBase<SceneByVariableRepeaterState> {\n  protected _variableDependency: VariableDependencyConfig<SceneByVariableRepeaterState> = new VariableDependencyConfig(\n    this,\n    {\n      variableNames: [this.state.variableName],\n      onVariableUpdateCompleted: () => this.performRepeat(),\n    }\n  );\n\n  public constructor(state: SceneByVariableRepeaterState) {\n    super(state);\n\n    this.addActivationHandler(() => this.performRepeat());\n  }\n\n  private performRepeat() {\n    if (this._variableDependency.hasDependencyInLoadingState()) {\n      return;\n    }\n\n    const variable = sceneGraph.lookupVariable(this.state.variableName, this);\n    if (!(variable instanceof MultiValueVariable)) {\n      console.error('SceneByVariableRepeater: variable is not a MultiValueVariable');\n      return;\n    }\n\n    const values = getMultiVariableValues(variable);\n    const newChildren: SceneObject[] = [];\n\n    for (const option of values) {\n      const layoutChild = this.state.getLayoutChild(option);\n      newChildren.push(layoutChild);\n    }\n\n    this.state.body.setState({ children: newChildren });\n  }\n\n  public static Component = ({ model }: SceneComponentProps<SceneByVariableRepeater>) => {\n    const { body } = model.useState();\n    return <body.Component model={body} />;\n  };\n}\n\nexport function getMultiVariableValues(variable: MultiValueVariable): VariableValueOption[] {\n  const { value, text, options } = variable.state;\n\n  if (variable.hasAllValue()) {\n    return options;\n  }\n\n  if (Array.isArray(value) && Array.isArray(text)) {\n    return value.map((v, i) => ({ value: v, label: text[i] as string }));\n  }\n\n  return [{ value: value as string, label: text as string }];\n}\n","import React from 'react';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneComponentProps } from '../core/types';\n\nexport class SceneControlsSpacer extends SceneObjectBase {\n  public constructor() {\n    super({});\n  }\n\n  public get Component() {\n    // Skipping wrapper component for this scene object so that it renders right away\n    return SceneControlsSpacer.Component;\n  }\n\n  public static Component = (_props: SceneComponentProps<SceneControlsSpacer>) => {\n    return <div style={{ flexGrow: 1 }} />;\n  };\n}\n","import { css, CSSObject } from '@emotion/css';\nimport { config } from '@grafana/runtime';\nimport React, { ComponentType, CSSProperties, useMemo } from 'react';\n\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneComponentProps, SceneLayout, SceneObjectState, SceneObject } from '../../core/types';\n\nexport interface SceneFlexItemStateLike extends SceneFlexItemPlacement, SceneObjectState {}\n\nexport interface SceneFlexItemLike extends SceneObject<SceneFlexItemStateLike> {}\n\ninterface SceneFlexLayoutState extends SceneObjectState, SceneFlexItemPlacement {\n  children: SceneFlexItemLike[];\n}\n\nexport class SceneFlexLayout extends SceneObjectBase<SceneFlexLayoutState> implements SceneLayout {\n  public static Component = SceneFlexLayoutRenderer;\n\n  public toggleDirection() {\n    this.setState({\n      direction: this.state.direction === 'row' ? 'column' : 'row',\n    });\n  }\n\n  public isDraggable(): boolean {\n    return false;\n  }\n}\n\nfunction SceneFlexLayoutRenderer({ model, parentState }: SceneFlexItemRenderProps<SceneFlexLayout>) {\n  const { children, isHidden } = model.useState();\n  const style = useLayoutStyle(model.state, parentState);\n\n  if (isHidden) {\n    return null;\n  }\n\n  return (\n    <div className={style}>\n      {children.map((item) => {\n        const Component = item.Component as ComponentType<SceneFlexItemRenderProps<SceneObject>>;\n        return <Component key={item.state.key} model={item} parentState={model.state} />;\n      })}\n    </div>\n  );\n}\n\nexport interface SceneFlexItemPlacement {\n  wrap?: CSSProperties['flexWrap'];\n  direction?: CSSProperties['flexDirection'];\n  width?: CSSProperties['width'];\n  height?: CSSProperties['height'];\n  minWidth?: CSSProperties['minWidth'];\n  minHeight?: CSSProperties['minHeight'];\n  maxWidth?: CSSProperties['maxWidth'];\n  maxHeight?: CSSProperties['maxHeight'];\n  xSizing?: 'fill' | 'content';\n  ySizing?: 'fill' | 'content';\n  /**\n   * True when the item should rendered but not visible.\n   * Useful for conditional display of layout items\n   */\n  isHidden?: boolean;\n\n  /**\n   * Set direction for smaller screens. This defaults to column.\n   * This equals media query theme.breakpoints.down('md')\n   */\n  md?: SceneFlexItemPlacement;\n}\n\nexport interface SceneFlexItemState extends SceneFlexItemPlacement, SceneObjectState {\n  body: SceneObject | undefined;\n}\n\ninterface SceneFlexItemRenderProps<T> extends SceneComponentProps<T> {\n  parentState?: SceneFlexItemPlacement;\n}\n\nexport class SceneFlexItem extends SceneObjectBase<SceneFlexItemState> {\n  public static Component = SceneFlexItemRenderer;\n}\n\nfunction SceneFlexItemRenderer({ model, parentState }: SceneFlexItemRenderProps<SceneFlexItem>) {\n  if (!parentState) {\n    throw new Error('SceneFlexItem must be a child of SceneFlexLayout');\n  }\n\n  const { body, isHidden } = model.useState();\n  const style = useLayoutItemStyle(model.state, parentState);\n\n  if (!body || isHidden) {\n    return null;\n  }\n\n  return (\n    <div className={style}>\n      <body.Component model={body} />\n    </div>\n  );\n}\nfunction applyItemStyles(style: CSSObject, state: SceneFlexItemPlacement, parentState: SceneFlexItemPlacement) {\n  const parentDirection = parentState.direction ?? 'row';\n  const { xSizing = 'fill', ySizing = 'fill' } = state;\n\n  style.display = 'flex';\n  style.position = 'relative';\n  style.flexDirection = parentDirection;\n\n  if (parentDirection === 'column') {\n    if (state.height) {\n      style.height = state.height;\n    } else {\n      style.flexGrow = ySizing === 'fill' ? 1 : 0;\n    }\n\n    if (state.width) {\n      style.width = state.width;\n    } else {\n      style.alignSelf = xSizing === 'fill' ? 'stretch' : 'flex-start';\n    }\n  } else {\n    if (state.height) {\n      style.height = state.height;\n    } else {\n      style.alignSelf = ySizing === 'fill' ? 'stretch' : 'flex-start';\n    }\n\n    if (state.width) {\n      style.width = state.width;\n    } else {\n      style.flexGrow = xSizing === 'fill' ? 1 : 0;\n    }\n  }\n\n  style.minWidth = state.minWidth;\n  style.maxWidth = state.maxWidth;\n  style.maxHeight = state.maxHeight;\n\n  // For responsive layouts to work we default use the minHeight or height of the parent\n  style.minHeight = state.minHeight ?? parentState.minHeight;\n  style.height = state.height ?? parentState.height;\n\n  return style;\n}\n\nfunction useLayoutItemStyle(state: SceneFlexItemState, parentState: SceneFlexItemPlacement) {\n  return useMemo(() => {\n    const theme = config.theme2;\n    const style = applyItemStyles({}, state, parentState);\n\n    // Unset maxWidth for small screens by default\n    style[theme.breakpoints.down('md')] = {\n      maxWidth: state.md?.maxWidth ?? 'unset',\n      maxHeight: state.md?.maxHeight ?? 'unset',\n      height: state.md?.height ?? parentState.md?.height,\n      width: state.md?.width ?? parentState.md?.width,\n    };\n\n    return css(style);\n  }, [state, parentState]);\n}\n\nfunction useLayoutStyle(state: SceneFlexLayoutState, parentState?: SceneFlexItemPlacement) {\n  return useMemo(() => {\n    const { direction = 'row', wrap } = state;\n    // only need breakpoints so accessing theme from config instead of context is ok\n    const theme = config.theme2;\n\n    const style: CSSObject = {};\n\n    if (parentState) {\n      applyItemStyles(style, state, parentState);\n    } else {\n      style.display = 'flex';\n      style.flexGrow = 1;\n      style.minWidth = state.minWidth;\n      style.minHeight = state.minHeight;\n    }\n\n    style.flexDirection = direction;\n    style.gap = '8px';\n    style.flexWrap = wrap || 'nowrap';\n    style.alignContent = 'baseline';\n    style.minWidth = style.minWidth || 0;\n    style.minHeight = style.minHeight || 0;\n\n    style[theme.breakpoints.down('md')] = {\n      flexDirection: state.md?.direction ?? 'column',\n      maxWidth: state.md?.maxWidth ?? 'unset',\n      maxHeight: state.md?.maxHeight ?? 'unset',\n      height: state.md?.height ?? 'unset',\n      width: state.md?.width ?? 'unset',\n    };\n\n    return css(style);\n  }, [parentState, state]);\n}\n","import { css, CSSObject } from '@emotion/css';\nimport React, { ComponentType, CSSProperties, useMemo } from 'react';\n\nimport { SceneObjectBase } from '../../../core/SceneObjectBase';\nimport { SceneComponentProps, SceneLayout, SceneObjectState, SceneObject } from '../../../core/types';\nimport { config } from '@grafana/runtime';\nimport { LazyLoader } from '../LazyLoader';\n\nexport interface SceneCSSGridLayoutState extends SceneObjectState, SceneCSSGridLayoutOptions {\n  children: Array<SceneCSSGridItem | SceneObject>;\n  /**\n   * True when the item should rendered but not visible.\n   * Useful for conditional display of layout items\n   */\n  isHidden?: boolean;\n  /**\n   * For media query for sceens smaller than md breakpoint\n   */\n  md?: SceneCSSGridLayoutOptions;\n  /** True when the items should be lazy loaded */\n  isLazy?: boolean;\n}\n\nexport interface SceneCSSGridLayoutOptions {\n  /**\n   * Useful for setting a height on items without specifying how many rows there will be.\n   * Defaults to 320px\n   */\n  autoRows?: CSSProperties['gridAutoRows'];\n  /**\n   * This overrides the autoRows with a specific row template.\n   */\n  templateRows?: CSSProperties['gridTemplateRows'];\n  /**\n   * Defaults to repeat(auto-fit, minmax(400px, 1fr)). This pattern us useful for equally sized items with a min width of 400px\n   * and dynamic max width split equally among columns.\n   */\n  templateColumns: CSSProperties['gridTemplateColumns'];\n  /** In Grafana design system grid units (8px)  */\n  rowGap: number;\n  /** In Grafana design system grid units (8px)  */\n  columnGap: number;\n  justifyItems?: CSSProperties['justifyItems'];\n  alignItems?: CSSProperties['alignItems'];\n  justifyContent?: CSSProperties['justifyContent'];\n}\n\nexport class SceneCSSGridLayout extends SceneObjectBase<SceneCSSGridLayoutState> implements SceneLayout {\n  public static Component = SceneCSSGridLayoutRenderer;\n\n  public constructor(state: Partial<SceneCSSGridLayoutState>) {\n    super({\n      rowGap: 1,\n      columnGap: 1,\n      templateColumns: 'repeat(auto-fit, minmax(400px, 1fr))',\n      autoRows: state.autoRows ?? `320px`,\n      children: state.children ?? [],\n      ...state,\n    });\n  }\n\n  public isDraggable(): boolean {\n    return false;\n  }\n}\n\nfunction SceneCSSGridLayoutRenderer({ model }: SceneCSSGridItemRenderProps<SceneCSSGridLayout>) {\n  const { children, isHidden, isLazy } = model.useState();\n  const style = useLayoutStyle(model.state);\n\n  if (isHidden) {\n    return null;\n  }\n\n  return (\n    <div className={style}>\n      {children.map((item) => {\n        const Component = item.Component as ComponentType<SceneCSSGridItemRenderProps<SceneObject>>;\n        \n        if (isLazy) {\n          return (\n            <LazyLoader key={item.state.key!} className={style}>\n              <Component key={item.state.key} model={item} parentState={model.state} />\n            </LazyLoader>\n          );\n        }\n        return <Component key={item.state.key} model={item} parentState={model.state} />;\n      })}\n    </div>\n  );\n}\n\nexport interface SceneCSSGridItemPlacement {\n  /**\n   * True when the item should rendered but not visible.\n   * Useful for conditional display of layout items\n   */\n  isHidden?: boolean;\n  /**\n   * Useful for making content span across multiple rows or columns\n   */\n  gridColumn?: CSSProperties['gridColumn'];\n  gridRow?: CSSProperties['gridRow'];\n}\n\nexport interface SceneCSSGridItemState extends SceneCSSGridItemPlacement, SceneObjectState {\n  body: SceneObject | undefined;\n}\n\ninterface SceneCSSGridItemRenderProps<T> extends SceneComponentProps<T> {\n  parentState?: SceneCSSGridItemPlacement;\n}\n\nexport class SceneCSSGridItem extends SceneObjectBase<SceneCSSGridItemState> {\n  public static Component = SceneCSSGridItemRenderer;\n}\n\nfunction SceneCSSGridItemRenderer({ model, parentState }: SceneCSSGridItemRenderProps<SceneCSSGridItem>) {\n  if (!parentState) {\n    throw new Error('SceneCSSGridItem must be a child of SceneCSSGridLayout');\n  }\n\n  const { body, isHidden } = model.useState();\n  const style = useItemStyle(model.state);\n\n  if (!body || isHidden) {\n    return null;\n  }\n\n  return (\n    <div className={style}>\n      <body.Component model={body} />\n    </div>\n  );\n}\n\nfunction useLayoutStyle(state: SceneCSSGridLayoutState) {\n  return useMemo(() => {\n    const {} = state;\n    // only need breakpoints so accessing theme from config instead of context is ok\n    const style: CSSObject = {};\n    const theme = config.theme2;\n\n    style.display = 'grid';\n    style.gridTemplateColumns = state.templateColumns;\n    style.gridTemplateRows = state.templateRows || 'unset';\n    style.gridAutoRows = state.autoRows || 'unset';\n    style.rowGap = theme.spacing(state.rowGap ?? 1);\n    style.columnGap = theme.spacing(state.columnGap ?? 1);\n    style.justifyItems = state.justifyItems || 'unset';\n    style.alignItems = state.alignItems || 'unset';\n    style.justifyContent = state.justifyContent || 'unset';\n    style.flexGrow = 1;\n\n    if (state.md) {\n      style[theme.breakpoints.down('md')] = {\n        gridTemplateRows: state.md?.templateRows,\n        gridTemplateColumns: state.md?.templateColumns,\n        rowGap: state.md.rowGap ? theme.spacing(state.md?.rowGap ?? 1) : undefined,\n        columnGap: state.md.columnGap ? theme.spacing(state.md?.rowGap ?? 1) : undefined,\n        justifyItems: state.md?.justifyItems,\n        alignItems: state.md?.alignItems,\n        justifyContent: state.md?.justifyContent,\n      };\n    }\n\n    return css(style);\n  }, [state]);\n}\n\nfunction useItemStyle(state: SceneCSSGridItemState) {\n  return useMemo(() => {\n    const style: CSSObject = {};\n\n    style.gridColumn = state.gridColumn || 'unset';\n    style.gridRow = state.gridRow || 'unset';\n    // Needed for VizPanel\n    style.position = 'relative';\n\n    return css(style);\n  }, [state]);\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { clamp, throttle } from 'lodash';\nimport React, { useCallback, useLayoutEffect, useRef } from 'react';\nimport { useUniqueId } from '../LazyLoader';\n\ninterface Props {\n  handleSize?: number;\n  initialSize?: number | 'auto';\n  direction?: 'row' | 'column';\n  primary?: 'first' | 'second';\n  collapsedDefault?: boolean;\n  primaryPaneStyles?: React.CSSProperties;\n  secondaryPaneStyles?: React.CSSProperties;\n  onDragFinished?: (size: number) => void;\n  children: [React.ReactNode, React.ReactNode];\n}\n\nconst PIXELS_PER_MS = 0.3 as const;\nconst VERTICAL_KEYS = new Set(['ArrowUp', 'ArrowDown']);\nconst HORIZONTAL_KEYS = new Set(['ArrowLeft', 'ArrowRight']);\n\nconst propsForDirection = {\n  row: {\n    dim: 'width',\n    axis: 'clientX',\n    min: 'minWidth',\n    max: 'maxWidth',\n  },\n  column: {\n    dim: 'height',\n    axis: 'clientY',\n    min: 'minHeight',\n    max: 'maxHeight',\n  },\n} as const;\n\nexport function Splitter({\n  direction = 'row',\n  handleSize = 32,\n  initialSize = 'auto',\n  primaryPaneStyles,\n  secondaryPaneStyles,\n  onDragFinished,\n  children,\n}: Props) {\n  const kids = React.Children.toArray(children);\n\n  const splitterRef = useRef<HTMLDivElement | null>(null);\n  const firstPaneRef = useRef<HTMLDivElement | null>(null);\n  const secondPaneRef = useRef<HTMLDivElement | null>(null);\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  const containerSize = useRef<number | null>(null);\n  const primarySizeRef = useRef<'1fr' | number>('1fr');\n\n  const firstPaneMeasurements = useRef<ReturnType<typeof measureElement>>(undefined);\n  const savedPos = useRef<string | undefined>(undefined);\n\n  const measurementProp = propsForDirection[direction].dim;\n  const clientAxis = propsForDirection[direction].axis;\n  const minDimProp = propsForDirection[direction].min;\n  const maxDimProp = propsForDirection[direction].max;\n\n  // Using a resize observer here, as with content or screen based width/height the ratio between panes might\n  // change after a window resize, so ariaValueNow needs to be updated accordingly\n  useResizeObserver(\n    containerRef.current!,\n    (entries) => {\n      for (const entry of entries) {\n        if (!entry.target.isSameNode(containerRef.current)) {\n          return;\n        }\n\n        const curSize = firstPaneRef.current!.getBoundingClientRect()[measurementProp];\n        const newDims = measureElement(firstPaneRef.current!);\n        splitterRef.current!.ariaValueNow = `${clamp(\n          ((curSize - newDims[minDimProp]) / (newDims[maxDimProp] - newDims[minDimProp])) * 100,\n          0,\n          100\n        )}`;\n      }\n    },\n    500,\n    [maxDimProp, minDimProp, direction, measurementProp]\n  );\n\n  const dragStart = useRef<number | null>(null);\n  const onPointerDown = useCallback(\n    (e: React.PointerEvent<HTMLDivElement>) => {\n      // measure left-side width\n      primarySizeRef.current = firstPaneRef.current!.getBoundingClientRect()[measurementProp];\n      containerSize.current = containerRef.current!.getBoundingClientRect()[measurementProp];\n\n      // set position at start of drag\n      dragStart.current = e[clientAxis];\n      splitterRef.current!.setPointerCapture(e.pointerId);\n      firstPaneMeasurements.current = measureElement(firstPaneRef.current!);\n\n      savedPos.current = undefined;\n    },\n    [measurementProp, clientAxis]\n  );\n\n  const onPointerMove = useCallback(\n    (e: React.PointerEvent<HTMLDivElement>) => {\n      if (dragStart.current !== null && primarySizeRef.current !== '1fr') {\n        const diff = e[clientAxis] - dragStart.current;\n        const dims = firstPaneMeasurements.current!;\n        const newSize = clamp(primarySizeRef.current + diff, dims[minDimProp], dims[maxDimProp]);\n        const newFlex = newSize / (containerSize.current! - handleSize);\n        firstPaneRef.current!.style.flexGrow = `${newFlex}`;\n        secondPaneRef.current!.style.flexGrow = `${1 - newFlex}`;\n        const ariaValueNow = clamp(\n          ((newSize - dims[minDimProp]) / (dims[maxDimProp] - dims[minDimProp])) * 100,\n          0,\n          100\n        );\n\n        splitterRef.current!.ariaValueNow = `${ariaValueNow}`;\n      }\n    },\n    [handleSize, clientAxis, minDimProp, maxDimProp]\n  );\n\n  const onPointerUp = useCallback(\n    (e: React.PointerEvent<HTMLDivElement>) => {\n      e.preventDefault();\n      e.stopPropagation();\n      splitterRef.current!.releasePointerCapture(e.pointerId);\n      dragStart.current = null;\n      onDragFinished?.(parseFloat(firstPaneRef.current!.style.flexGrow));\n    },\n    [onDragFinished]\n  );\n\n  const pressedKeys = useRef(new Set<string>());\n  const keysLastHandledAt = useRef<number | null>(null);\n  const handlePressedKeys = useCallback(\n    (time: number) => {\n      const nothingPressed = pressedKeys.current.size === 0;\n      if (nothingPressed) {\n        keysLastHandledAt.current = null;\n        return;\n      } else if (primarySizeRef.current === '1fr') {\n        return;\n      }\n\n      const dt = time - (keysLastHandledAt.current ?? time);\n      const dx = dt * PIXELS_PER_MS;\n      let sizeChange = 0;\n\n      if (direction === 'row') {\n        if (pressedKeys.current.has('ArrowLeft')) {\n          sizeChange -= dx;\n        }\n        if (pressedKeys.current.has('ArrowRight')) {\n          sizeChange += dx;\n        }\n      } else {\n        if (pressedKeys.current.has('ArrowUp')) {\n          sizeChange -= dx;\n        }\n        if (pressedKeys.current.has('ArrowDown')) {\n          sizeChange += dx;\n        }\n      }\n\n      const firstPaneDims = firstPaneMeasurements.current!;\n      const curSize = firstPaneRef.current!.getBoundingClientRect()[measurementProp];\n      const newSize = clamp(curSize + sizeChange, firstPaneDims[minDimProp], firstPaneDims[maxDimProp]);\n\n      const newFlex = newSize / (containerSize.current! - handleSize);\n\n      firstPaneRef.current!.style.flexGrow = `${newFlex}`;\n      secondPaneRef.current!.style.flexGrow = `${1 - newFlex}`;\n      const ariaValueNow =\n        ((newSize - firstPaneDims[minDimProp]) / (firstPaneDims[maxDimProp] - firstPaneDims[minDimProp])) * 100;\n      splitterRef.current!.ariaValueNow = `${clamp(ariaValueNow, 0, 100)}`;\n\n      keysLastHandledAt.current = time;\n      window.requestAnimationFrame(handlePressedKeys);\n    },\n    [direction, handleSize, minDimProp, maxDimProp, measurementProp]\n  );\n\n  const onKeyDown = useCallback(\n    (e: React.KeyboardEvent<HTMLDivElement>) => {\n      if (e.key === 'Enter') {\n        if (savedPos.current === undefined) {\n          savedPos.current = firstPaneRef.current!.style.flexGrow;\n          firstPaneRef.current!.style.flexGrow = '0';\n          secondPaneRef.current!.style.flexGrow = '1';\n        } else {\n          firstPaneRef.current!.style.flexGrow = savedPos.current;\n          secondPaneRef.current!.style.flexGrow = `${1 - parseFloat(savedPos.current)}`;\n          savedPos.current = undefined;\n        }\n        return;\n      } else if (e.key === 'Home') {\n        firstPaneMeasurements.current = measureElement(firstPaneRef.current!);\n        containerSize.current = containerRef.current!.getBoundingClientRect()[measurementProp];\n        const newFlex = firstPaneMeasurements.current[minDimProp] / (containerSize.current! - handleSize);\n        firstPaneRef.current!.style.flexGrow = `${newFlex}`;\n        secondPaneRef.current!.style.flexGrow = `${1 - newFlex}`;\n        splitterRef.current!.ariaValueNow = '0';\n        return;\n      } else if (e.key === 'End') {\n        firstPaneMeasurements.current = measureElement(firstPaneRef.current!);\n        containerSize.current = containerRef.current!.getBoundingClientRect()[measurementProp];\n        const newFlex = firstPaneMeasurements.current[maxDimProp] / (containerSize.current! - handleSize);\n        firstPaneRef.current!.style.flexGrow = `${newFlex}`;\n        secondPaneRef.current!.style.flexGrow = `${1 - newFlex}`;\n        splitterRef.current!.ariaValueNow = '100';\n        return;\n      }\n\n      if (\n        !(\n          (direction === 'column' && VERTICAL_KEYS.has(e.key)) ||\n          (direction === 'row' && HORIZONTAL_KEYS.has(e.key))\n        ) ||\n        pressedKeys.current.has(e.key)\n      ) {\n        return;\n      }\n\n      savedPos.current = undefined;\n      e.preventDefault();\n      e.stopPropagation();\n      primarySizeRef.current = firstPaneRef.current!.getBoundingClientRect()[measurementProp];\n      containerSize.current = containerRef.current!.getBoundingClientRect()[measurementProp];\n      firstPaneMeasurements.current = measureElement(firstPaneRef.current!);\n      const newKey = !pressedKeys.current.has(e.key);\n\n      if (newKey) {\n        const initiateAnimationLoop = pressedKeys.current.size === 0;\n        pressedKeys.current.add(e.key);\n\n        if (initiateAnimationLoop) {\n          window.requestAnimationFrame(handlePressedKeys);\n        }\n      }\n    },\n    [direction, handlePressedKeys, handleSize, maxDimProp, measurementProp, minDimProp]\n  );\n\n  const onKeyUp = useCallback(\n    (e: React.KeyboardEvent<HTMLDivElement>) => {\n      if (\n        (direction === 'row' && !HORIZONTAL_KEYS.has(e.key)) ||\n        (direction === 'column' && !VERTICAL_KEYS.has(e.key))\n      ) {\n        return;\n      }\n\n      pressedKeys.current.delete(e.key);\n      onDragFinished?.(parseFloat(firstPaneRef.current!.style.flexGrow));\n    },\n    [direction, onDragFinished]\n  );\n\n  const onDoubleClick = useCallback(() => {\n    firstPaneRef.current!.style.flexGrow = '0.5';\n    secondPaneRef.current!.style.flexGrow = '0.5';\n    const dim = measureElement(firstPaneRef.current!);\n    firstPaneMeasurements.current = dim;\n    primarySizeRef.current = firstPaneRef.current!.getBoundingClientRect()[measurementProp];\n    splitterRef.current!.ariaValueNow = `${\n      ((primarySizeRef.current - dim[minDimProp]) / (dim[maxDimProp] - dim[minDimProp])) * 100\n    }`;\n  }, [maxDimProp, measurementProp, minDimProp]);\n\n  const onBlur = useCallback(() => {\n    // If focus is lost while keys are held, stop changing panel sizes\n    if (pressedKeys.current.size > 0) {\n      pressedKeys.current.clear();\n      dragStart.current = null;\n      onDragFinished?.(parseFloat(firstPaneRef.current!.style.flexGrow));\n    }\n  }, [onDragFinished]);\n\n  const styles = useStyles2(getStyles);\n  const id = useUniqueId();\n\n  const secondAvailable = kids.length === 2;\n  const visibilitySecond = secondAvailable ? 'visible' : 'hidden';\n\n  return (\n    <div\n      ref={containerRef}\n      className={styles.container}\n      style={{\n        flexDirection: direction,\n      }}\n    >\n      <div\n        ref={firstPaneRef}\n        className={styles.panel}\n        style={{\n          flexGrow: initialSize === 'auto' ? 0.5 : clamp(initialSize, 0, 1),\n          [minDimProp]: 'min-content',\n          ...primaryPaneStyles,\n        }}\n        id={`start-panel-${id}`}\n      >\n        {kids[0]}\n      </div>\n\n      {kids[1] && (\n        <>\n          <div\n            ref={splitterRef}\n            style={{ [measurementProp]: `${handleSize}px` }}\n            className={cx(styles.handle, { [styles.handleHorizontal]: direction === 'column' })}\n            onPointerUp={onPointerUp}\n            onPointerDown={onPointerDown}\n            onPointerMove={onPointerMove}\n            onKeyDown={onKeyDown}\n            onKeyUp={onKeyUp}\n            onDoubleClick={onDoubleClick}\n            onBlur={onBlur}\n            role=\"separator\"\n            aria-valuemin={0}\n            aria-valuemax={100}\n            aria-valuenow={50}\n            aria-controls={`start-panel-${id}`}\n            aria-label=\"Pane resize widget\"\n            tabIndex={0}\n          ></div>\n\n          <div\n            ref={secondPaneRef}\n            className={styles.panel}\n            style={{\n              flexGrow: initialSize === 'auto' ? 0.5 : clamp(1 - initialSize, 0, 1),\n              [minDimProp]: 'min-content',\n              visibility: `${visibilitySecond}`,\n              ...secondaryPaneStyles,\n            }}\n            id={`end-panel-${id}`}\n          >\n            {kids[1]}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    handle: css({\n      cursor: 'col-resize',\n      position: 'relative',\n      flexShrink: 0,\n      userSelect: 'none',\n\n      '&::before': {\n        content: '\"\"',\n        position: 'absolute',\n        backgroundColor: theme.colors.primary.main,\n        left: '50%',\n        transform: 'translate(-50%)',\n        top: 0,\n        height: '100%',\n        width: '1px',\n        opacity: 0,\n        transition: 'opacity ease-in-out 0.2s',\n      },\n\n      '&::after': {\n        content: '\"\"',\n        width: '4px',\n        borderRadius: '4px',\n        backgroundColor: theme.colors.border.weak,\n        transition: 'background-color ease-in-out 0.2s',\n        height: '50%',\n        top: 'calc(50% - (50%) / 2)',\n        transform: 'translateX(-50%)',\n        position: 'absolute',\n        left: '50%',\n      },\n\n      '&:hover, &:focus-visible': {\n        outline: 'none',\n        '&::before': {\n          opacity: 1,\n        },\n\n        '&::after': {\n          backgroundColor: theme.colors.primary.main,\n        },\n      },\n    }),\n    handleHorizontal: css({\n      cursor: 'row-resize',\n\n      '&::before': {\n        left: 'inherit',\n        transform: 'translateY(-50%)',\n        top: '50%',\n        height: '1px',\n        width: '100%',\n      },\n\n      '&::after': {\n        width: '50%',\n        height: '4px',\n        top: '50%',\n        transform: 'translateY(-50%)',\n        left: 'calc(50% - (50%) / 2)',\n      },\n    }),\n    container: css({\n      display: 'flex',\n      width: '100%',\n      flexGrow: 1,\n      overflow: 'hidden',\n    }),\n    panel: css({ display: 'flex', position: 'relative', flexBasis: 0 }),\n  };\n}\n\ntype MeasureR<T> = T extends HTMLElement\n  ? { minWidth: number; maxWidth: number; minHeight: number; maxHeight: number }\n  : T extends null\n  ? undefined\n  : never;\ntype HTMLElementOrNull = HTMLElement | null;\n\nfunction measureElement<T extends HTMLElementOrNull>(ref: T): MeasureR<T> {\n  if (ref === null) {\n    return undefined as MeasureR<T>;\n  }\n\n  const savedBodyOverflow = document.body.style.overflow;\n  const savedWidth = ref.style.width;\n  const savedHeight = ref.style.height;\n  const savedFlex = ref.style.flexGrow;\n  document.body.style.overflow = 'hidden';\n  ref.style.flexGrow = '0';\n  const { width: minWidth, height: minHeight } = ref.getBoundingClientRect();\n\n  ref.style.flexGrow = '100';\n  const { width: maxWidth, height: maxHeight } = ref.getBoundingClientRect();\n\n  document.body.style.overflow = savedBodyOverflow;\n  ref.style.width = savedWidth;\n  ref.style.height = savedHeight;\n  ref.style.flexGrow = savedFlex;\n\n  return { minWidth, maxWidth, minHeight, maxHeight } as MeasureR<T>;\n}\n\nfunction useResizeObserver(\n  target: Element,\n  cb: (entries: ResizeObserverEntry[]) => void,\n  throttleWait = 0,\n  deps?: React.DependencyList\n) {\n  const throttledCallback = throttle(cb, throttleWait);\n\n  useLayoutEffect(() => {\n    if (!target) {\n      return;\n    }\n\n    const resizeObserver = new ResizeObserver(throttledCallback);\n\n    resizeObserver.observe(target, { box: 'device-pixel-content-box' });\n    return () => resizeObserver.disconnect();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n","import React, { ComponentType } from 'react';\n\nimport { SceneComponentProps, SceneObjectState, SceneObject } from '../../../core/types';\nimport { SceneFlexItemPlacement } from '../SceneFlexLayout';\nimport { SplitLayout } from './SplitLayout';\nimport { Splitter } from './Splitter';\n\nexport function SplitLayoutRenderer({ model }: SceneFlexItemRenderProps<SplitLayout>) {\n  const { primary, secondary, direction, isHidden, initialSize, primaryPaneStyles, secondaryPaneStyles } =\n    model.useState();\n\n  if (isHidden) {\n    return null;\n  }\n\n  const Prim = primary.Component as ComponentType<SceneFlexItemRenderProps<SceneObject>>;\n  const Sec = secondary?.Component as ComponentType<SceneFlexItemRenderProps<SceneObject>>;\n  let startSize = secondary ? initialSize : 1;\n\n  return (\n    <Splitter\n      direction={direction}\n      initialSize={startSize ?? 0.5}\n      primaryPaneStyles={primaryPaneStyles}\n      secondaryPaneStyles={secondaryPaneStyles}\n    >\n      <Prim key={primary.state.key} model={primary} parentState={model.state} />\n      {Sec && secondary && <Sec key={secondary.state.key} model={secondary} parentState={model.state} />}\n    </Splitter>\n  );\n}\n\nexport interface SceneFlexItemState extends SceneFlexItemPlacement, SceneObjectState {\n  body: SceneObject | undefined;\n}\n\ninterface SceneFlexItemRenderProps<T> extends SceneComponentProps<T> {\n  parentState?: SceneFlexItemPlacement;\n}\n","import { CSSProperties } from 'react';\nimport { SceneObjectBase } from '../../../core/SceneObjectBase';\nimport { SceneObjectState } from '../../../core/types';\nimport { SceneFlexItemPlacement, SceneFlexItemLike } from '../SceneFlexLayout';\nimport { SplitLayoutRenderer } from './SplitLayoutRenderer';\n\ninterface SplitLayoutState extends SceneObjectState, SceneFlexItemPlacement {\n  primary: SceneFlexItemLike;\n  secondary?: SceneFlexItemLike;\n  direction: 'row' | 'column';\n  initialSize?: number;\n  primaryPaneStyles?: CSSProperties;\n  secondaryPaneStyles?: CSSProperties;\n}\n\nexport class SplitLayout extends SceneObjectBase<SplitLayoutState> {\n  public static Component = SplitLayoutRenderer;\n\n  public toggleDirection() {\n    this.setState({\n      direction: this.state.direction === 'row' ? 'column' : 'row',\n    });\n  }\n\n  public isDraggable(): boolean {\n    return false;\n  }\n}\n","import React, { createContext } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { DataRequestEnricher, SceneComponentProps } from '../../core/types';\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneAppState } from './types';\nimport { renderSceneComponentWithRouteProps } from './utils';\n\n/**\n * Responsible for top level pages routing\n */\nexport class SceneApp extends SceneObjectBase<SceneAppState> implements DataRequestEnricher {\n  public enrichDataRequest() {\n    return {\n      app: this.state.name || 'app',\n    };\n  }\n\n  public static Component = ({ model }: SceneComponentProps<SceneApp>) => {\n    const { pages } = model.useState();\n\n    return (\n      <SceneAppContext.Provider value={model}>\n        <Switch>\n          {pages.map((page) => (\n            <Route\n              key={page.state.url}\n              exact={false}\n              path={page.state.url}\n              render={(props) => renderSceneComponentWithRouteProps(page, props)}\n            ></Route>\n          ))}\n        </Switch>\n      </SceneAppContext.Provider>\n    );\n  };\n}\n\nexport const SceneAppContext = createContext<SceneApp | null>(null);\n\nconst sceneAppCache = new Map<object, SceneApp>();\n\n/**\n * Caches the the resulting SceneApp returned by the factory function so that it's only called once during the lifetime of the browser tab\n */\nexport function useSceneApp(factory: () => SceneApp) {\n  const cachedApp = sceneAppCache.get(factory);\n\n  if (cachedApp) {\n    return cachedApp;\n  }\n\n  const newApp = factory();\n  sceneAppCache.set(factory, newApp);\n\n  return newApp;\n}\n","import React from 'react';\n\nimport { SceneObjectBase } from '../core/SceneObjectBase';\nimport { SceneComponentProps, SceneObjectState } from '../core/types';\n\nexport interface SceneReactObjectState<TProps = {}> extends SceneObjectState {\n  /**\n   * React component to render\n   */\n  component?: React.ComponentType<TProps>;\n  /**\n   * Props to pass to the component\n   */\n  props?: TProps;\n  /**\n   * Alternative to component and props is just to pass a React node\n   */\n  reactNode?: React.ReactNode;\n}\n\n/**\n * A utility object that can be used to render any React component or ReactNode\n */\nexport class SceneReactObject<TProps = {}> extends SceneObjectBase<SceneReactObjectState<TProps>> {\n  public static Component = ({ model }: SceneComponentProps<SceneReactObject>) => {\n    const { component: Component, props, reactNode } = model.useState();\n\n    if (Component) {\n      return <Component {...props} />;\n    }\n\n    if (reactNode) {\n      return reactNode;\n    }\n\n    return null;\n  };\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Input, JSONFormatter, useStyles2 } from '@grafana/ui';\nimport { isArray, isPlainObject } from 'lodash';\nimport React from 'react';\nimport { isSceneObject, SceneObject } from '../../core/types';\n\nexport interface Props {\n  node: SceneObject;\n}\n\nexport function DebugDetails({ node }: Props) {\n  const state = node.useState();\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      {Object.keys(state).map((key) => (\n        <div className={styles.row} key={key}>\n          <div className={styles.keyName}>{key}</div>\n          <div className={styles.value}>{renderValue(key, (state as any)[key], node)}</div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction renderValue(key: string, value: any, node: SceneObject) {\n  if (value === null) {\n    return 'null';\n  }\n\n  switch (typeof value) {\n    case 'number':\n      return (\n        <Input\n          type=\"number\"\n          defaultValue={value}\n          onBlur={(evt) => node.setState({ [key]: evt.currentTarget.valueAsNumber })}\n        />\n      );\n    case 'string':\n      return (\n        <Input type=\"text\" defaultValue={value} onBlur={(evt) => node.setState({ [key]: evt.currentTarget.value })} />\n      );\n    case 'object':\n      if (isSceneObject(value)) {\n        return value.constructor.name;\n      }\n      if (isPlainObject(value) || isArray(value)) {\n        return <JSONFormatter json={value} open={0} />;\n      }\n      return String(value);\n    default:\n      return typeof value;\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      flexGrow: 1,\n      display: 'flex',\n      gap: theme.spacing(0.5),\n      flexDirection: 'column',\n    }),\n    row: css({\n      display: 'flex',\n      gap: theme.spacing(2),\n    }),\n    keyName: css({\n      display: 'flex',\n      flexGrow: '0',\n      width: 120,\n      alignItems: 'center',\n      height: theme.spacing(theme.components.height.md),\n    }),\n    value: css({\n      flexGrow: 1,\n      minHeight: theme.spacing(theme.components.height.md),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React, { ReactNode } from 'react';\nimport { SceneObject } from '../../core/types';\n\nexport interface Props {\n  node: SceneObject;\n  selectedObject?: SceneObject;\n  onSelect: (node: SceneObject) => void;\n}\n\nexport function DebugTreeNode({ node, selectedObject, onSelect }: Props) {\n  const styles = useStyles2(getStyles);\n  const children: ReactNode[] = [];\n  const isSelected = node === selectedObject;\n\n  node.forEachChild((child) => {\n    children.push(\n      <DebugTreeNode node={child} key={child.state.key} selectedObject={selectedObject} onSelect={onSelect} />\n    );\n  });\n\n  return (\n    <div className={styles.container}>\n      <div className={cx(styles.name, isSelected && styles.selected)} onClick={() => onSelect(node)}>\n        {node.constructor.name}\n      </div>\n      <div className={styles.children}>{children}</div>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      flexGrow: 1,\n      display: 'flex',\n      gap: theme.spacing(0.5),\n      flexDirection: 'column',\n    }),\n    name: css({\n      flexGrow: 1,\n      display: 'flex',\n      gap: theme.spacing(1),\n      fontSize: theme.typography.bodySmall.fontSize,\n      cursor: 'pointer',\n      padding: theme.spacing(0, 1),\n      borderRadius: theme.shape.borderRadius(2),\n      position: 'relative',\n      '&:hover': {\n        background: theme.colors.background.secondary,\n      },\n    }),\n    selected: css({\n      '&::before': {\n        display: 'block',\n        content: \"' '\",\n        position: 'absolute',\n        left: 0,\n        width: 4,\n        bottom: 2,\n        top: 2,\n        borderRadius: theme.shape.radius.default,\n        backgroundImage: theme.colors.gradients.brandVertical,\n      },\n    }),\n    children: css({\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      paddingLeft: theme.spacing(1),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { CustomScrollbar, Drawer, ToolbarButton, useStyles2 } from '@grafana/ui';\nimport React, { useState } from 'react';\n\nimport { SceneObject } from '../../core/types';\nimport { DebugDetails } from './DebugDetails';\nimport { DebugTreeNode } from './DebugTreeNode';\n\nexport interface Props {\n  scene: SceneObject;\n}\n\n/**\n * @internal\n * Please don't use from plugins directly.\n * This is already exposed via SceneAppPage and the ?scene-debugger query parameter.\n *\n * This is only exported so that core dashboards can use it.\n */\nexport function SceneDebugger({ scene }: Props) {\n  const styles = useStyles2(getStyles);\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedObject, setSelectedObject] = useState<SceneObject>();\n\n  return (\n    <>\n      <ToolbarButton variant=\"canvas\" icon=\"bug\" onClick={() => setIsOpen(true)} />\n      {isOpen && (\n        <Drawer title=\"Scene debugger\" onClose={() => setIsOpen(false)} size=\"lg\">\n          <div className={styles.panes}>\n            <div className={styles.pane1}>\n              <div className={styles.paneHeading}>Scene graph</div>\n              <CustomScrollbar autoHeightMin={'100%'}>\n                <div className={styles.treeWrapper}>\n                  <DebugTreeNode node={scene} selectedObject={selectedObject} onSelect={setSelectedObject} />\n                </div>\n              </CustomScrollbar>\n            </div>\n            <div className={styles.pane2}>\n              <div className={styles.paneHeading}>Object details</div>\n              {selectedObject && <DebugDetails node={selectedObject} />}\n            </div>\n          </div>\n        </Drawer>\n      )}\n    </>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    panes: css({\n      flexGrow: 1,\n      display: 'flex',\n      height: '100%',\n      flexDirection: 'row',\n      marginTop: theme.spacing(-2),\n    }),\n    pane1: css({\n      flexGrow: 0,\n      display: 'flex',\n      height: '100%',\n      flexDirection: 'column',\n      borderRight: `1px solid ${theme.colors.border.weak}`,\n    }),\n    pane2: css({\n      flexGrow: 1,\n      display: 'flex',\n      minHeight: '100%',\n      flexDirection: 'column',\n      paddingLeft: theme.spacing(2),\n    }),\n    treeWrapper: css({\n      paddingRight: theme.spacing(2),\n      height: '100%',\n      marginLeft: theme.spacing(-1),\n    }),\n    paneHeading: css({\n      padding: theme.spacing(1, 0),\n      fontWeight: theme.typography.fontWeightMedium,\n    }),\n  };\n}\n","import { NavModelItem, UrlQueryMap } from '@grafana/data';\nimport { PluginPage } from '@grafana/runtime';\nimport React, { useContext, useEffect, useLayoutEffect } from 'react';\n\nimport { RouteComponentProps } from 'react-router-dom';\nimport { SceneObject } from '../../core/types';\nimport { SceneDebugger } from '../SceneDebugger/SceneDebugger';\nimport { SceneAppPage } from './SceneAppPage';\nimport { SceneAppDrilldownView, SceneAppPageLike } from './types';\nimport { getUrlWithAppState, renderSceneComponentWithRouteProps, useAppQueryParams } from './utils';\nimport { useUrlSync } from '../../services/useUrlSync';\nimport { SceneAppContext } from './SceneApp';\nimport { useLocationServiceSafe } from '../../utils/utils';\n\nexport interface Props {\n  page: SceneAppPageLike;\n  routeProps: RouteComponentProps;\n}\n\nexport function SceneAppPageView({ page, routeProps }: Props) {\n  const containerPage = getParentPageIfTab(page);\n  const containerState = containerPage.useState();\n  const params = useAppQueryParams();\n  const scene = page.getScene(routeProps.match);\n  const appContext = useContext(SceneAppContext);\n  const isInitialized = containerState.initializedScene === scene;\n  const { layout } = page.state;\n  const locationService = useLocationServiceSafe();\n\n  useLayoutEffect(() => {\n    // Before rendering scene components, we are making sure the URL sync is enabled for.\n    if (!isInitialized) {\n      containerPage.initializeScene(scene);\n    }\n  }, [scene, containerPage, isInitialized]);\n\n  useEffect(() => {\n    // Clear initializedScene when unmounting\n    return () => containerPage.setState({ initializedScene: undefined });\n  }, [containerPage]);\n\n  const urlSyncInitialized = useUrlSync(containerPage, appContext?.state.urlSyncOptions);\n\n  if (!isInitialized && !urlSyncInitialized) {\n    return null;\n  }\n\n  const pageNav: NavModelItem = {\n    text: containerState.title,\n    img: containerState.titleImg,\n    icon: containerState.titleIcon,\n    url: getUrlWithAppState(containerState.url, locationService.getSearchObject(), containerState.preserveUrlKeys),\n    hideFromBreadcrumbs: containerState.hideFromBreadcrumbs,\n    parentItem: getParentBreadcrumbs(\n      containerState.getParentPage ? containerState.getParentPage() : containerPage.parent,\n      params,\n      locationService.getSearchObject()\n    ),\n  };\n\n  if (containerState.tabs) {\n    pageNav.children = containerState.tabs.map((tab) => {\n      return {\n        text: tab.state.title,\n        icon: tab.state.titleIcon,\n        tabSuffix: tab.state.tabSuffix,\n        active: page === tab,\n        url: getUrlWithAppState(tab.state.url, locationService.getSearchObject(), tab.state.preserveUrlKeys),\n        parentItem: pageNav,\n      };\n    });\n  }\n\n  let pageActions: React.ReactNode[] = [];\n  if (containerState.controls) {\n    pageActions = containerState.controls.map((control) => (\n      <control.Component model={control} key={control.state.key} />\n    ));\n  }\n\n  if (params['scene-debugger']) {\n    pageActions.push(<SceneDebugger scene={containerPage} key={'scene-debugger'} />);\n  }\n\n  return (\n    <PluginPage\n      layout={layout}\n      pageNav={pageNav}\n      actions={pageActions}\n      renderTitle={containerState.renderTitle}\n      subTitle={containerState.subTitle}\n    >\n      <scene.Component model={scene} />\n    </PluginPage>\n  );\n}\n\n/**\n * For pages that are \"tabs\" this will return the parent page\n */\nfunction getParentPageIfTab(page: SceneAppPageLike) {\n  if (page.parent instanceof SceneAppPage) {\n    return page.parent;\n  }\n\n  return page;\n}\n\nfunction getParentBreadcrumbs(\n  parent: SceneObject | undefined,\n  params: UrlQueryMap,\n  searchObject: UrlQueryMap\n): NavModelItem | undefined {\n  if (parent instanceof SceneAppPage) {\n    return {\n      text: parent.state.title,\n      url: getUrlWithAppState(parent.state.url, searchObject, parent.state.preserveUrlKeys),\n      hideFromBreadcrumbs: parent.state.hideFromBreadcrumbs,\n      parentItem: getParentBreadcrumbs(\n        parent.state.getParentPage ? parent.state.getParentPage() : parent.parent,\n        params,\n        searchObject\n      ),\n    };\n  }\n\n  return undefined;\n}\n\nexport interface SceneAppDrilldownViewRenderProps {\n  drilldown: SceneAppDrilldownView;\n  parent: SceneAppPageLike;\n  routeProps: RouteComponentProps;\n}\n\nexport function SceneAppDrilldownViewRender({ drilldown, parent, routeProps }: SceneAppDrilldownViewRenderProps) {\n  return renderSceneComponentWithRouteProps(parent.getDrilldownPage(drilldown, routeProps.match), routeProps);\n}\n","import React from 'react';\nimport { Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport { SceneObjectBase } from '../../core/SceneObjectBase';\nimport { SceneComponentProps, SceneObject, isDataRequestEnricher } from '../../core/types';\nimport { EmbeddedScene } from '../EmbeddedScene';\nimport { SceneFlexItem, SceneFlexLayout } from '../layout/SceneFlexLayout';\nimport { SceneReactObject } from '../SceneReactObject';\nimport { SceneAppDrilldownViewRender, SceneAppPageView } from './SceneAppPageView';\nimport { SceneAppDrilldownView, SceneAppPageLike, SceneAppPageState, SceneRouteMatch } from './types';\nimport { renderSceneComponentWithRouteProps } from './utils';\n\n/**\n * Responsible for page's drilldown & tabs routing\n */\nexport class SceneAppPage extends SceneObjectBase<SceneAppPageState> implements SceneAppPageLike {\n  public static Component = SceneAppPageRenderer;\n  private _sceneCache = new Map<string, EmbeddedScene>();\n  private _drilldownCache = new Map<string, SceneAppPageLike>();\n\n  public constructor(state: SceneAppPageState) {\n    super(state);\n  }\n\n  public initializeScene(scene: EmbeddedScene) {\n    this.setState({ initializedScene: scene });\n  }\n\n  public getScene(routeMatch: SceneRouteMatch): EmbeddedScene {\n    let scene = this._sceneCache.get(routeMatch.url);\n\n    if (scene) {\n      return scene;\n    }\n\n    if (!this.state.getScene) {\n      throw new Error('Missing getScene on SceneAppPage ' + this.state.title);\n    }\n\n    scene = this.state.getScene(routeMatch);\n    this._sceneCache.set(routeMatch.url, scene);\n\n    return scene;\n  }\n\n  public getDrilldownPage(drilldown: SceneAppDrilldownView, routeMatch: SceneRouteMatch<{}>): SceneAppPageLike {\n    let page = this._drilldownCache.get(routeMatch!.url);\n    if (page) {\n      return page;\n    }\n\n    page = drilldown.getPage(routeMatch, this);\n    this._drilldownCache.set(routeMatch!.url, page);\n\n    return page;\n  }\n\n  public enrichDataRequest(source: SceneObject) {\n    if (this.state.getParentPage) {\n      return this.state.getParentPage().enrichDataRequest(source);\n    }\n\n    if (!this.parent) {\n      return null;\n    }\n\n    const root = this.getRoot();\n\n    if (isDataRequestEnricher(root)) {\n      return root.enrichDataRequest(source);\n    }\n\n    return null;\n  }\n}\n\nexport interface SceneAppPageRendererProps extends SceneComponentProps<SceneAppPage> {\n  routeProps: RouteComponentProps;\n}\n\nfunction SceneAppPageRenderer({ model, routeProps }: SceneAppPageRendererProps) {\n  const { tabs, drilldowns } = model.useState();\n  const routes: React.ReactNode[] = [];\n\n  if (tabs && tabs.length > 0) {\n    for (let tabIndex = 0; tabIndex < tabs.length; tabIndex++) {\n      const tab = tabs[tabIndex];\n\n      // Add first tab as a default route, this makes it possible for the first tab to render with the url of the parent page\n      if (tabIndex === 0) {\n        routes.push(\n          <Route\n            exact={true}\n            key={model.state.url}\n            path={model.state.routePath ?? model.state.url}\n            render={(props) => renderSceneComponentWithRouteProps(tab, props)}\n          ></Route>\n        );\n      }\n\n      routes.push(\n        <Route\n          exact={true}\n          key={tab.state.url}\n          path={tab.state.routePath ?? tab.state.url}\n          render={(props) => renderSceneComponentWithRouteProps(tab, props)}\n        ></Route>\n      );\n\n      if (tab.state.drilldowns) {\n        for (const drilldown of tab.state.drilldowns) {\n          routes.push(\n            <Route\n              exact={false}\n              key={drilldown.routePath}\n              path={drilldown.routePath}\n              render={(props) => <SceneAppDrilldownViewRender drilldown={drilldown} parent={tab} routeProps={props} />}\n            ></Route>\n          );\n        }\n      }\n    }\n  }\n\n  if (drilldowns) {\n    for (const drilldown of drilldowns) {\n      routes.push(\n        <Route\n          key={drilldown.routePath}\n          exact={false}\n          path={drilldown.routePath}\n          render={(props) => <SceneAppDrilldownViewRender drilldown={drilldown} parent={model} routeProps={props} />}\n        ></Route>\n      );\n    }\n  }\n\n  if (!tabs && isCurrentPageRouteMatch(model, routeProps.match)) {\n    return <SceneAppPageView page={model} routeProps={routeProps} />;\n  }\n\n  routes.push(getFallbackRoute(model, routeProps));\n\n  return <Switch>{routes}</Switch>;\n}\n\nfunction getFallbackRoute(page: SceneAppPage, routeProps: RouteComponentProps) {\n  return (\n    <Route\n      key={'fallback route'}\n      render={(props) => {\n        const fallbackPage = page.state.getFallbackPage?.() ?? getDefaultFallbackPage();\n        return <SceneAppPageView page={fallbackPage} routeProps={routeProps} />;\n      }}\n    ></Route>\n  );\n}\n\nfunction isCurrentPageRouteMatch(page: SceneAppPage, match: SceneRouteMatch) {\n  if (!match.isExact) {\n    return false;\n  }\n\n  // current page matches the route url\n  if (match.url === page.state.url) {\n    return true;\n  }\n\n  // check if we are a tab and the first tab, then we should also render on the parent url\n  if (\n    page.parent instanceof SceneAppPage &&\n    page.parent.state.tabs![0] === page &&\n    page.parent.state.url === match.url\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getDefaultFallbackPage() {\n  return new SceneAppPage({\n    url: '',\n    title: 'Not found',\n    subTitle: 'The url did not match any page',\n    getScene: () => {\n      return new EmbeddedScene({\n        body: new SceneFlexLayout({\n          direction: 'column',\n          children: [\n            new SceneFlexItem({\n              body: new SceneReactObject({\n                component: () => {\n                  return (\n                    <div data-testid=\"default-fallback-content\">\n                      If you found your way here using a link then there might be a bug in this application.\n                    </div>\n                  );\n                },\n              }),\n            }),\n          ],\n        }),\n      });\n    },\n  });\n}\n","import { MatcherConfig } from '@grafana/schema';\nimport { StandardFieldConfig, StandardFieldConfigInterface } from './types';\n\n// Base class for standard field config overrides builder methods\nexport class StandardFieldConfigOverridesBuilder<T extends StandardFieldConfigOverridesBuilder<T>>\n  implements StandardFieldConfigInterface<StandardFieldConfig, T, 'override'>\n{\n  protected _overrides: Array<{ matcher: MatcherConfig; properties: Array<{ id: string; value: unknown }> }> = [];\n\n  public overrideColor(value: StandardFieldConfig['color']): T {\n    this._overrides[this._overrides.length - 1].properties.push({ id: 'color', value });\n    return this as unknown as T;\n  }\n\n  public overrideDecimals(value: StandardFieldConfig['decimals']): T {\n    this._overrides[this._overrides.length - 1].properties.push({ id: 'decimals', value });\n    return this as unknown as T;\n  }\n\n  public overrideDisplayName(value: StandardFieldConfig['displayName']): T {\n    this._overrides[this._overrides.length - 1].properties.push({ id: 'displayName', value });\n    return this as unknown as T;\n  }\n\n  public overrideFilterable(value: StandardFieldConfig['filterable']): T {\n    this._overrides[this._overrides.length - 1].properties.push({ id: 'filterable', value });\n    return this as unknown as T;\n  }\n\n  public overrideLinks(value: StandardFieldConfig['links']): T {\n    this._overrides[this._overrides.length - 1].properties.push({ id: 'links', value });\n    return this as unknown as T;\n  }\n\n  public overrideMappings(value: StandardFieldConfig['mappings']): T {\n    this._overrides[this._overrides.length - 1].properties.push({ id: 'mappings', value });\n    return this as unknown as T;\n  }\n\n  public overrideMax(value: StandardFieldConfig['max']): T {\n    this._overrides[this._overrides.length - 1].properties.push({ id: 'max', value });\n    return this as unknown as T;\n  }\n\n  public overrideMin(value: StandardFieldConfig['min']): T {\n    this._overrides[this._overrides.length - 1].properties.push({ id: 'min', value });\n    return this as unknown as T;\n  }\n\n  public overrideNoValue(value: StandardFieldConfig['noValue']): T {\n    this._overrides[this._overrides.length - 1].properties.push({ id: 'noValue', value });\n    return this as unknown as T;\n  }\n\n  public overrideThresholds(value: StandardFieldConfig['thresholds']): T {\n    this._overrides[this._overrides.length - 1].properties.push({ id: 'thresholds', value });\n    return this as unknown as T;\n  }\n\n  public overrideUnit(value: StandardFieldConfig['unit']): T {\n    this._overrides[this._overrides.length - 1].properties.push({ id: 'unit', value });\n    return this as unknown as T;\n  }\n}\n","import { FieldMatcherID, FieldType, FieldValueMatcherConfig } from '@grafana/data';\nimport { MatcherConfig } from '@grafana/schema';\nimport { getCompareSeriesRefId } from '../../utils/getCompareSeriesRefId';\nimport { StandardFieldConfigOverridesBuilder } from './StandardFieldConfigBuilders';\n\nexport class FieldConfigOverridesBuilder<TFieldConfig> extends StandardFieldConfigOverridesBuilder<\n  FieldConfigOverridesBuilder<TFieldConfig>\n> {\n  public match(matcher: MatcherConfig): this {\n    this._overrides.push({ matcher, properties: [] });\n    return this;\n  }\n\n  public matchFieldsWithName(name: string): this {\n    this._overrides.push({\n      matcher: {\n        id: FieldMatcherID.byName,\n\n        options: name,\n      },\n      properties: [],\n    });\n    return this;\n  }\n\n  public matchFieldsWithNameByRegex(regex: string): this {\n    this._overrides.push({\n      matcher: {\n        id: FieldMatcherID.byRegexp,\n        options: regex,\n      },\n      properties: [],\n    });\n    return this;\n  }\n\n  public matchFieldsByType(fieldType: FieldType): this {\n    this._overrides.push({\n      matcher: {\n        id: FieldMatcherID.byType,\n        options: fieldType,\n      },\n      properties: [],\n    });\n    return this;\n  }\n\n  public matchFieldsByQuery(refId: string): this {\n    this._overrides.push({\n      matcher: {\n        id: FieldMatcherID.byFrameRefID,\n        options: refId,\n      },\n      properties: [],\n    });\n    return this;\n  }\n\n  public matchFieldsByValue(options: FieldValueMatcherConfig): this {\n    this._overrides.push({\n      matcher: {\n        id: FieldMatcherID.byValue,\n        options,\n      },\n      properties: [],\n    });\n    return this;\n  }\n\n  public matchComparisonQuery(refId: string): this {\n    return this.matchFieldsByQuery(getCompareSeriesRefId(refId));\n  }\n\n  public overrideCustomFieldConfig<T extends TFieldConfig, K extends keyof T>(id: K, value: T[K]): this {\n    const _id = `custom.${String(id)}`;\n    const last = this._overrides[this._overrides.length - 1];\n    last.properties.push({ id: _id, value });\n    return this;\n  }\n\n  public build() {\n    return this._overrides;\n  }\n}\n","import { FieldConfigSource } from '@grafana/data';\nimport { cloneDeep, merge } from 'lodash';\nimport { DeepPartial } from '../types';\nimport { FieldConfigOverridesBuilder } from './FieldConfigOverridesBuilder';\nimport { StandardFieldConfig, StandardFieldConfigInterface } from './types';\n\nexport class FieldConfigBuilder<TFieldConfig extends {}>\n  implements StandardFieldConfigInterface<StandardFieldConfig, FieldConfigBuilder<TFieldConfig>, 'set'>\n{\n  private _fieldConfig: FieldConfigSource<DeepPartial<TFieldConfig>> = {\n    defaults: {},\n    overrides: [],\n  };\n  private _overridesBuilder = new FieldConfigOverridesBuilder<TFieldConfig>();\n\n  public constructor(private defaultFieldConfig?: () => TFieldConfig) {\n    this.setDefaults();\n  }\n\n  private setDefaults() {\n    const fieldConfig: FieldConfigSource<TFieldConfig> = {\n      defaults: {\n        custom: this.defaultFieldConfig ? cloneDeep(this.defaultFieldConfig()) : ({} as TFieldConfig),\n      }, // use field config factory that will provide default field config\n      overrides: [],\n    };\n\n    this._fieldConfig = fieldConfig;\n  }\n  /**\n   * Set color.\n   */\n  public setColor(color: StandardFieldConfig['color']): this {\n    return this.setFieldConfigDefaults('color', color);\n  }\n\n  /**\n   * Set number of decimals to show.\n   */\n  public setDecimals(decimals: StandardFieldConfig['decimals']): this {\n    return this.setFieldConfigDefaults('decimals', decimals);\n  }\n\n  /**\n   * Set field display name.\n   */\n  public setDisplayName(displayName: StandardFieldConfig['displayName']): this {\n    return this.setFieldConfigDefaults('displayName', displayName);\n  }\n\n  /**\n   * Set the standard field config property filterable.\n   */\n  public setFilterable(filterable: StandardFieldConfig['filterable']): this {\n    return this.setFieldConfigDefaults('filterable', filterable);\n  }\n\n  /**\n   * Set data links.\n   */\n  public setLinks(links: StandardFieldConfig['links']): this {\n    return this.setFieldConfigDefaults('links', links);\n  }\n\n  /**\n   * Set value mappings.\n   */\n  public setMappings(mappings: StandardFieldConfig['mappings']): this {\n    return this.setFieldConfigDefaults('mappings', mappings);\n  }\n\n  /**\n   * Set the standard field config property max.\n   */\n  public setMax(max: StandardFieldConfig['max']): this {\n    return this.setFieldConfigDefaults('max', max);\n  }\n\n  /**\n   * Set the standard field config property min.\n   */\n  public setMin(min: StandardFieldConfig['min']): this {\n    return this.setFieldConfigDefaults('min', min);\n  }\n\n  /**\n   * Set the standard field config property noValue.\n   */\n  public setNoValue(noValue: StandardFieldConfig['noValue']): this {\n    return this.setFieldConfigDefaults('noValue', noValue);\n  }\n\n  /**\n   * Set the standard field config property thresholds.\n   */\n  public setThresholds(thresholds: StandardFieldConfig['thresholds']): this {\n    return this.setFieldConfigDefaults('thresholds', thresholds);\n  }\n\n  /**\n   * Set the standard field config property unit.\n   */\n  public setUnit(unit: StandardFieldConfig['unit']): this {\n    return this.setFieldConfigDefaults('unit', unit);\n  }\n\n  /**\n   * Set an individual custom field config value. This will merge the value with the existing custom field config.\n   */\n  public setCustomFieldConfig<T extends TFieldConfig, K extends keyof T>(id: K, value: DeepPartial<T[K]>): this {\n    this._fieldConfig.defaults = {\n      ...this._fieldConfig.defaults,\n      custom: merge(this._fieldConfig.defaults.custom, { [id]: value }),\n    };\n\n    return this;\n  }\n\n  /**\n   * Configure overrides for the field config. This will merge the overrides with the existing overrides.\n   */\n  public setOverrides(builder: (b: FieldConfigOverridesBuilder<TFieldConfig>) => void): this {\n    builder(this._overridesBuilder);\n    return this;\n  }\n\n  public setFieldConfigDefaults<T extends keyof StandardFieldConfig>(key: T, value: StandardFieldConfig[T]) {\n    this._fieldConfig.defaults = {\n      ...this._fieldConfig.defaults,\n      [key]: value,\n    };\n    return this;\n  }\n\n  public build() {\n    return {\n      defaults: this._fieldConfig.defaults,\n      overrides: this._overridesBuilder.build(),\n    };\n  }\n}\n","import { cloneDeep, merge } from 'lodash';\nimport { DeepPartial } from '../types';\n\nexport class PanelOptionsBuilder<TOptions extends {} = {}> {\n  private _options: DeepPartial<TOptions> = {};\n\n  public constructor(private defaultOptions?: () => Partial<TOptions>) {\n    this.setDefaults();\n  }\n\n  private setDefaults() {\n    this._options = this.defaultOptions ? cloneDeep(this.defaultOptions()) : ({} as TOptions);\n  }\n\n  /**\n   * Set an individual panel option. This will merge the value with the existing options.\n   */\n  public setOption<T extends TOptions, K extends keyof T>(id: K, value: DeepPartial<T[K]>): this {\n    this._options = merge(this._options, { [id]: value });\n    return this;\n  }\n\n  public build() {\n    return this._options;\n  }\n}\n","import { VizPanel, VizPanelState } from '../../components/VizPanel/VizPanel';\nimport { DeepPartial } from '../types';\nimport { FieldConfigBuilder } from './FieldConfigBuilder';\nimport { FieldConfigOverridesBuilder } from './FieldConfigOverridesBuilder';\nimport { PanelOptionsBuilder } from './PanelOptionsBuilder';\nimport { StandardFieldConfig, StandardFieldConfigInterface } from './types';\n\nexport class VizPanelBuilder<TOptions extends {}, TFieldConfig extends {}>\n  implements StandardFieldConfigInterface<StandardFieldConfig, VizPanelBuilder<TOptions, TFieldConfig>, 'set'>\n{\n  private _state: VizPanelState<TOptions, TFieldConfig> = {} as VizPanelState<TOptions, TFieldConfig>;\n  private _fieldConfigBuilder: FieldConfigBuilder<TFieldConfig>;\n  private _panelOptionsBuilder: PanelOptionsBuilder<TOptions>;\n\n  public constructor(\n    pluginId: string,\n    pluginVersion: string,\n    defaultOptions?: () => Partial<TOptions>,\n    defaultFieldConfig?: () => TFieldConfig\n  ) {\n    this._state.title = '';\n    this._state.description = '';\n    this._state.displayMode = 'default';\n    this._state.hoverHeader = false;\n    this._state.pluginId = pluginId;\n    this._state.pluginVersion = pluginVersion;\n\n    this._fieldConfigBuilder = new FieldConfigBuilder(defaultFieldConfig);\n    this._panelOptionsBuilder = new PanelOptionsBuilder(defaultOptions);\n  }\n\n  /**\n   * Set panel title.\n   */\n  public setTitle(title: VizPanelState['title']): this {\n    this._state.title = title;\n    return this;\n  }\n\n  /**\n   * Set panel description.\n   */\n  public setDescription(description: VizPanelState['description']): this {\n    this._state.description = description;\n    return this;\n  }\n\n  /**\n   * Set panel display mode.\n   */\n  public setDisplayMode(displayMode: VizPanelState['displayMode']): this {\n    this._state.displayMode = displayMode;\n    return this;\n  }\n\n  /**\n   * Set if panel header should be shown on hover.\n   */\n  public setHoverHeader(hoverHeader: VizPanelState['hoverHeader']): this {\n    this._state.hoverHeader = hoverHeader;\n    return this;\n  }\n\n  /**\n   * Set panel menu scene object.\n   */\n  public setMenu(menu: VizPanelState['menu']): this {\n    this._state.menu = menu;\n    return this;\n  }\n\n  /**\n   * Set scene object or react component to use as panel header actions.\n   */\n  public setHeaderActions(headerActions: VizPanelState['headerActions']): this {\n    this._state.headerActions = headerActions;\n    return this;\n  }\n\n  /**\n   * Set color.\n   */\n  public setColor(color: StandardFieldConfig['color']): this {\n    this._fieldConfigBuilder.setColor(color);\n    return this;\n  }\n\n  /**\n   * Set number of decimals to show.\n   */\n  public setDecimals(decimals: StandardFieldConfig['decimals']): this {\n    this._fieldConfigBuilder.setDecimals(decimals);\n    return this;\n  }\n\n  /**\n   * Set field display name.\n   */\n  public setDisplayName(displayName: StandardFieldConfig['displayName']): this {\n    this._fieldConfigBuilder.setDisplayName(displayName);\n    return this;\n  }\n\n  /**\n   * Set the standard field config property filterable.\n   */\n  public setFilterable(filterable: StandardFieldConfig['filterable']): this {\n    this._fieldConfigBuilder.setFilterable(filterable);\n    return this;\n  }\n\n  /**\n   * Set data links.\n   */\n  public setLinks(links: StandardFieldConfig['links']): this {\n    this._fieldConfigBuilder.setLinks(links);\n    return this;\n  }\n\n  /**\n   * Set value mappings.\n   */\n  public setMappings(mappings: StandardFieldConfig['mappings']): this {\n    this._fieldConfigBuilder.setMappings(mappings);\n    return this;\n  }\n\n  /**\n   * Set the standard field config property max.\n   */\n  public setMax(max: StandardFieldConfig['max']): this {\n    this._fieldConfigBuilder.setMax(max);\n    return this;\n  }\n\n  /**\n   * Set the standard field config property min.\n   */\n  public setMin(min: StandardFieldConfig['min']): this {\n    this._fieldConfigBuilder.setMin(min);\n    return this;\n  }\n\n  /**\n   * Set the standard field config property noValue.\n   */\n  public setNoValue(noValue: StandardFieldConfig['noValue']): this {\n    this._fieldConfigBuilder.setNoValue(noValue);\n    return this;\n  }\n\n  /**\n   * Set the standard field config property thresholds.\n   */\n  public setThresholds(thresholds: StandardFieldConfig['thresholds']): this {\n    this._fieldConfigBuilder.setThresholds(thresholds);\n    return this;\n  }\n\n  /**\n   * Set the standard field config property unit.\n   */\n  public setUnit(unit: StandardFieldConfig['unit']): this {\n    this._fieldConfigBuilder.setUnit(unit);\n    return this;\n  }\n\n  public setCustomFieldConfig<T extends TFieldConfig, K extends keyof T>(id: K, value: DeepPartial<T[K]>): this {\n    this._fieldConfigBuilder.setCustomFieldConfig(id, value);\n    return this;\n  }\n\n  public setOverrides(builder: (b: FieldConfigOverridesBuilder<TFieldConfig>) => void): this {\n    this._fieldConfigBuilder.setOverrides(builder);\n    return this;\n  }\n\n  /**\n   * Set an individual panel option. This will merge the value with the existing options.\n   */\n  public setOption<T extends TOptions, K extends keyof T>(id: K, value: DeepPartial<T[K]>): this {\n    this._panelOptionsBuilder.setOption(id, value);\n    return this;\n  }\n\n  /**\n   * Set data provider for the panel.\n   */\n  public setData(data: VizPanelState['$data']): this {\n    this._state.$data = data;\n    return this;\n  }\n\n  /**\n   * Set time range for the panel.\n   */\n  public setTimeRange(timeRange: VizPanelState['$timeRange']): this {\n    this._state.$timeRange = timeRange;\n    return this;\n  }\n\n  /**\n   * Set variables for the panel.\n   */\n  public setVariables(variables: VizPanelState['$variables']): this {\n    this._state.$variables = variables;\n    return this;\n  }\n\n  /**\n   * Set behaviors for the panel.\n   */\n  public setBehaviors(behaviors: VizPanelState['$behaviors']): this {\n    this._state.$behaviors = behaviors;\n    return this;\n  }\n\n  /**\n   * Makes it possible to shared config between different builders\n   */\n  public applyMixin(mixin: (builder: this) => void): this {\n    mixin(this);\n    return this;\n  }\n\n  /**\n   * Build the panel.\n   */\n  public build() {\n    const panel = new VizPanel<TOptions, TFieldConfig>({\n      ...this._state,\n      options: this._panelOptionsBuilder.build(),\n      fieldConfig: this._fieldConfigBuilder.build(),\n    });\n\n    return panel;\n  }\n}\n","import {\n  Options as BarChartOptions,\n  defaultOptions as defaultBarChartOptions,\n} from '@grafana/schema/dist/esm/raw/composable/barchart/panelcfg/x/BarChartPanelCfg_types.gen';\nimport {\n  Options as BarGaugeOptions,\n  defaultOptions as defaultBarGaugeOptions,\n} from '@grafana/schema/dist/esm/raw/composable/bargauge/panelcfg/x/BarGaugePanelCfg_types.gen';\nimport {\n  Options as DataGridOptions,\n  defaultOptions as defaultDataGridOptions,\n} from '@grafana/schema/dist/esm/raw/composable/datagrid/panelcfg/x/DatagridPanelCfg_types.gen';\nimport {\n  Options as GaugeOptions,\n  defaultOptions as defaultGaugeOptions,\n} from '@grafana/schema/dist/esm/raw/composable/gauge/panelcfg/x/GaugePanelCfg_types.gen';\nimport {\n  Options as GeomapOptions,\n  defaultOptions as defaultGeomapOptions,\n} from '@grafana/schema/dist/esm/raw/composable/geomap/panelcfg/x/GeomapPanelCfg_types.gen';\nimport {\n  Options as HeatmapOptions,\n  defaultOptions as defaultHeatmapOptions,\n} from '@grafana/schema/dist/esm/raw/composable/heatmap/panelcfg/x/HeatmapPanelCfg_types.gen';\nimport {\n  Options as HistogramOptions,\n  defaultOptions as defaultHistogramOptions,\n} from '@grafana/schema/dist/esm/raw/composable/histogram/panelcfg/x/HistogramPanelCfg_types.gen';\nimport { Options as LogsOptions } from '@grafana/schema/dist/esm/raw/composable/logs/panelcfg/x/LogsPanelCfg_types.gen';\nimport {\n  Options as NewsOptions,\n  defaultOptions as defaultNewsOptions,\n} from '@grafana/schema/dist/esm/raw/composable/news/panelcfg/x/NewsPanelCfg_types.gen';\nimport { Options as NodeGraphOptions } from '@grafana/schema/dist/esm/raw/composable/nodegraph/panelcfg/x/NodeGraphPanelCfg_types.gen';\nimport {\n  Options as PieChartOptions,\n  defaultOptions as defaultPieChartOptions,\n} from '@grafana/schema/dist/esm/raw/composable/piechart/panelcfg/x/PieChartPanelCfg_types.gen';\nimport {\n  Options as StatOptions,\n  defaultOptions as defaultStatOptions,\n} from '@grafana/schema/dist/esm/raw/composable/stat/panelcfg/x/StatPanelCfg_types.gen';\nimport {\n  Options as StateTimelineOptions,\n  defaultOptions as defaultStateTimelineOptions,\n} from '@grafana/schema/dist/esm/raw/composable/statetimeline/panelcfg/x/StateTimelinePanelCfg_types.gen';\nimport {\n  Options as StatusHistoryOptions,\n  defaultOptions as defaultStatusHistoryOptions,\n} from '@grafana/schema/dist/esm/raw/composable/statushistory/panelcfg/x/StatusHistoryPanelCfg_types.gen';\nimport {\n  Options as TableOptions,\n  defaultOptions as defaultTableOptions,\n} from '@grafana/schema/dist/esm/raw/composable/table/panelcfg/x/TablePanelCfg_types.gen';\nimport {\n  Options as TextOptions,\n  defaultOptions as defaultTextOptions,\n} from '@grafana/schema/dist/esm/raw/composable/text/panelcfg/x/TextPanelCfg_types.gen';\nimport { Options as TimeSeriesOptions } from '@grafana/schema/dist/esm/raw/composable/timeseries/panelcfg/x/TimeSeriesPanelCfg_types.gen';\nimport { Options as TrendOptions } from '@grafana/schema/dist/esm/raw/composable/trend/panelcfg/x/TrendPanelCfg_types.gen';\nimport {\n  Options as XYChartOptions,\n  defaultOptions as defaultXYChartOptions,\n} from '@grafana/schema/dist/esm/raw/composable/xychart/panelcfg/x/XYChartPanelCfg_types.gen';\n\nimport { PanelOptionsBuilder } from './PanelOptionsBuilder';\n\nexport const PanelOptionsBuilders = {\n  barchart() {\n    return new PanelOptionsBuilder<BarChartOptions>(() => defaultBarChartOptions);\n  },\n  bargauge() {\n    return new PanelOptionsBuilder<BarGaugeOptions>(() => defaultBarGaugeOptions);\n  },\n  datagrid() {\n    return new PanelOptionsBuilder<DataGridOptions>(() => defaultDataGridOptions);\n  },\n  flamegraph() {\n    return new PanelOptionsBuilder<{}>();\n  },\n  gauge() {\n    return new PanelOptionsBuilder<GaugeOptions>(() => defaultGaugeOptions);\n  },\n  geomap() {\n    return new PanelOptionsBuilder<GeomapOptions>(() => defaultGeomapOptions);\n  },\n  heatmap() {\n    return new PanelOptionsBuilder<HeatmapOptions>(() => defaultHeatmapOptions);\n  },\n  histogram() {\n    return new PanelOptionsBuilder<HistogramOptions>(() => defaultHistogramOptions);\n  },\n  logs() {\n    return new PanelOptionsBuilder<LogsOptions>();\n  },\n  news() {\n    return new PanelOptionsBuilder<NewsOptions>(() => defaultNewsOptions);\n  },\n  nodegraph() {\n    return new PanelOptionsBuilder<NodeGraphOptions>();\n  },\n  piechart() {\n    return new PanelOptionsBuilder<PieChartOptions>(() => defaultPieChartOptions);\n  },\n  stat() {\n    return new PanelOptionsBuilder<StatOptions>(() => defaultStatOptions);\n  },\n  statetimeline() {\n    return new PanelOptionsBuilder<StateTimelineOptions>(() => defaultStateTimelineOptions);\n  },\n  statushistory() {\n    return new PanelOptionsBuilder<StatusHistoryOptions>(() => defaultStatusHistoryOptions);\n  },\n  table() {\n    return new PanelOptionsBuilder<TableOptions>(() => defaultTableOptions);\n  },\n  text() {\n    return new PanelOptionsBuilder<TextOptions>(() => defaultTextOptions);\n  },\n  timeseries() {\n    return new PanelOptionsBuilder<TimeSeriesOptions>();\n  },\n  trend() {\n    return new PanelOptionsBuilder<{}>();\n  },\n  traces() {\n    return new PanelOptionsBuilder<TrendOptions>();\n  },\n  xychart() {\n    return new PanelOptionsBuilder<XYChartOptions>(() => defaultXYChartOptions);\n  },\n};\n","import { TableFieldOptions as TableFieldConfig } from '@grafana/schema';\n\nimport {\n  FieldConfig as BarChartFieldConfig,\n  defaultFieldConfig as defaultBarChartFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/barchart/panelcfg/x/BarChartPanelCfg_types.gen';\nimport { FieldConfig as HeatmapFieldConfig } from '@grafana/schema/dist/esm/raw/composable/heatmap/panelcfg/x/HeatmapPanelCfg_types.gen';\nimport {\n  FieldConfig as HistogramFieldConfig,\n  defaultFieldConfig as defaultHistogramFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/histogram/panelcfg/x/HistogramPanelCfg_types.gen';\nimport { FieldConfig as PieChartFieldConfig } from '@grafana/schema/dist/esm/raw/composable/piechart/panelcfg/x/PieChartPanelCfg_types.gen';\nimport {\n  FieldConfig as StateTimelineFieldConfig,\n  defaultFieldConfig as defaultStateTimelineFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/statetimeline/panelcfg/x/StateTimelinePanelCfg_types.gen';\nimport {\n  FieldConfig as StatusHistoryFieldConfig,\n  defaultFieldConfig as defaultStatusHistoryFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/statushistory/panelcfg/x/StatusHistoryPanelCfg_types.gen';\nimport { FieldConfig as TimeSeriesFieldConfig } from '@grafana/schema/dist/esm/raw/composable/timeseries/panelcfg/x/TimeSeriesPanelCfg_types.gen';\nimport { FieldConfig as TrendFieldConfig } from '@grafana/schema/dist/esm/raw/composable/trend/panelcfg/x/TrendPanelCfg_types.gen';\nimport { defaultFieldConfig as defaultXYChartFieldConfig } from '@grafana/schema/dist/esm/raw/composable/xychart/panelcfg/x/XYChartPanelCfg_types.gen';\nimport { FieldConfigBuilder } from './FieldConfigBuilder';\n\nexport const FieldConfigBuilders = {\n  barchart() {\n    return new FieldConfigBuilder<BarChartFieldConfig>(() => defaultBarChartFieldConfig);\n  },\n  bargauge() {\n    return new FieldConfigBuilder<{}>();\n  },\n  datagrid() {\n    return new FieldConfigBuilder<{}>();\n  },\n  flamegraph() {\n    return new FieldConfigBuilder<{}>();\n  },\n  gauge() {\n    return new FieldConfigBuilder<{}>();\n  },\n  geomap() {\n    return new FieldConfigBuilder<{}>();\n  },\n  heatmap() {\n    return new FieldConfigBuilder<HeatmapFieldConfig>();\n  },\n  histogram() {\n    return new FieldConfigBuilder<HistogramFieldConfig>(() => defaultHistogramFieldConfig);\n  },\n  logs() {\n    return new FieldConfigBuilder<{}>();\n  },\n  news() {\n    return new FieldConfigBuilder<{}>();\n  },\n  nodegraph() {\n    return new FieldConfigBuilder<{}>();\n  },\n  piechart() {\n    return new FieldConfigBuilder<PieChartFieldConfig>();\n  },\n  stat() {\n    return new FieldConfigBuilder<{}>();\n  },\n  statetimeline() {\n    return new FieldConfigBuilder<StateTimelineFieldConfig>(() => defaultStateTimelineFieldConfig);\n  },\n  statushistory() {\n    return new FieldConfigBuilder<StatusHistoryFieldConfig>(() => defaultStatusHistoryFieldConfig);\n  },\n  table() {\n    return new FieldConfigBuilder<TableFieldConfig>();\n  },\n  text() {\n    return new FieldConfigBuilder<{}>();\n  },\n  timeseries() {\n    return new FieldConfigBuilder<TimeSeriesFieldConfig>();\n  },\n  trend() {\n    return new FieldConfigBuilder<{}>();\n  },\n  traces() {\n    return new FieldConfigBuilder<TrendFieldConfig>();\n  },\n  xychart() {\n    return new FieldConfigBuilder<{}>(() => defaultXYChartFieldConfig);\n  },\n};\n","import { TableFieldOptions as TableFieldConfig } from '@grafana/schema';\n\nimport {\n  Options as BarChartOptions,\n  FieldConfig as BarChartFieldConfig,\n  defaultOptions as defaultBarChartOptions,\n  defaultFieldConfig as defaultBarChartFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/barchart/panelcfg/x/BarChartPanelCfg_types.gen';\nimport {\n  Options as BarGaugeOptions,\n  defaultOptions as defaultBarGaugeOptions,\n} from '@grafana/schema/dist/esm/raw/composable/bargauge/panelcfg/x/BarGaugePanelCfg_types.gen';\nimport {\n  Options as DataGridOptions,\n  defaultOptions as defaultDataGridOptions,\n} from '@grafana/schema/dist/esm/raw/composable/datagrid/panelcfg/x/DatagridPanelCfg_types.gen';\nimport {\n  Options as GaugeOptions,\n  defaultOptions as defaultGaugeOptions,\n} from '@grafana/schema/dist/esm/raw/composable/gauge/panelcfg/x/GaugePanelCfg_types.gen';\nimport {\n  Options as GeomapOptions,\n  defaultOptions as defaultGeomapOptions,\n} from '@grafana/schema/dist/esm/raw/composable/geomap/panelcfg/x/GeomapPanelCfg_types.gen';\nimport {\n  Options as HeatmapOptions,\n  FieldConfig as HeatmapFieldConfig,\n  defaultOptions as defaultHeatmapOptions,\n} from '@grafana/schema/dist/esm/raw/composable/heatmap/panelcfg/x/HeatmapPanelCfg_types.gen';\nimport {\n  Options as HistogramOptions,\n  FieldConfig as HistogramFieldConfig,\n  defaultOptions as defaultHistogramOptions,\n  defaultFieldConfig as defaultHistogramFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/histogram/panelcfg/x/HistogramPanelCfg_types.gen';\nimport { Options as LogsOptions } from '@grafana/schema/dist/esm/raw/composable/logs/panelcfg/x/LogsPanelCfg_types.gen';\nimport {\n  Options as NewsOptions,\n  defaultOptions as defaultNewsOptions,\n} from '@grafana/schema/dist/esm/raw/composable/news/panelcfg/x/NewsPanelCfg_types.gen';\nimport { Options as NodeGraphOptions } from '@grafana/schema/dist/esm/raw/composable/nodegraph/panelcfg/x/NodeGraphPanelCfg_types.gen';\nimport {\n  Options as PieChartOptions,\n  FieldConfig as PieChartFieldConfig,\n  defaultOptions as defaultPieChartOptions,\n} from '@grafana/schema/dist/esm/raw/composable/piechart/panelcfg/x/PieChartPanelCfg_types.gen';\nimport {\n  Options as StatOptions,\n  defaultOptions as defaultStatOptions,\n} from '@grafana/schema/dist/esm/raw/composable/stat/panelcfg/x/StatPanelCfg_types.gen';\nimport {\n  Options as StateTimelineOptions,\n  FieldConfig as StateTimelineFieldConfig,\n  defaultOptions as defaultStateTimelineOptions,\n  defaultFieldConfig as defaultStateTimelineFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/statetimeline/panelcfg/x/StateTimelinePanelCfg_types.gen';\nimport {\n  Options as StatusHistoryOptions,\n  FieldConfig as StatusHistoryFieldConfig,\n  defaultOptions as defaultStatusHistoryOptions,\n  defaultFieldConfig as defaultStatusHistoryFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/statushistory/panelcfg/x/StatusHistoryPanelCfg_types.gen';\nimport {\n  Options as TableOptions,\n  defaultOptions as defaultTableOptions,\n} from '@grafana/schema/dist/esm/raw/composable/table/panelcfg/x/TablePanelCfg_types.gen';\nimport {\n  Options as TextOptions,\n  defaultOptions as defaultTextOptions,\n} from '@grafana/schema/dist/esm/raw/composable/text/panelcfg/x/TextPanelCfg_types.gen';\nimport {\n  Options as TimeSeriesOptions,\n  FieldConfig as TimeSeriesFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/timeseries/panelcfg/x/TimeSeriesPanelCfg_types.gen';\nimport {\n  Options as TrendOptions,\n  FieldConfig as TrendFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/trend/panelcfg/x/TrendPanelCfg_types.gen';\nimport {\n  Options as XYChartOptions,\n  defaultOptions as defaultXYChartOptions,\n  defaultFieldConfig as defaultXYChartFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/xychart/panelcfg/x/XYChartPanelCfg_types.gen';\n\nimport { VizPanelBuilder } from './VizPanelBuilder';\n\nexport const PanelBuilders = {\n  barchart() {\n    return new VizPanelBuilder<BarChartOptions, BarChartFieldConfig>(\n      'barchart',\n      '10.0.0',\n      () => defaultBarChartOptions,\n      () => defaultBarChartFieldConfig\n    );\n  },\n  bargauge() {\n    return new VizPanelBuilder<BarGaugeOptions, {}>('bargauge', '10.0.0', () => defaultBarGaugeOptions);\n  },\n  datagrid() {\n    return new VizPanelBuilder<DataGridOptions, {}>('datagrid', '10.0.0', () => defaultDataGridOptions);\n  },\n  flamegraph() {\n    return new VizPanelBuilder<{}, {}>('flamegraph', '10.0.0');\n  },\n  gauge() {\n    return new VizPanelBuilder<GaugeOptions, {}>('gauge', '10.0.0', () => defaultGaugeOptions);\n  },\n  geomap() {\n    return new VizPanelBuilder<GeomapOptions, {}>('geomap', '10.0.0', () => defaultGeomapOptions);\n  },\n  heatmap() {\n    return new VizPanelBuilder<HeatmapOptions, HeatmapFieldConfig>('heatmap', '10.0.0', () => defaultHeatmapOptions);\n  },\n  histogram() {\n    return new VizPanelBuilder<HistogramOptions, HistogramFieldConfig>(\n      'histogram',\n      '10.0.0',\n      () => defaultHistogramOptions,\n      () => defaultHistogramFieldConfig\n    );\n  },\n  logs() {\n    return new VizPanelBuilder<LogsOptions, {}>('logs', '10.0.0');\n  },\n  news() {\n    return new VizPanelBuilder<NewsOptions, {}>('news', '10.0.0', () => defaultNewsOptions);\n  },\n  nodegraph() {\n    return new VizPanelBuilder<NodeGraphOptions, {}>('nodeGraph', '10.0.0');\n  },\n  piechart() {\n    return new VizPanelBuilder<PieChartOptions, PieChartFieldConfig>(\n      'piechart',\n      '10.0.0',\n      () => defaultPieChartOptions\n    );\n  },\n  stat() {\n    return new VizPanelBuilder<StatOptions, {}>('stat', '10.0.0', () => defaultStatOptions);\n  },\n  statetimeline() {\n    return new VizPanelBuilder<StateTimelineOptions, StateTimelineFieldConfig>(\n      'state-timeline',\n      '10.0.0',\n      () => defaultStateTimelineOptions,\n      () => defaultStateTimelineFieldConfig\n    );\n  },\n  statushistory() {\n    return new VizPanelBuilder<StatusHistoryOptions, StatusHistoryFieldConfig>(\n      'status-history',\n      '10.0.0',\n      () => defaultStatusHistoryOptions,\n      () => defaultStatusHistoryFieldConfig\n    );\n  },\n  table() {\n    return new VizPanelBuilder<TableOptions, TableFieldConfig>('table', '10.0.0', () => defaultTableOptions);\n  },\n  text() {\n    return new VizPanelBuilder<TextOptions, {}>('text', '10.0.0', () => defaultTextOptions);\n  },\n  timeseries() {\n    return new VizPanelBuilder<TimeSeriesOptions, TimeSeriesFieldConfig>('timeseries', '10.0.0');\n  },\n  trend() {\n    return new VizPanelBuilder<{}, {}>('trend', '10.0.0');\n  },\n  traces() {\n    return new VizPanelBuilder<TrendOptions, TrendFieldConfig>('traces', '10.0.0');\n  },\n  xychart() {\n    return new VizPanelBuilder<XYChartOptions, {}>(\n      'xychart',\n      '10.0.0',\n      () => defaultXYChartOptions,\n      () => defaultXYChartFieldConfig\n    );\n  },\n};\n\nexport { PanelOptionsBuilders } from './PanelOptionsBuilders';\nexport { FieldConfigBuilders } from './FieldConfigBuilders';\nexport { FieldConfigOverridesBuilder } from './FieldConfigOverridesBuilder';\n","import { DeepPartial } from '../types';\nimport { FieldConfigBuilder } from './FieldConfigBuilder';\nimport { FieldConfigOverridesBuilder } from './FieldConfigOverridesBuilder';\nimport { PanelOptionsBuilder } from './PanelOptionsBuilder';\nimport { StandardFieldConfig, StandardFieldConfigInterface, VizConfig } from './types';\n\nexport class VizConfigBuilder<TOptions extends {}, TFieldConfig extends {}>\n  implements StandardFieldConfigInterface<StandardFieldConfig, VizConfigBuilder<TOptions, TFieldConfig>, 'set'>\n{\n  private _fieldConfigBuilder: FieldConfigBuilder<TFieldConfig>;\n  private _panelOptionsBuilder: PanelOptionsBuilder<TOptions>;\n  private _pluginId: string;\n  private _pluginVersion: string;\n\n  public constructor(\n    pluginId: string,\n    pluginVersion: string,\n    defaultOptions?: () => Partial<TOptions>,\n    defaultFieldConfig?: () => TFieldConfig\n  ) {\n    this._pluginId = pluginId;\n    this._pluginVersion = pluginVersion;\n    this._fieldConfigBuilder = new FieldConfigBuilder(defaultFieldConfig);\n    this._panelOptionsBuilder = new PanelOptionsBuilder(defaultOptions);\n  }\n\n  /**\n   * Set color.\n   */\n  public setColor(color: StandardFieldConfig['color']): this {\n    this._fieldConfigBuilder.setColor(color);\n    return this;\n  }\n\n  /**\n   * Set number of decimals to show.\n   */\n  public setDecimals(decimals: StandardFieldConfig['decimals']): this {\n    this._fieldConfigBuilder.setDecimals(decimals);\n    return this;\n  }\n\n  /**\n   * Set field display name.\n   */\n  public setDisplayName(displayName: StandardFieldConfig['displayName']): this {\n    this._fieldConfigBuilder.setDisplayName(displayName);\n    return this;\n  }\n\n  /**\n   * Set the standard field config property filterable.\n   */\n  public setFilterable(filterable: StandardFieldConfig['filterable']): this {\n    this._fieldConfigBuilder.setFilterable(filterable);\n    return this;\n  }\n\n  /**\n   * Set data links.\n   */\n  public setLinks(links: StandardFieldConfig['links']): this {\n    this._fieldConfigBuilder.setLinks(links);\n    return this;\n  }\n\n  /**\n   * Set value mappings.\n   */\n  public setMappings(mappings: StandardFieldConfig['mappings']): this {\n    this._fieldConfigBuilder.setMappings(mappings);\n    return this;\n  }\n\n  /**\n   * Set the standard field config property max.\n   */\n  public setMax(max: StandardFieldConfig['max']): this {\n    this._fieldConfigBuilder.setMax(max);\n    return this;\n  }\n\n  /**\n   * Set the standard field config property min.\n   */\n  public setMin(min: StandardFieldConfig['min']): this {\n    this._fieldConfigBuilder.setMin(min);\n    return this;\n  }\n\n  /**\n   * Set the standard field config property noValue.\n   */\n  public setNoValue(noValue: StandardFieldConfig['noValue']): this {\n    this._fieldConfigBuilder.setNoValue(noValue);\n    return this;\n  }\n\n  /**\n   * Set the standard field config property thresholds.\n   */\n  public setThresholds(thresholds: StandardFieldConfig['thresholds']): this {\n    this._fieldConfigBuilder.setThresholds(thresholds);\n    return this;\n  }\n\n  /**\n   * Set the standard field config property unit.\n   */\n  public setUnit(unit: StandardFieldConfig['unit']): this {\n    this._fieldConfigBuilder.setUnit(unit);\n    return this;\n  }\n\n  public setCustomFieldConfig<T extends TFieldConfig, K extends keyof T>(id: K, value: DeepPartial<T[K]>): this {\n    this._fieldConfigBuilder.setCustomFieldConfig(id, value);\n    return this;\n  }\n\n  public setOverrides(builder: (b: FieldConfigOverridesBuilder<TFieldConfig>) => void): this {\n    this._fieldConfigBuilder.setOverrides(builder);\n    return this;\n  }\n\n  /**\n   * Set an individual panel option. This will merge the value with the existing options.\n   */\n  public setOption<T extends TOptions, K extends keyof T>(id: K, value: DeepPartial<T[K]>): this {\n    this._panelOptionsBuilder.setOption(id, value);\n    return this;\n  }\n\n  /**\n   * Build the panel.\n   */\n  public build(): VizConfig<TOptions, TFieldConfig> {\n    return {\n      pluginId: this._pluginId,\n      pluginVersion: this._pluginVersion,\n      options: this._panelOptionsBuilder.build(),\n      fieldConfig: this._fieldConfigBuilder.build(),\n    };\n  }\n}\n","import { TableFieldOptions as TableFieldConfig } from '@grafana/schema';\n\nimport {\n  Options as BarChartOptions,\n  FieldConfig as BarChartFieldConfig,\n  defaultOptions as defaultBarChartOptions,\n  defaultFieldConfig as defaultBarChartFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/barchart/panelcfg/x/BarChartPanelCfg_types.gen';\nimport {\n  Options as BarGaugeOptions,\n  defaultOptions as defaultBarGaugeOptions,\n} from '@grafana/schema/dist/esm/raw/composable/bargauge/panelcfg/x/BarGaugePanelCfg_types.gen';\nimport {\n  Options as DataGridOptions,\n  defaultOptions as defaultDataGridOptions,\n} from '@grafana/schema/dist/esm/raw/composable/datagrid/panelcfg/x/DatagridPanelCfg_types.gen';\nimport {\n  Options as GaugeOptions,\n  defaultOptions as defaultGaugeOptions,\n} from '@grafana/schema/dist/esm/raw/composable/gauge/panelcfg/x/GaugePanelCfg_types.gen';\nimport {\n  Options as GeomapOptions,\n  defaultOptions as defaultGeomapOptions,\n} from '@grafana/schema/dist/esm/raw/composable/geomap/panelcfg/x/GeomapPanelCfg_types.gen';\nimport {\n  Options as HeatmapOptions,\n  FieldConfig as HeatmapFieldConfig,\n  defaultOptions as defaultHeatmapOptions,\n} from '@grafana/schema/dist/esm/raw/composable/heatmap/panelcfg/x/HeatmapPanelCfg_types.gen';\nimport {\n  Options as HistogramOptions,\n  FieldConfig as HistogramFieldConfig,\n  defaultOptions as defaultHistogramOptions,\n  defaultFieldConfig as defaultHistogramFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/histogram/panelcfg/x/HistogramPanelCfg_types.gen';\nimport { Options as LogsOptions } from '@grafana/schema/dist/esm/raw/composable/logs/panelcfg/x/LogsPanelCfg_types.gen';\nimport {\n  Options as NewsOptions,\n  defaultOptions as defaultNewsOptions,\n} from '@grafana/schema/dist/esm/raw/composable/news/panelcfg/x/NewsPanelCfg_types.gen';\nimport { Options as NodeGraphOptions } from '@grafana/schema/dist/esm/raw/composable/nodegraph/panelcfg/x/NodeGraphPanelCfg_types.gen';\nimport {\n  Options as PieChartOptions,\n  FieldConfig as PieChartFieldConfig,\n  defaultOptions as defaultPieChartOptions,\n} from '@grafana/schema/dist/esm/raw/composable/piechart/panelcfg/x/PieChartPanelCfg_types.gen';\nimport {\n  Options as StatOptions,\n  defaultOptions as defaultStatOptions,\n} from '@grafana/schema/dist/esm/raw/composable/stat/panelcfg/x/StatPanelCfg_types.gen';\nimport {\n  Options as StateTimelineOptions,\n  FieldConfig as StateTimelineFieldConfig,\n  defaultOptions as defaultStateTimelineOptions,\n  defaultFieldConfig as defaultStateTimelineFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/statetimeline/panelcfg/x/StateTimelinePanelCfg_types.gen';\nimport {\n  Options as StatusHistoryOptions,\n  FieldConfig as StatusHistoryFieldConfig,\n  defaultOptions as defaultStatusHistoryOptions,\n  defaultFieldConfig as defaultStatusHistoryFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/statushistory/panelcfg/x/StatusHistoryPanelCfg_types.gen';\nimport {\n  Options as TableOptions,\n  defaultOptions as defaultTableOptions,\n} from '@grafana/schema/dist/esm/raw/composable/table/panelcfg/x/TablePanelCfg_types.gen';\nimport {\n  Options as TextOptions,\n  defaultOptions as defaultTextOptions,\n} from '@grafana/schema/dist/esm/raw/composable/text/panelcfg/x/TextPanelCfg_types.gen';\nimport {\n  Options as TimeSeriesOptions,\n  FieldConfig as TimeSeriesFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/timeseries/panelcfg/x/TimeSeriesPanelCfg_types.gen';\nimport {\n  Options as TrendOptions,\n  FieldConfig as TrendFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/trend/panelcfg/x/TrendPanelCfg_types.gen';\nimport {\n  Options as XYChartOptions,\n  defaultOptions as defaultXYChartOptions,\n  defaultFieldConfig as defaultXYChartFieldConfig,\n} from '@grafana/schema/dist/esm/raw/composable/xychart/panelcfg/x/XYChartPanelCfg_types.gen';\n\nimport { VizConfigBuilder } from './VizConfigBuilder';\n\nexport const VizConfigBuilders = {\n  barchart() {\n    return new VizConfigBuilder<BarChartOptions, BarChartFieldConfig>(\n      'barchart',\n      '10.0.0',\n      () => defaultBarChartOptions,\n      () => defaultBarChartFieldConfig\n    );\n  },\n  bargauge() {\n    return new VizConfigBuilder<BarGaugeOptions, {}>('bargauge', '10.0.0', () => defaultBarGaugeOptions);\n  },\n  datagrid() {\n    return new VizConfigBuilder<DataGridOptions, {}>('datagrid', '10.0.0', () => defaultDataGridOptions);\n  },\n  flamegraph() {\n    return new VizConfigBuilder<{}, {}>('flamegraph', '10.0.0');\n  },\n  gauge() {\n    return new VizConfigBuilder<GaugeOptions, {}>('gauge', '10.0.0', () => defaultGaugeOptions);\n  },\n  geomap() {\n    return new VizConfigBuilder<GeomapOptions, {}>('geomap', '10.0.0', () => defaultGeomapOptions);\n  },\n  heatmap() {\n    return new VizConfigBuilder<HeatmapOptions, HeatmapFieldConfig>('heatmap', '10.0.0', () => defaultHeatmapOptions);\n  },\n  histogram() {\n    return new VizConfigBuilder<HistogramOptions, HistogramFieldConfig>(\n      'histogram',\n      '10.0.0',\n      () => defaultHistogramOptions,\n      () => defaultHistogramFieldConfig\n    );\n  },\n  logs() {\n    return new VizConfigBuilder<LogsOptions, {}>('logs', '10.0.0');\n  },\n  news() {\n    return new VizConfigBuilder<NewsOptions, {}>('news', '10.0.0', () => defaultNewsOptions);\n  },\n  nodegraph() {\n    return new VizConfigBuilder<NodeGraphOptions, {}>('nodeGraph', '10.0.0');\n  },\n  piechart() {\n    return new VizConfigBuilder<PieChartOptions, PieChartFieldConfig>(\n      'piechart',\n      '10.0.0',\n      () => defaultPieChartOptions\n    );\n  },\n  stat() {\n    return new VizConfigBuilder<StatOptions, {}>('stat', '10.0.0', () => defaultStatOptions);\n  },\n  statetimeline() {\n    return new VizConfigBuilder<StateTimelineOptions, StateTimelineFieldConfig>(\n      'state-timeline',\n      '10.0.0',\n      () => defaultStateTimelineOptions,\n      () => defaultStateTimelineFieldConfig\n    );\n  },\n  statushistory() {\n    return new VizConfigBuilder<StatusHistoryOptions, StatusHistoryFieldConfig>(\n      'status-history',\n      '10.0.0',\n      () => defaultStatusHistoryOptions,\n      () => defaultStatusHistoryFieldConfig\n    );\n  },\n  table() {\n    return new VizConfigBuilder<TableOptions, TableFieldConfig>('table', '10.0.0', () => defaultTableOptions);\n  },\n  text() {\n    return new VizConfigBuilder<TextOptions, {}>('text', '10.0.0', () => defaultTextOptions);\n  },\n  timeseries() {\n    return new VizConfigBuilder<TimeSeriesOptions, TimeSeriesFieldConfig>('timeseries', '10.0.0');\n  },\n  trend() {\n    return new VizConfigBuilder<{}, {}>('trend', '10.0.0');\n  },\n  traces() {\n    return new VizConfigBuilder<TrendOptions, TrendFieldConfig>('traces', '10.0.0');\n  },\n  xychart() {\n    return new VizConfigBuilder<XYChartOptions, {}>(\n      'xychart',\n      '10.0.0',\n      () => defaultXYChartOptions,\n      () => defaultXYChartFieldConfig\n    );\n  },\n};\n","import { getUrlWithAppState } from './components/SceneApp/utils';\nimport { registerRuntimePanelPlugin } from './components/VizPanel/registerRuntimePanelPlugin';\nimport { cloneSceneObjectState } from './core/sceneGraph/utils';\nimport { registerRuntimeDataSource } from './querying/RuntimeDataSource';\nimport { getUrlState, syncStateFromSearchParams } from './services/utils';\n\nimport { registerVariableMacro } from './variables/macros';\nimport { renderPrometheusLabelFilters } from './variables/utils';\nimport {\n  isAdHocVariable,\n  isQueryVariable,\n  isTextBoxVariable,\n  isCustomVariable,\n  isDataSourceVariable,\n  isConstantVariable,\n  isIntervalVariable,\n  isGroupByVariable,\n} from './variables/variants/guards';\n\nexport * from './core/types';\nexport * from './core/events';\nexport { sceneGraph } from './core/sceneGraph';\nexport * as behaviors from './behaviors';\nexport * as dataLayers from './querying/layers';\n\nexport { SceneObjectBase, useSceneObjectState } from './core/SceneObjectBase';\nexport { SceneDataNode } from './core/SceneDataNode';\nexport { SceneTimeRange } from './core/SceneTimeRange';\nexport { SceneTimeZoneOverride } from './core/SceneTimeZoneOverride';\n\nexport { SceneQueryRunner, type QueryRunnerState } from './querying/SceneQueryRunner';\nexport { DataProviderProxy } from './querying/DataProviderProxy';\nexport {\n  type ExtraQueryDescriptor,\n  type ExtraQueryProvider,\n  type ExtraQueryDataProcessor,\n} from './querying/ExtraQueryProvider';\nexport { SceneDataLayerSet, SceneDataLayerSetBase } from './querying/SceneDataLayerSet';\nexport { SceneDataLayerBase } from './querying/layers/SceneDataLayerBase';\nexport { SceneDataLayerControls } from './querying/layers/SceneDataLayerControls';\nexport { SceneDataTransformer, type SceneDataTransformerState } from './querying/SceneDataTransformer';\nexport { registerQueryWithController } from './querying/registerQueryWithController';\nexport { registerRuntimeDataSource, RuntimeDataSource } from './querying/RuntimeDataSource';\nexport type {\n  SceneQueryControllerLike,\n  SceneQueryControllerEntryType,\n  SceneQueryControllerEntry,\n} from './behaviors/SceneQueryController';\n\nexport * from './variables/types';\nexport { VariableDependencyConfig } from './variables/VariableDependencyConfig';\nexport { formatRegistry, type FormatVariable } from './variables/interpolation/formatRegistry';\nexport { VariableValueSelectors } from './variables/components/VariableValueSelectors';\nexport { VariableValueControl } from './variables/components/VariableValueControl';\nexport { SceneVariableSet } from './variables/sets/SceneVariableSet';\nexport { ConstantVariable } from './variables/variants/ConstantVariable';\nexport { CustomVariable } from './variables/variants/CustomVariable';\nexport { DataSourceVariable } from './variables/variants/DataSourceVariable';\nexport { QueryVariable } from './variables/variants/query/QueryVariable';\nexport { TestVariable } from './variables/variants/TestVariable';\nexport { TextBoxVariable } from './variables/variants/TextBoxVariable';\nexport {\n  MultiValueVariable,\n  type MultiValueVariableState,\n  type VariableGetOptionsArgs,\n} from './variables/variants/MultiValueVariable';\nexport { LocalValueVariable } from './variables/variants/LocalValueVariable';\nexport { IntervalVariable } from './variables/variants/IntervalVariable';\nexport { AdHocFiltersVariable } from './variables/adhoc/AdHocFiltersVariable';\nexport { GroupByVariable } from './variables/groupby/GroupByVariable';\nexport { type MacroVariableConstructor } from './variables/macros/types';\n\nexport { type UrlSyncManagerLike, UrlSyncManager, NewSceneObjectAddedEvent } from './services/UrlSyncManager';\nexport { useUrlSync } from './services/useUrlSync';\nexport { UrlSyncContextProvider } from './services/UrlSyncContextProvider';\nexport { SceneObjectUrlSyncConfig } from './services/SceneObjectUrlSyncConfig';\n\nexport { EmbeddedScene, type EmbeddedSceneState } from './components/EmbeddedScene';\nexport { VizPanel, type VizPanelState } from './components/VizPanel/VizPanel';\nexport { VizPanelMenu } from './components/VizPanel/VizPanelMenu';\nexport { NestedScene } from './components/NestedScene';\nexport { SceneCanvasText } from './components/SceneCanvasText';\nexport { SceneToolbarButton, SceneToolbarInput } from './components/SceneToolbarButton';\nexport { SceneTimePicker } from './components/SceneTimePicker';\nexport { SceneRefreshPicker, type SceneRefreshPickerState } from './components/SceneRefreshPicker';\nexport { SceneTimeRangeTransformerBase } from './core/SceneTimeRangeTransformerBase';\nexport { SceneTimeRangeCompare } from './components/SceneTimeRangeCompare';\nexport { SceneByFrameRepeater } from './components/SceneByFrameRepeater';\nexport { SceneByVariableRepeater } from './components/SceneByVariableRepeater';\nexport { SceneControlsSpacer } from './components/SceneControlsSpacer';\nexport {\n  SceneFlexLayout,\n  SceneFlexItem,\n  type SceneFlexItemState,\n  type SceneFlexItemLike,\n} from './components/layout/SceneFlexLayout';\nexport { SceneCSSGridLayout, SceneCSSGridItem } from './components/layout/CSSGrid/SceneCSSGridLayout';\nexport { SceneGridLayout } from './components/layout/grid/SceneGridLayout';\nexport { SceneGridItem } from './components/layout/grid/SceneGridItem';\nexport { SceneGridRow } from './components/layout/grid/SceneGridRow';\nexport { type SceneGridItemStateLike, type SceneGridItemLike } from './components/layout/grid/types';\nexport { SplitLayout } from './components/layout/split/SplitLayout';\nexport {\n  type SceneAppPageLike,\n  type SceneRouteMatch,\n  type SceneAppPageState,\n  type SceneAppDrilldownView,\n  type SceneAppRoute,\n} from './components/SceneApp/types';\nexport { SceneApp, useSceneApp } from './components/SceneApp/SceneApp';\nexport { SceneAppPage } from './components/SceneApp/SceneAppPage';\nexport { SceneReactObject } from './components/SceneReactObject';\nexport { SceneObjectRef } from './core/SceneObjectRef';\nexport {\n  PanelBuilders,\n  PanelOptionsBuilders,\n  FieldConfigBuilders,\n  FieldConfigOverridesBuilder,\n} from './core/PanelBuilders';\nexport { FieldConfigBuilder } from './core/PanelBuilders/FieldConfigBuilder';\nexport { VizPanelBuilder } from './core/PanelBuilders/VizPanelBuilder';\nexport { SceneDebugger } from './components/SceneDebugger/SceneDebugger';\nexport { VariableValueSelectWrapper } from './variables/components/VariableValueSelectors';\nexport { ControlsLabel } from './utils/ControlsLabel';\nexport { renderSelectForVariable } from './variables/components/VariableValueSelect';\nexport { VizConfigBuilder } from './core/PanelBuilders/VizConfigBuilder';\nexport { VizConfigBuilders } from './core/PanelBuilders/VizConfigBuilders';\nexport { type VizConfig } from './core/PanelBuilders/types';\n\nexport const sceneUtils = {\n  getUrlWithAppState,\n  registerRuntimePanelPlugin,\n  registerRuntimeDataSource,\n  registerVariableMacro,\n  cloneSceneObjectState,\n  syncStateFromSearchParams,\n  getUrlState,\n  renderPrometheusLabelFilters,\n\n  // Variable guards\n  isAdHocVariable,\n  isConstantVariable,\n  isCustomVariable,\n  isDataSourceVariable,\n  isIntervalVariable,\n  isQueryVariable,\n  isTextBoxVariable,\n  isGroupByVariable,\n};\n\nexport { SafeSerializableSceneObject } from './utils/SafeSerializableSceneObject';\n"],"names":["useLocation","locationSearchToObject","__spreadValues","urlUtil","locationUtil","React","__spreadProps","getPluginImportUtils","__objRest","_a","useState","useEffect","BusEventWithPayload","__privateAdd","__privateSet","__privateGet","Subscription","uuidv4","EventBusSrv","DataSourceApi","PluginType","of","LoadingState","getDefaultTimeRange","toUtc","dateMath","isValid","isDateTime","dateTimeParse","getTimeZone","RefreshEvent","rangeUtil","locationService","property","Registry","VariableFormatID","map","escapeRegex","isArray","textUtil","replace","dateTime","dateTimeFormat","useLocationService","locationServiceRuntime","isEqual","getFieldDisplayName","formatLabels","formattedValueToString","FieldType","getDisplayProcessor","getFieldDisplayValuesProxy","getFrameDisplayName","config","DataLinkBuiltInVars","getDataSourceSrv","mergeMap","forkJoin","getTemplateSrv","Observable","uFuzzy","filterNoOp","ToggleAllState","toSelectableValue","useMemo","value","Select","inputValue","selectors","MultiSelect","useTheme2","getSelectStyles","useStyles2","cx","Checkbox","css","values","from","tap","take","lastValueFrom","Tooltip","Icon","getStyles","IconButton","_b","keys","Field","Button","key","forwardRef","DropdownItem","useId","useFloating","autoUpdate","offset","flip","size","useRole","useDismiss","useListNavigation","useInteractions","AdHocCombobox","useRef","useCallback","model","filter","filterMultiValues","_","useImperativeHandle","options","useVirtualizer","useLayoutEffect","Spinner","FloatingPortal","FloatingFocusManager","Text","AdHocFiltersAlwaysWipCombobox","memo","AdHocFiltersComboboxRenderer","merge","mergeAll","finalize","counter","getNextRequestId","ReplaySubject","data","preProcessPanelData","DataTopic","DataFrameView","getRunRequest","toDataQueryError","cloneDeep","isExpressionReference","VariableSupportType","stringToJsRegex","isNumber","uniqBy","VariableSort","sortBy","toLower","getProcessedDataFrames","isDataFrame","VariableRefresh","debounce","throwError","catchError","CoreApp","scene","DashboardCursorSync","useMeasure","getAppEvents","SetPanelAttentionEvent","PanelChrome","AlertState","timeRange","_c","_d","_e","ErrorBoundaryAlert","PluginContextProvider","PanelContextProvider","isSystemOverrideWithRef","SeriesVisibilityChangeMode","override","createOverride","ByNamesMatcherMode","FieldMatcherID","fieldMatchers","FieldColorModeId","mergeWith","getPanelOptionsWithDefaults","renderMarkdown","isEmpty","applyFieldOverrides","compareArrayValues","compareDataFrameStructures","PanelPlugin","isFetchError","containerStyle","InlineSwitch","isString","standardTransformers","AnnotationEventFieldSource","partition","groupBy","every","find","head","concat","arrayToDataFrame","transformDataFrame","VariableHide","Subject","AutoSizeInput","items","Menu","uniqueId","useEffectOnce","width","height","ReactGridLayout","ToolbarButton","Input","useLocalStorage","TimeRangePicker","TimeRangeDirection","RefreshPicker","ButtonGroup","ButtonSelect","useLayoutStyle","clamp","throttle","Switch","Route","createContext","isPlainObject","JSONFormatter","Drawer","CustomScrollbar","useContext","PluginPage","defaultBarChartOptions","defaultBarGaugeOptions","defaultDataGridOptions","defaultGaugeOptions","defaultGeomapOptions","defaultHeatmapOptions","defaultHistogramOptions","defaultNewsOptions","defaultPieChartOptions","defaultStatOptions","defaultStateTimelineOptions","defaultStatusHistoryOptions","defaultTableOptions","defaultTextOptions","defaultXYChartOptions","defaultBarChartFieldConfig","defaultHistogramFieldConfig","defaultStateTimelineFieldConfig","defaultStatusHistoryFieldConfig","defaultXYChartFieldConfig"],"mappings":"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"}